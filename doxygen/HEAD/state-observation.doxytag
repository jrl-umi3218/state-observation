<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>pages.dox</name>
    <path>/home/runner/work/state-observation/state-observation/doc/pages/</path>
    <filename>pages_8dox</filename>
  </compound>
  <compound kind="file">
    <name>bidim-elastic-inv-pendulum-dyn-sys.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/dynamical-system/</path>
    <filename>bidim-elastic-inv-pendulum-dyn-sys_8hpp</filename>
    <includes id="dynamical-system-functor-base_8hpp" name="dynamical-system-functor-base.hpp" local="no" imported="no">state-observation/dynamical-system/dynamical-system-functor-base.hpp</includes>
    <includes id="noise-base_8hpp" name="noise-base.hpp" local="no" imported="no">state-observation/noise/noise-base.hpp</includes>
    <class kind="class">stateObservation::BidimElasticInvPendulum</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>dynamical-system-functor-base.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/dynamical-system/</path>
    <filename>dynamical-system-functor-base_8hpp</filename>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <class kind="class">stateObservation::DynamicalSystemFunctorBase</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>dynamical-system-simulator.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/dynamical-system/</path>
    <filename>dynamical-system-simulator_8hpp</filename>
    <includes id="dynamical-system-functor-base_8hpp" name="dynamical-system-functor-base.hpp" local="no" imported="no">state-observation/dynamical-system/dynamical-system-functor-base.hpp</includes>
    <class kind="class">stateObservation::DynamicalSystemSimulator</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>imu-dynamical-system.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/dynamical-system/</path>
    <filename>imu-dynamical-system_8hpp</filename>
    <includes id="dynamical-system-functor-base_8hpp" name="dynamical-system-functor-base.hpp" local="no" imported="no">state-observation/dynamical-system/dynamical-system-functor-base.hpp</includes>
    <includes id="noise-base_8hpp" name="noise-base.hpp" local="no" imported="no">state-observation/noise/noise-base.hpp</includes>
    <includes id="accelerometer-gyrometer_8hpp" name="accelerometer-gyrometer.hpp" local="no" imported="no">state-observation/sensors-simulation/accelerometer-gyrometer.hpp</includes>
    <includes id="rigid-body-kinematics_8hpp" name="rigid-body-kinematics.hpp" local="no" imported="no">state-observation/tools/rigid-body-kinematics.hpp</includes>
    <class kind="class">stateObservation::IMUDynamicalSystem</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>imu-magnetometer-dynamical-system.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/dynamical-system/</path>
    <filename>imu-magnetometer-dynamical-system_8hpp</filename>
    <includes id="dynamical-system-functor-base_8hpp" name="dynamical-system-functor-base.hpp" local="no" imported="no">state-observation/dynamical-system/dynamical-system-functor-base.hpp</includes>
    <includes id="noise-base_8hpp" name="noise-base.hpp" local="no" imported="no">state-observation/noise/noise-base.hpp</includes>
    <includes id="accelerometer-gyrometer-magnetometer_8hpp" name="accelerometer-gyrometer-magnetometer.hpp" local="no" imported="no">state-observation/sensors-simulation/accelerometer-gyrometer-magnetometer.hpp</includes>
    <includes id="rigid-body-kinematics_8hpp" name="rigid-body-kinematics.hpp" local="no" imported="no">state-observation/tools/rigid-body-kinematics.hpp</includes>
    <class kind="class">stateObservation::IMUMagnetometerDynamicalSystem</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>imu-mltpctive-dynamical-system.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/dynamical-system/</path>
    <filename>imu-mltpctive-dynamical-system_8hpp</filename>
    <includes id="dynamical-system-functor-base_8hpp" name="dynamical-system-functor-base.hpp" local="no" imported="no">state-observation/dynamical-system/dynamical-system-functor-base.hpp</includes>
    <includes id="noise-base_8hpp" name="noise-base.hpp" local="no" imported="no">state-observation/noise/noise-base.hpp</includes>
    <includes id="accelerometer-gyrometer_8hpp" name="accelerometer-gyrometer.hpp" local="no" imported="no">state-observation/sensors-simulation/accelerometer-gyrometer.hpp</includes>
    <includes id="rigid-body-kinematics_8hpp" name="rigid-body-kinematics.hpp" local="no" imported="no">state-observation/tools/rigid-body-kinematics.hpp</includes>
    <includes id="state-vector-arithmetics_8hpp" name="state-vector-arithmetics.hpp" local="no" imported="no">state-observation/tools/state-vector-arithmetics.hpp</includes>
    <class kind="class">stateObservation::IMUMltpctiveDynamicalSystem</class>
    <class kind="struct">stateObservation::IMUMltpctiveDynamicalSystem::opt</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>kinetics-observer.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/dynamics-estimators/</path>
    <filename>kinetics-observer_8hpp</filename>
    <includes id="dynamical-system-functor-base_8hpp" name="dynamical-system-functor-base.hpp" local="no" imported="no">state-observation/dynamical-system/dynamical-system-functor-base.hpp</includes>
    <includes id="noise-base_8hpp" name="noise-base.hpp" local="no" imported="no">state-observation/noise/noise-base.hpp</includes>
    <includes id="extended-kalman-filter_8hpp" name="extended-kalman-filter.hpp" local="no" imported="no">state-observation/observer/extended-kalman-filter.hpp</includes>
    <includes id="accelerometer-gyrometer_8hpp" name="accelerometer-gyrometer.hpp" local="no" imported="no">state-observation/sensors-simulation/accelerometer-gyrometer.hpp</includes>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <includes id="rigid-body-kinematics_8hpp" name="rigid-body-kinematics.hpp" local="no" imported="no">state-observation/tools/rigid-body-kinematics.hpp</includes>
    <includes id="state-vector-arithmetics_8hpp" name="state-vector-arithmetics.hpp" local="no" imported="no">state-observation/tools/state-vector-arithmetics.hpp</includes>
    <class kind="class">stateObservation::KineticsObserver</class>
    <class kind="struct">stateObservation::KineticsObserver::Sensor</class>
    <class kind="struct">stateObservation::KineticsObserver::IMU</class>
    <class kind="struct">stateObservation::KineticsObserver::Contact</class>
    <class kind="struct">stateObservation::KineticsObserver::AbsolutePoseSensor</class>
    <class kind="struct">stateObservation::KineticsObserver::Opt</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>lipm-dcm-estimator.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/dynamics-estimators/</path>
    <filename>lipm-dcm-estimator_8hpp</filename>
    <includes id="linear-kalman-filter_8hpp" name="linear-kalman-filter.hpp" local="no" imported="no">state-observation/observer/linear-kalman-filter.hpp</includes>
    <includes id="miscellaneous-algorithms_8hpp" name="miscellaneous-algorithms.hpp" local="no" imported="no">state-observation/tools/miscellaneous-algorithms.hpp</includes>
    <includes id="rigid-body-kinematics_8hpp" name="rigid-body-kinematics.hpp" local="no" imported="no">state-observation/tools/rigid-body-kinematics.hpp</includes>
    <class kind="class">stateObservation::LipmDcmEstimator</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>unidim-lipm-dcm-estimator.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/dynamics-estimators/</path>
    <filename>unidim-lipm-dcm-estimator_8hpp</filename>
    <includes id="linear-kalman-filter_8hpp" name="linear-kalman-filter.hpp" local="no" imported="no">state-observation/observer/linear-kalman-filter.hpp</includes>
    <includes id="miscellaneous-algorithms_8hpp" name="miscellaneous-algorithms.hpp" local="no" imported="no">state-observation/tools/miscellaneous-algorithms.hpp</includes>
    <class kind="class">stateObservation::UnidimLipmDcmEstimator</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>zmp-tracking-gain-estimator.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/dynamics-estimators/</path>
    <filename>zmp-tracking-gain-estimator_8hpp</filename>
    <includes id="linear-kalman-filter_8hpp" name="linear-kalman-filter.hpp" local="no" imported="no">state-observation/observer/linear-kalman-filter.hpp</includes>
    <includes id="miscellaneous-algorithms_8hpp" name="miscellaneous-algorithms.hpp" local="no" imported="no">state-observation/tools/miscellaneous-algorithms.hpp</includes>
    <includes id="rigid-body-kinematics_8hpp" name="rigid-body-kinematics.hpp" local="no" imported="no">state-observation/tools/rigid-body-kinematics.hpp</includes>
    <class kind="class">stateObservation::ZmpTrackingGainEstimator</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>imu-attitude-trajectory-reconstruction.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/examples/</path>
    <filename>imu-attitude-trajectory-reconstruction_8hpp</filename>
    <includes id="dynamical-system-simulator_8hpp" name="dynamical-system-simulator.hpp" local="no" imported="no">state-observation/dynamical-system/dynamical-system-simulator.hpp</includes>
    <includes id="imu-dynamical-system_8hpp" name="imu-dynamical-system.hpp" local="no" imported="no">state-observation/dynamical-system/imu-dynamical-system.hpp</includes>
    <includes id="extended-kalman-filter_8hpp" name="extended-kalman-filter.hpp" local="no" imported="no">state-observation/observer/extended-kalman-filter.hpp</includes>
    <includes id="miscellaneous-algorithms_8hpp" name="miscellaneous-algorithms.hpp" local="no" imported="no">state-observation/tools/miscellaneous-algorithms.hpp</includes>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::examples</namespace>
    <member kind="function">
      <type>IndexedVectorArray</type>
      <name>imuAttitudeTrajectoryReconstruction</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>a4eed802cc3be2d6b7632aae7655a1663</anchor>
      <arglist>(const IndexedVectorArray &amp;y, const IndexedVectorArray &amp;u, const Vector &amp;xh0, const Matrix &amp;p, const Matrix &amp;q, const Matrix &amp;r, double dt, bool withGyroBias)</arglist>
    </member>
    <member kind="function">
      <type>IndexedVectorArray</type>
      <name>imuAttitudeTrajectoryReconstruction</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>ae097f2efc30e8ba3b2d2aa2fa6bfccb7</anchor>
      <arglist>(const IndexedVectorArray &amp;y, const Vector &amp;xh0, const Matrix &amp;p, const Matrix &amp;q, const Matrix &amp;r, double dt, bool withGyroBias)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>imu-multiplicative-attitude-reconstruction.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/examples/</path>
    <filename>imu-multiplicative-attitude-reconstruction_8hpp</filename>
    <includes id="dynamical-system-simulator_8hpp" name="dynamical-system-simulator.hpp" local="no" imported="no">state-observation/dynamical-system/dynamical-system-simulator.hpp</includes>
    <includes id="imu-mltpctive-dynamical-system_8hpp" name="imu-mltpctive-dynamical-system.hpp" local="no" imported="no">state-observation/dynamical-system/imu-mltpctive-dynamical-system.hpp</includes>
    <includes id="extended-kalman-filter_8hpp" name="extended-kalman-filter.hpp" local="no" imported="no">state-observation/observer/extended-kalman-filter.hpp</includes>
    <includes id="miscellaneous-algorithms_8hpp" name="miscellaneous-algorithms.hpp" local="no" imported="no">state-observation/tools/miscellaneous-algorithms.hpp</includes>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::examples</namespace>
    <member kind="function">
      <type>IndexedVectorArray</type>
      <name>imuMultiplicativeAttitudeReconstruction</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>a1c59a4bf9cc0402e665e5eb35811642f</anchor>
      <arglist>(const IndexedVectorArray &amp;y, const IndexedVectorArray &amp;u, const Vector &amp;xh0, const Matrix &amp;p, const Matrix &amp;q, const Matrix &amp;r, double dt)</arglist>
    </member>
    <member kind="function">
      <type>IndexedVectorArray</type>
      <name>imuMultiplicativeAttitudeReconstruction</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>adee3a0854187297b681736dfae4f81de</anchor>
      <arglist>(const IndexedVectorArray &amp;y, const Vector &amp;xh0, const Matrix &amp;p, const Matrix &amp;q, const Matrix &amp;r, double dt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>offline-ekf-flexibility-estimation.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/examples/</path>
    <filename>offline-ekf-flexibility-estimation_8hpp</filename>
    <includes id="fixed-contact-ekf-flex-estimator-imu_8hpp" name="fixed-contact-ekf-flex-estimator-imu.hpp" local="no" imported="no">state-observation/flexibility-estimation/fixed-contact-ekf-flex-estimator-imu.hpp</includes>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::examples</namespace>
    <member kind="function">
      <type>stateObservation::IndexedVectorArray</type>
      <name>offlineEKFFlexibilityEstimation</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>a2030947ebe32a6e1c1a5bce717ff2c21</anchor>
      <arglist>(const stateObservation::IndexedVectorArray &amp;y, const stateObservation::IndexedVectorArray &amp;u, const Vector &amp;xh0, unsigned numberOfContacts, const std::vector&lt; Vector3, Eigen::aligned_allocator&lt; Vector3 &gt;&gt; &amp;contactsPositions, double dt, IndexedVectorArray *ino=0x0, IndexedVectorArray *premea=0x0)</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::IndexedVectorArray</type>
      <name>offlineEKFFlexibilityEstimation</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>a7f384716061baddce38a912c28a6493e</anchor>
      <arglist>(const stateObservation::IndexedVectorArray &amp;y, const Vector &amp;xh0, unsigned numberOfContacts, const std::vector&lt; Vector3, Eigen::aligned_allocator&lt; Vector3 &gt;&gt; &amp;contactsPositions, double dt)</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::IndexedVectorArray</type>
      <name>offlineEKFFlexibilityEstimation</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>a32d6f79c887ecae1b6642083a4ce3dec</anchor>
      <arglist>(const stateObservation::IndexedVectorArray &amp;y, const stateObservation::IndexedVectorArray &amp;u, const Vector &amp;xh0, unsigned numberOfContacts, const std::vector&lt; Vector3, Eigen::aligned_allocator&lt; Vector3 &gt; &gt; &amp;contactsPositions, double dt, IndexedVectorArray *ino, IndexedVectorArray *premea)</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::IndexedVectorArray</type>
      <name>offlineEKFFlexibilityEstimation</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>aee0c888ffe25334ae7a0ac2aaace171e</anchor>
      <arglist>(const stateObservation::IndexedVectorArray &amp;y, const Vector &amp;xh0, unsigned numberOfContacts, const std::vector&lt; Vector3, Eigen::aligned_allocator&lt; Vector3 &gt; &gt; &amp;contactsPositions, double dt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>offline-model-base-flex-estimation.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/examples/</path>
    <filename>offline-model-base-flex-estimation_8hpp</filename>
    <includes id="model-base-ekf-flex-estimator-imu_8hpp" name="model-base-ekf-flex-estimator-imu.hpp" local="no" imported="no">state-observation/flexibility-estimation/model-base-ekf-flex-estimator-imu.hpp</includes>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::examples</namespace>
    <member kind="typedef">
      <type>flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::state</type>
      <name>state</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>a32510182b45fc220f4ce11484e878cd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>stateObservation::IndexedVectorArray</type>
      <name>offlineModelBaseFlexEstimation</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>ac99fccf128adf104d136b9c98e4fe306</anchor>
      <arglist>(const stateObservation::IndexedVectorArray &amp;y, const stateObservation::IndexedVectorArray &amp;u, const Matrix &amp;xh0, const stateObservation::IndexedVectorArray numberOfContacts, double dt, double mass, bool withForce, const stateObservation::IndexedMatrixArray &amp;Q=stateObservation::IndexedMatrixArray(), const stateObservation::IndexedMatrixArray &amp;R=stateObservation::IndexedMatrixArray(), const Matrix3 &amp;kfe=Matrix3::Zero(), const Matrix3 &amp;kfv=Matrix3::Zero(), const Matrix3 &amp;kte=Matrix3::Zero(), const Matrix3 &amp;ktv=Matrix3::Zero(), IndexedVectorArray *prediction=0x0, IndexedVectorArray *inovation=0x0, IndexedVectorArray *predictedMeasurements=0x0, IndexedVectorArray *simulatedMeasurements=0x0, int verbose=0x0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ekf-flexibility-estimator-base.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/flexibility-estimation/</path>
    <filename>ekf-flexibility-estimator-base_8hpp</filename>
    <includes id="extended-kalman-filter_8hpp" name="extended-kalman-filter.hpp" local="no" imported="no">state-observation/observer/extended-kalman-filter.hpp</includes>
    <includes id="flexibility-estimator-base_8hpp" name="flexibility-estimator-base.hpp" local="no" imported="no">state-observation/flexibility-estimation/flexibility-estimator-base.hpp</includes>
    <class kind="class">stateObservation::flexibilityEstimation::EKFFlexibilityEstimatorBase</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::flexibilityEstimation</namespace>
  </compound>
  <compound kind="file">
    <name>fixed-contact-ekf-flex-estimator-imu.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/flexibility-estimation/</path>
    <filename>fixed-contact-ekf-flex-estimator-imu_8hpp</filename>
    <includes id="ekf-flexibility-estimator-base_8hpp" name="ekf-flexibility-estimator-base.hpp" local="no" imported="no">state-observation/flexibility-estimation/ekf-flexibility-estimator-base.hpp</includes>
    <includes id="imu-fixed-contact-dynamical-system_8hpp" name="imu-fixed-contact-dynamical-system.hpp" local="no" imported="no">state-observation/flexibility-estimation/imu-fixed-contact-dynamical-system.hpp</includes>
    <class kind="class">stateObservation::flexibilityEstimation::FixedContactEKFFlexEstimatorIMU</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::flexibilityEstimation</namespace>
  </compound>
  <compound kind="file">
    <name>flexibility-estimator-base.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/flexibility-estimation/</path>
    <filename>flexibility-estimator-base_8hpp</filename>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <class kind="class">stateObservation::flexibilityEstimation::FlexibilityEstimatorBase</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::flexibilityEstimation</namespace>
  </compound>
  <compound kind="file">
    <name>imu-elastic-local-frame-dynamical-system.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/flexibility-estimation/</path>
    <filename>imu-elastic-local-frame-dynamical-system_8hpp</filename>
    <includes id="dynamical-system-functor-base_8hpp" name="dynamical-system-functor-base.hpp" local="no" imported="no">state-observation/dynamical-system/dynamical-system-functor-base.hpp</includes>
    <includes id="noise-base_8hpp" name="noise-base.hpp" local="no" imported="no">state-observation/noise/noise-base.hpp</includes>
    <includes id="accelerometer-gyrometer_8hpp" name="accelerometer-gyrometer.hpp" local="no" imported="no">state-observation/sensors-simulation/accelerometer-gyrometer.hpp</includes>
    <includes id="hrp2_8hpp" name="hrp2.hpp" local="no" imported="no">state-observation/tools/hrp2.hpp</includes>
    <includes id="rigid-body-kinematics_8hpp" name="rigid-body-kinematics.hpp" local="no" imported="no">state-observation/tools/rigid-body-kinematics.hpp</includes>
    <class kind="class">stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem</class>
    <class kind="struct">stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::input</class>
    <class kind="struct">stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::state</class>
    <class kind="struct">stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::contactModel</class>
    <class kind="struct">stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::Optimization</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::flexibilityEstimation</namespace>
  </compound>
  <compound kind="file">
    <name>imu-fixed-contact-dynamical-system.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/flexibility-estimation/</path>
    <filename>imu-fixed-contact-dynamical-system_8hpp</filename>
    <includes id="dynamical-system-functor-base_8hpp" name="dynamical-system-functor-base.hpp" local="no" imported="no">state-observation/dynamical-system/dynamical-system-functor-base.hpp</includes>
    <includes id="noise-base_8hpp" name="noise-base.hpp" local="no" imported="no">state-observation/noise/noise-base.hpp</includes>
    <includes id="accelerometer-gyrometer_8hpp" name="accelerometer-gyrometer.hpp" local="no" imported="no">state-observation/sensors-simulation/accelerometer-gyrometer.hpp</includes>
    <includes id="rigid-body-kinematics_8hpp" name="rigid-body-kinematics.hpp" local="no" imported="no">state-observation/tools/rigid-body-kinematics.hpp</includes>
    <class kind="class">stateObservation::flexibilityEstimation::IMUFixedContactDynamicalSystem</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::flexibilityEstimation</namespace>
  </compound>
  <compound kind="file">
    <name>model-base-ekf-flex-estimator-imu.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/flexibility-estimation/</path>
    <filename>model-base-ekf-flex-estimator-imu_8hpp</filename>
    <includes id="ekf-flexibility-estimator-base_8hpp" name="ekf-flexibility-estimator-base.hpp" local="no" imported="no">state-observation/flexibility-estimation/ekf-flexibility-estimator-base.hpp</includes>
    <includes id="imu-elastic-local-frame-dynamical-system_8hpp" name="imu-elastic-local-frame-dynamical-system.hpp" local="no" imported="no">state-observation/flexibility-estimation/imu-elastic-local-frame-dynamical-system.hpp</includes>
    <class kind="class">stateObservation::flexibilityEstimation::ModelBaseEKFFlexEstimatorIMU</class>
    <class kind="struct">stateObservation::flexibilityEstimation::ModelBaseEKFFlexEstimatorIMU::contactModel</class>
    <class kind="struct">stateObservation::flexibilityEstimation::ModelBaseEKFFlexEstimatorIMU::optimization</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::flexibilityEstimation</namespace>
  </compound>
  <compound kind="file">
    <name>stable-imu-fixed-contact-dynamical-system.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/flexibility-estimation/</path>
    <filename>stable-imu-fixed-contact-dynamical-system_8hpp</filename>
    <includes id="dynamical-system-functor-base_8hpp" name="dynamical-system-functor-base.hpp" local="no" imported="no">state-observation/dynamical-system/dynamical-system-functor-base.hpp</includes>
    <includes id="noise-base_8hpp" name="noise-base.hpp" local="no" imported="no">state-observation/noise/noise-base.hpp</includes>
    <includes id="accelerometer-gyrometer_8hpp" name="accelerometer-gyrometer.hpp" local="no" imported="no">state-observation/sensors-simulation/accelerometer-gyrometer.hpp</includes>
    <includes id="rigid-body-kinematics_8hpp" name="rigid-body-kinematics.hpp" local="no" imported="no">state-observation/tools/rigid-body-kinematics.hpp</includes>
    <class kind="class">stateObservation::flexibilityEstimation::StableIMUFixedContactDynamicalSystem</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::flexibilityEstimation</namespace>
  </compound>
  <compound kind="file">
    <name>gaussian-white-noise.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/noise/</path>
    <filename>gaussian-white-noise_8hpp</filename>
    <includes id="noise-base_8hpp" name="noise-base.hpp" local="no" imported="no">state-observation/noise/noise-base.hpp</includes>
    <class kind="class">stateObservation::GaussianWhiteNoise</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>noise-base.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/noise/</path>
    <filename>noise-base_8hpp</filename>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <class kind="class">stateObservation::NoiseBase</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>extended-kalman-filter.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/observer/</path>
    <filename>extended-kalman-filter_8hpp</filename>
    <includes id="dynamical-system-functor-base_8hpp" name="dynamical-system-functor-base.hpp" local="no" imported="no">state-observation/dynamical-system/dynamical-system-functor-base.hpp</includes>
    <includes id="kalman-filter-base_8hpp" name="kalman-filter-base.hpp" local="no" imported="no">state-observation/observer/kalman-filter-base.hpp</includes>
    <class kind="class">stateObservation::ExtendedKalmanFilter</class>
    <class kind="struct">stateObservation::ExtendedKalmanFilter::Optimization</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>kalman-filter-base.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/observer/</path>
    <filename>kalman-filter-base_8hpp</filename>
    <includes id="zero-delay-observer_8hpp" name="zero-delay-observer.hpp" local="no" imported="no">state-observation/observer/zero-delay-observer.hpp</includes>
    <includes id="state-vector-arithmetics_8hpp" name="state-vector-arithmetics.hpp" local="no" imported="no">state-observation/tools/state-vector-arithmetics.hpp</includes>
    <class kind="class">stateObservation::KalmanFilterBase</class>
    <class kind="struct">stateObservation::KalmanFilterBase::optimizationContainer</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>linear-kalman-filter.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/observer/</path>
    <filename>linear-kalman-filter_8hpp</filename>
    <includes id="kalman-filter-base_8hpp" name="kalman-filter-base.hpp" local="no" imported="no">state-observation/observer/kalman-filter-base.hpp</includes>
    <class kind="class">stateObservation::LinearKalmanFilter</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>observer-base.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/observer/</path>
    <filename>observer-base_8hpp</filename>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <class kind="class">stateObservation::ObserverBase</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>tilt-estimator.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/observer/</path>
    <filename>tilt-estimator_8hpp</filename>
    <includes id="zero-delay-observer_8hpp" name="zero-delay-observer.hpp" local="no" imported="no">state-observation/observer/zero-delay-observer.hpp</includes>
    <class kind="class">stateObservation::TiltEstimator</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>zero-delay-observer.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/observer/</path>
    <filename>zero-delay-observer_8hpp</filename>
    <includes id="observer-base_8hpp" name="observer-base.hpp" local="no" imported="no">state-observation/observer/observer-base.hpp</includes>
    <class kind="class">stateObservation::ZeroDelayObserver</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>accelerometer-gyrometer-magnetometer.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/sensors-simulation/</path>
    <filename>accelerometer-gyrometer-magnetometer_8hpp</filename>
    <includes id="algebraic-sensor_8hpp" name="algebraic-sensor.hpp" local="no" imported="no">state-observation/sensors-simulation/algebraic-sensor.hpp</includes>
    <includes id="linear-acceleration_8hpp" name="linear-acceleration.hpp" local="no" imported="no">state-observation/sensors-simulation/algorithm/linear-acceleration.hpp</includes>
    <includes id="magnetic-field_8hpp" name="magnetic-field.hpp" local="no" imported="no">state-observation/sensors-simulation/algorithm/magnetic-field.hpp</includes>
    <includes id="rotation-velocity_8hpp" name="rotation-velocity.hpp" local="no" imported="no">state-observation/sensors-simulation/algorithm/rotation-velocity.hpp</includes>
    <class kind="class">stateObservation::AccelerometerGyrometerMagnetometer</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>accelerometer-gyrometer.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/sensors-simulation/</path>
    <filename>accelerometer-gyrometer_8hpp</filename>
    <includes id="algebraic-sensor_8hpp" name="algebraic-sensor.hpp" local="no" imported="no">state-observation/sensors-simulation/algebraic-sensor.hpp</includes>
    <includes id="linear-acceleration_8hpp" name="linear-acceleration.hpp" local="no" imported="no">state-observation/sensors-simulation/algorithm/linear-acceleration.hpp</includes>
    <includes id="rotation-velocity_8hpp" name="rotation-velocity.hpp" local="no" imported="no">state-observation/sensors-simulation/algorithm/rotation-velocity.hpp</includes>
    <class kind="class">stateObservation::AccelerometerGyrometer</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>algebraic-sensor.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/sensors-simulation/</path>
    <filename>algebraic-sensor_8hpp</filename>
    <includes id="sensor-base_8hpp" name="sensor-base.hpp" local="no" imported="no">state-observation/sensors-simulation/sensor-base.hpp</includes>
    <class kind="class">stateObservation::AlgebraicSensor</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>linear-acceleration.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/sensors-simulation/algorithm/</path>
    <filename>linear-acceleration_8hpp</filename>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <class kind="class">stateObservation::algorithm::LinearAcceleration</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::algorithm</namespace>
  </compound>
  <compound kind="file">
    <name>magnetic-field.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/sensors-simulation/algorithm/</path>
    <filename>magnetic-field_8hpp</filename>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <class kind="class">stateObservation::algorithm::MagneticField</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::algorithm</namespace>
  </compound>
  <compound kind="file">
    <name>rotation-velocity.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/sensors-simulation/algorithm/</path>
    <filename>rotation-velocity_8hpp</filename>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <class kind="class">stateObservation::algorithm::RotationVelocity</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::algorithm</namespace>
  </compound>
  <compound kind="file">
    <name>sensor-base.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/sensors-simulation/</path>
    <filename>sensor-base_8hpp</filename>
    <includes id="noise-base_8hpp" name="noise-base.hpp" local="no" imported="no">state-observation/noise/noise-base.hpp</includes>
    <class kind="class">stateObservation::SensorBase</class>
    <namespace>stateObservation</namespace>
  </compound>
  <compound kind="file">
    <name>definitions.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/tools/</path>
    <filename>definitions_8hpp</filename>
    <class kind="struct">stateObservation::isEigen</class>
    <class kind="struct">stateObservation::isMatrix</class>
    <class kind="struct">stateObservation::isMatrix&lt; Eigen::Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</class>
    <class kind="struct">stateObservation::EigenType</class>
    <class kind="struct">stateObservation::MatrixType</class>
    <class kind="class">stateObservation::FixOrDynMatrixToolsBySize</class>
    <class kind="class">stateObservation::FixOrDynMatrixToolsBySize&lt;-1, compileTimeCols &gt;</class>
    <class kind="class">stateObservation::FixOrDynMatrixToolsBySize&lt; compileTimeRows, -1 &gt;</class>
    <class kind="class">stateObservation::FixOrDynMatrixToolsBySize&lt;-1, -1 &gt;</class>
    <class kind="class">stateObservation::FixOrDynMatrixTools</class>
    <class kind="class">stateObservation::DebugItemDefaultValue</class>
    <class kind="class">stateObservation::detail::DebugItemDefaultError</class>
    <class kind="class">stateObservation::detail::DebugItemDefaultError&lt; message, dummy &gt;</class>
    <class kind="class">stateObservation::detail::DebugItemDefaultError&lt; exception, dummy &gt;</class>
    <class kind="class">stateObservation::detail::DebugItemDefaultError&lt; exceptionAddr, dummy &gt;</class>
    <class kind="class">stateObservation::DebugItem</class>
    <class kind="class">stateObservation::DebugItem&lt; T, defaultValue, false &gt;</class>
    <class kind="class">stateObservation::CheckedItem</class>
    <class kind="class">stateObservation::IndexedMatrixT</class>
    <class kind="class">stateObservation::IndexedMatrixArrayT</class>
    <class kind="struct">stateObservation::tools::SimplestStopwatch</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::detail</namespace>
    <namespace>stateObservation::cst</namespace>
    <namespace>stateObservation::tools</namespace>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchorfile>definitions_8hpp.html</anchorfile>
      <anchor>ae71449b1cc6e6250b91f539153a7a0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::VectorXd</type>
      <name>Vector</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>af12c1d00c2ef533fe40f8ceb1b45ef0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 1, 1 &gt;</type>
      <name>Vector1</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a6f53d614300b75f8957d902d03a7abab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 2, 1 &gt;</type>
      <name>Vector2</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ae93adff34402470724f4f09bfed6b13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Vector3d</type>
      <name>Vector3</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a48b631a657b372795575083586eed2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 1, Eigen::DontAlign &gt;</type>
      <name>Vector3Unaligned</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>aa11e0dcac5d3c2d176a52d62123e7a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Vector4d</type>
      <name>Vector4</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a509dae854b3dd8ef8319b659ad6e8a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 5, 1 &gt;</type>
      <name>Vector5</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a84272627c22ea78705ea6db0461fe215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>Vector6</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a9d339a150bf05286eca83bc588349afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixXd</type>
      <name>Matrix</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a8075b3a5e1c85f87c8e5c05b60100f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 1, 1 &gt;</type>
      <name>Matrix1</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>afcf925e9d95458823cbfd15f8462e9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix2d</type>
      <name>Matrix2</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a3d219ee3106305c450f0f33695d030dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix3d</type>
      <name>Matrix3</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a76df2159abbf28e45b50358d0edab068</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3, Eigen::DontAlign &gt;</type>
      <name>Matrix3Unaligned</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a2dce08f7e0a9b0dbb41faa88e7394c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix4d</type>
      <name>Matrix4</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a009f7f7e8b38b3cecc561738ad60eb52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 5, 5 &gt;</type>
      <name>Matrix5</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ac93c756df12b231075cc01963aeed10a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 6, 6 &gt;</type>
      <name>Matrix6</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>aa4856a065f88d780a5c575335fbf81ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 12, 12 &gt;</type>
      <name>Matrix12</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ace58e23991b2cf49ccb62997ec08aeb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Quaterniond</type>
      <name>Quaternion</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a1d5e7448fab378f14e92403b1c2ef5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; double, Eigen::DontAlign &gt;</type>
      <name>QuaternionUnaligned</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>af5aa1ced266d05a07805dfa9176dd6b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::AngleAxis&lt; double &gt;</type>
      <name>AngleAxis</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a149c9410becb3e78d7b2fa341d04ca4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Rotation2D&lt; double &gt;</type>
      <name>Rotation2D</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a3b15447c5aad5f26db72b3dc4a030247</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ac015d2857a6b9b16a16f1376d0df622c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long int</type>
      <name>TimeIndex</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a2d28b2a56e2f031d42c908ac185542c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Index</type>
      <name>TimeSize</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a5199554e1288134514be0c55502cb72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugItemDefaultValue&lt; bool, true &gt;</type>
      <name>defaultTrue</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>a2eb6dfdac5cd9b966267523389964f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugItemDefaultError&lt; message &gt;</type>
      <name>defaultErrorMSG</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>ac2df386962ec3fd0001208c9eb801c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugItemDefaultError&lt; exception &gt;</type>
      <name>defaultException</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>af67b3e88cf3250ba2420f4bfc017b236</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugItemDefaultError&lt; exceptionAddr &gt;</type>
      <name>defaultExceptionAddr</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>a900210535ad9242cb78f3f14e6cb537f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedItem&lt; Matrix3, false, false, true, true &gt;</type>
      <name>CheckedMatrix3</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a63a017136b64195f9dc51a0fc3afbc00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedItem&lt; Matrix6, false, false, true, true &gt;</type>
      <name>CheckedMatrix6</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ae1a04a4da1d52eecc1941ade109be16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedItem&lt; Matrix12, false, false, true, true &gt;</type>
      <name>CheckedMatrix12</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a2d975775077bb6d31aa43a555636b172</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedItem&lt; Vector3, false, false, true, true &gt;</type>
      <name>CheckedVector3</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>af10af27eb55087df9786c0f0c4688fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedItem&lt; Vector6, false, false, true, true &gt;</type>
      <name>CheckedVector6</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a087bf1641ad9fb513ae1b60eb38b69c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedItem&lt; Quaternion, false, false, true, true &gt;</type>
      <name>CheckedQuaternion</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>aa3771fcbd17321c96ddc17e2b1f1a7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedMatrixT&lt; Matrix &gt;</type>
      <name>IndexedMatrix</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a26c2c64efe6f012a7b85a9f6892686b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedMatrixT&lt; Vector &gt;</type>
      <name>IndexedVector</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>aecc3c0d59b6a43528535cda30241c60b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedMatrixT&lt; Vector3 &gt;</type>
      <name>IndexedVector3</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>af39a8e5d3c97c8eb21a0c0b7927cd3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedMatrixT&lt; Matrix3 &gt;</type>
      <name>IndexedMatrix3</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ae78b1feb9855ad5095cc7022d16e113e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedMatrixArrayT&lt; Matrix &gt;</type>
      <name>IndexedMatrixArray</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ac4b880b33f3bc814528573f04fee8ac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedMatrixArrayT&lt; Vector &gt;</type>
      <name>IndexedVectorArray</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a733f901496c8fff9609bec77ff52449e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::timer::auto_cpu_timer</type>
      <name>auto_cpu_timer</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a46bb38981df914761d0d3dbab83a0f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::timer::cpu_timer</type>
      <name>cpu_timer</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>adc99a724cfd639f6b63279dc58253946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::timer::cpu_timer</type>
      <name>cpu_times</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a954c89e76c57fd8b6737e98b5a1751b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>errorType</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>ad190d4c7c4232683d9647ac44eb195d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>message</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>ad190d4c7c4232683d9647ac44eb195d2a8a333557001121ababbf49a4748a21c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exception</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>ad190d4c7c4232683d9647ac44eb195d2a1d1b1e55680385c752295299c6393833</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exceptionAddr</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>ad190d4c7c4232683d9647ac44eb195d2a85de210f7611d3a8de56d02fb83a03db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void STATE_OBSERVATION_DLLAPI</type>
      <name>defaultSum</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>a03b2909c21d843ca6363914f8989d52a</anchor>
      <arglist>(const Vector &amp;stateVector, const Vector &amp;tangentVector, Vector &amp;sum)</arglist>
    </member>
    <member kind="function">
      <type>void STATE_OBSERVATION_DLLAPI</type>
      <name>defaultDifference</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>a0bc44c69f09db5aefccaf6ae66e603d2</anchor>
      <arglist>(const Vector &amp;stateVector1, const Vector &amp;stateVector2, Vector &amp;difference)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a1ed26cd92da35780dbd4271037b59702</anchor>
      <arglist>(double a, double b, double relativePrecision=cst::epsilon1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApproxAbs</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a3129c02470e794b1c530f618768cfcfd</anchor>
      <arglist>(double a, double b, double absolutePrecision=cst::epsilon1)</arglist>
    </member>
    <member kind="function">
      <type>std::string STATE_OBSERVATION_DLLAPI</type>
      <name>matrixToString</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>ae8ac2aae6e2bc337b16dd55671c74a2c</anchor>
      <arglist>(const Matrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>std::string STATE_OBSERVATION_DLLAPI</type>
      <name>vectorToString</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>adfcd48d12d9f497d58b073e3391a5269</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix STATE_OBSERVATION_DLLAPI</type>
      <name>stringToMatrix</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a8c69211ffb30e8000ef2ae0924400c8c</anchor>
      <arglist>(const std::string &amp;str, Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Vector STATE_OBSERVATION_DLLAPI</type>
      <name>stringToVector</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a74f8a7bd89ff524ef6bb2b2d1e43a3e3</anchor>
      <arglist>(const std::string &amp;str, Index length)</arglist>
    </member>
    <member kind="function">
      <type>Vector STATE_OBSERVATION_DLLAPI</type>
      <name>stringToVector</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a468d4476f60840aa7c642c2564f51020</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>gravityConstant</name>
      <anchorfile>namespacestateObservation_1_1cst.html</anchorfile>
      <anchor>a177e9790b91fd4af339c9c3c6d076cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vector</type>
      <name>gravity</name>
      <anchorfile>namespacestateObservation_1_1cst.html</anchorfile>
      <anchor>a73b34c228641cabcb79894e285fd751a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>epsilonAngle</name>
      <anchorfile>namespacestateObservation_1_1cst.html</anchorfile>
      <anchor>a2c627130ec0be695da77a37638d286d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>epsilon1</name>
      <anchorfile>namespacestateObservation_1_1cst.html</anchorfile>
      <anchor>abfc17bdd160f33df2c6825afc60e4d1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hrp2.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/tools/</path>
    <filename>hrp2_8hpp</filename>
    <class kind="struct">stateObservation::hrp2::contact</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::hrp2</namespace>
    <member kind="variable">
      <type>constexpr double</type>
      <name>m</name>
      <anchorfile>namespacestateObservation_1_1hrp2.html</anchorfile>
      <anchor>afdc5caf5cf6fdd7882939586591f8ce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>linKe</name>
      <anchorfile>namespacestateObservation_1_1hrp2.html</anchorfile>
      <anchor>ad2f2bc2cc2c6e1d8eb8bf90bb766b243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>angKe</name>
      <anchorfile>namespacestateObservation_1_1hrp2.html</anchorfile>
      <anchor>a91cb315eda3bfe61d01387eb385f1572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>linKv</name>
      <anchorfile>namespacestateObservation_1_1hrp2.html</anchorfile>
      <anchor>a7f9bda994349431964f21bf015a2814d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>angKv</name>
      <anchorfile>namespacestateObservation_1_1hrp2.html</anchorfile>
      <anchor>ad889b64064e98d1f14762382846f32f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>logger.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/tools/</path>
    <filename>logger_8hpp</filename>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <class kind="class">stateObservation::tools::Logger</class>
    <class kind="struct">stateObservation::tools::Logger::log_s</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::tools</namespace>
  </compound>
  <compound kind="file">
    <name>miscellaneous-algorithms.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/tools/</path>
    <filename>miscellaneous-algorithms_8hpp</filename>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::tools</namespace>
    <namespace>stateObservation::tools::Detail</namespace>
    <member kind="function">
      <type>T</type>
      <name>square</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>afb78ab184cc498aa2d5c6058daced3ac</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>derivate</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a1705e5c31fc5add912c2736ac35a8899</anchor>
      <arglist>(const T &amp;o1, const T &amp;o2, double dt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signum</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a5ca4451c967158d629bfef5cc715431d</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>ac3ea701cb1ea4ed3b1ce1fb439addbbe</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIfNormalized</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>af4a0136c41ba33f3e25ae5aaa0e40072</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIfNormalized</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>acbc6716620307adfafa8a79b7fc39a10</anchor>
      <arglist>(const Vector3 &amp;v, double &amp;outputSquaredNorm)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clampScalar</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a02f269bf8b3b8348a809e3fce6bab81a</anchor>
      <arglist>(const T &amp;x, const T &amp;max, const T &amp;min)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clampScalar</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>af9e261cbaa63ece0d040c191ffbac1b8</anchor>
      <arglist>(const T &amp;x, const T &amp;limit)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>normalizedLazy</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a20db4201d4820f97f29dd40047790cce</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double STATE_OBSERVATION_DLLAPI</type>
      <name>finiteTimeAccControl</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a775c0537bef8c115ee3b650a55f45f74</anchor>
      <arglist>(double x, double xd, double kp=-1, double kv=-1)</arglist>
    </member>
    <member kind="function">
      <type>Vector STATE_OBSERVATION_DLLAPI</type>
      <name>finiteTimeAccControl</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a593050a1314f244a4e7bc765dbab398a</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;xd, double kp=-1, double kv=-1)</arglist>
    </member>
    <member kind="function">
      <type>double constexpr</type>
      <name>sqrtNewtonRaphson</name>
      <anchorfile>namespacestateObservation_1_1tools_1_1Detail.html</anchorfile>
      <anchor>a991167aefd5a767c8946f84a8158b699</anchor>
      <arglist>(double x, double curr, double prev)</arglist>
    </member>
    <member kind="function">
      <type>double constexpr</type>
      <name>sqrt</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a00e4ac40ec193298c29e83b9473f1511</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>probability-law-simulation.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/tools/</path>
    <filename>probability-law-simulation_8hpp</filename>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <class kind="class">stateObservation::tools::ProbabilityLawSimulation</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::tools</namespace>
  </compound>
  <compound kind="file">
    <name>rigid-body-kinematics.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/tools/</path>
    <filename>rigid-body-kinematics_8hpp</filename>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <includes id="miscellaneous-algorithms_8hpp" name="miscellaneous-algorithms.hpp" local="no" imported="no">state-observation/tools/miscellaneous-algorithms.hpp</includes>
    <includes id="probability-law-simulation_8hpp" name="probability-law-simulation.hpp" local="no" imported="no">state-observation/tools/probability-law-simulation.hpp</includes>
    <class kind="struct">stateObservation::kine::indexes</class>
    <class kind="struct">stateObservation::kine::indexes&lt; rotationVector &gt;</class>
    <class kind="struct">stateObservation::kine::indexes&lt; quaternion &gt;</class>
    <class kind="class">stateObservation::kine::Orientation</class>
    <class kind="struct">stateObservation::kine::Kinematics</class>
    <class kind="struct">stateObservation::kine::Kinematics::Flags</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::kine</namespace>
    <member kind="enumeration">
      <type></type>
      <name>rotationType</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8688916c76bf0a024afc44b41439dbbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>matrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8688916c76bf0a024afc44b41439dbbfa07fd8d8f98df2e184dd481d467df9006</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rotationVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8688916c76bf0a024afc44b41439dbbfa9bf6c60e237b32fbc72ea7b4a4980aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>quaternion</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8688916c76bf0a024afc44b41439dbbfab63f03079ec398f762632495a8544d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>angleaxis</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8688916c76bf0a024afc44b41439dbbfac8d71bb617c21306a2dac1f69f35630d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a748446ce3994ea84c76c7ad506e59313</anchor>
      <arglist>(Vector3 &amp;position, const Vector3 &amp;velocity, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a32eea9cb05c07f738050771f0393b369</anchor>
      <arglist>(Vector3 &amp;position, Vector3 &amp;velocity, const Vector3 &amp;acceleration, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ad61717ca29b713c5b728b20d80471001</anchor>
      <arglist>(Matrix3 &amp;orientation, const Vector3 &amp;rotationVelocity, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8e0464c93771693abaa5dfe91ed467ab</anchor>
      <arglist>(Matrix3 &amp;orientation, Vector3 &amp;rotationVelocity, const Vector3 &amp;rotationAcceleration, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a0005b957a28c13b564da78f2608afe6a</anchor>
      <arglist>(Quaternion &amp;orientation, const Vector3 &amp;rotationVelocity, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a21b20d237788a4cd10f216cb1c38aa41</anchor>
      <arglist>(Quaternion &amp;orientation, Vector3 &amp;rotationVelocity, const Vector3 &amp;rotationAcceleration, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a7900c774f9febbdd8257ac66b4429c63</anchor>
      <arglist>(Vector3 &amp;position, Vector3 &amp;velocity, const Vector3 &amp;acceleration, Matrix3 &amp;orientation, Vector3 &amp;rotationVelocity, const Vector3 &amp;rotationAcceleration, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>abdbf1354c436808251497fd4e119f0c7</anchor>
      <arglist>(Vector3 &amp;position, Vector3 &amp;velocity, const Vector3 &amp;acceleration, Quaternion &amp;orientation, Vector3 &amp;rotationVelocity, const Vector3 &amp;rotationAcceleration, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a41358ba4d9e47e1d9cb1144dbca65cd7</anchor>
      <arglist>(Vector3 &amp;position, const Vector3 &amp;velocity, Matrix3 &amp;orientation, const Vector3 &amp;rotationVelocity, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a5903ef92774ae389e6a99971d5478047</anchor>
      <arglist>(Vector3 &amp;position, const Vector3 &amp;velocity, Quaternion &amp;orientation, const Vector3 &amp;rotationVelocity, double dt)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>regulateRotationVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a0287a3944705f372e2ac2ac31bac4bb8</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis</type>
      <name>rotationVectorToAngleAxis</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a6df5915c78e5e7d5cf388ca1a299a0e1</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>rotationVectorToRotationMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a863a3b576b3e9f738e4363df6a626417</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>rotationVectorToQuaternion</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a1f5d46cdaa166617af8af94aa26961ea</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>rotationMatrixToRotationVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a85b273f5ee7241b3632c70f1fc3d76ed</anchor>
      <arglist>(const Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>quaternionToRotationVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ac19d92086c08887462ed02c7fc6807b9</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>quaternionToRotationVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>acfd9b69aa25ea3efaf35c7dc20a900b7</anchor>
      <arglist>(const Vector4 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scalarComponent</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a9e5c5e4498da6d68a70a9fb8dfdc8ada</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>vectorComponent</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a842730b6ae85566d0c018c106be4cd68</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>rotationMatrixToRollPitchYaw</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a302c69d1c0b16d4560d26753266af72a</anchor>
      <arglist>(const Matrix3 &amp;R, Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>rotationMatrixToRollPitchYaw</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ad59c94c9cdc83265dad5bdc1aff8b0a8</anchor>
      <arglist>(const Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>rollPitchYawToRotationMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a983d44701296f0f0832a0398da5beeb8</anchor>
      <arglist>(double roll, double pitch, double yaw)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>rollPitchYawToRotationMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ab0f3927fd65a811d3e41b015b69ba5b9</anchor>
      <arglist>(const Vector3 &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>rollPitchYawToQuaternion</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a7261575e9d2d887c3843bc952c76f18e</anchor>
      <arglist>(double roll, double pitch, double yaw)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>rollPitchYawToQuaternion</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a22c75d74e4e5027d41c960888772555d</anchor>
      <arglist>(const Vector3 &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>orthogonalizeRotationMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a611022db556471cbed21a4eed37355ca</anchor>
      <arglist>(const Matrix3 &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>aead9f08042fb65071a46407b6dae1357</anchor>
      <arglist>(const Vector3 &amp;v, Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ab75794873a63e94993198e80b809d133</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric2</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ac34bc4054d2b23ba0e2a5b94bd317563</anchor>
      <arglist>(const Vector3 &amp;v, Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric2</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ab1fa595baef1bf6f4663e205b401b8cc</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>homogeneousMatrixToVector6</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a6c27cf34048bb34167cbcc6853f73750</anchor>
      <arglist>(const Matrix4 &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>Matrix4</type>
      <name>vector6ToHomogeneousMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a379f16ace3335a1054eb1d8301cd29bb</anchor>
      <arglist>(const Vector6 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>twoVectorsToRotationMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>abe6f88b1583d50a5294862b4c7d981e6</anchor>
      <arglist>(const Vector3 &amp;v1, const Vector3 Rv1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPureYaw</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8150acf2b58d56d429037b228e4f2e93</anchor>
      <arglist>(const Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>getInvariantHorizontalVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a72ae305ec685249359a0937bc6bd3d6d</anchor>
      <arglist>(const Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>getInvariantOrthogonalVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>acdef8357e78272632e36f5c641f9b495</anchor>
      <arglist>(const Matrix3 &amp;Rhat, const Vector3 &amp;Rtez)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>mergeTiltWithYaw</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a216d5faad57b48d05b29e2fe3d8a8108</anchor>
      <arglist>(const Vector3 &amp;Rtez, const Matrix3 &amp;R2, const Vector3 &amp;v=Vector3::UnitX()) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>mergeRoll1Pitch1WithYaw2</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a1df2e7ca40aa60783d30ec3f5569ceee</anchor>
      <arglist>(const Matrix3 &amp;R1, const Matrix3 &amp;R2, const Vector3 &amp;v=Vector3::UnitX())</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>mergeTiltWithYawAxisAgnostic</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ab39e1195d04b231e2fada2df6d1873cf</anchor>
      <arglist>(const Vector3 &amp;Rtez, const Matrix3 &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>mergeRoll1Pitch1WithYaw2AxisAgnostic</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a88e72a084165e71d16496b49956adc2f</anchor>
      <arglist>(const Matrix3 &amp;R1, const Matrix3 &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rotationMatrixToAngle</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a55b892c94f306f86b09e67e48586d9b4</anchor>
      <arglist>(const Matrix3 &amp;rotation, const Vector3 &amp;axis, const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rotationMatrixToYaw</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>aefe9fdadb3e16a4ccd280247a8c427da</anchor>
      <arglist>(const Matrix3 &amp;rotation, const Vector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rotationMatrixToYaw</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a4b938e84bfd08dbe9f3df6a41a636e82</anchor>
      <arglist>(const Matrix3 &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rotationMatrixToYawAxisAgnostic</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ae154db62e29c0bf232fb2496f91a68b6</anchor>
      <arglist>(const Matrix3 &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>zeroRotationQuaternion</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a4db2235240ade5be2a639ab6abc3ba64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>randomRotationQuaternion</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ac0486776b1a708566a2032afab559974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomAngle</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a85f2faa4d2d3e4192a6da1f804b186f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRotationMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a079083d3e47c99522590740017a1bf22</anchor>
      <arglist>(const Matrix3 &amp;, double precision=2 *cst::epsilon1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixedPointRotationToTranslation</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ac2e18d1e45e78b3e2debf1bb616f5f8a</anchor>
      <arglist>(const Matrix3 &amp;R, const Vector3 &amp;rotationVelocity, const Vector3 &amp;rotationAcceleration, const Vector3 &amp;fixedPoint, Vector3 &amp;outputTranslation, Vector3 &amp;outputLinearVelocity, Vector3 &amp;outputLinearAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>derivateRotationFD</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a381fc6dd3cfe7595e310a32772c5fb00</anchor>
      <arglist>(const Quaternion &amp;q1, const Quaternion &amp;q2, double dt)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>derivateRotationFD</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a222b976ebbcc0a22d187e4edeadbdc0b</anchor>
      <arglist>(const Vector3 &amp;o1, const Vector3 &amp;o2, double dt)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>derivateHomogeneousMatrixFD</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a80f4e548724c26787a2d310a3ea5fe16</anchor>
      <arglist>(const Matrix4 &amp;m1, const Matrix4 &amp;m2, double dt)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>derivatePoseThetaUFD</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a59cb89f5c2773fa5bdcf340be74aa33a</anchor>
      <arglist>(const Vector6 &amp;v1, const Vector6 &amp;v2, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>derivateRotationMultiplicative</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a42bc88c0abeba550aff6c190ccd5445e</anchor>
      <arglist>(const Vector3 &amp;deltaR, Matrix3 &amp;dRdR, Matrix3 &amp;dRddeltaR)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>derivateRtvMultiplicative</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a3ee76173adad5840dadfb8183242e866</anchor>
      <arglist>(const Matrix3 &amp;R, const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>IndexedVectorArray</type>
      <name>reconstructStateTrajectory</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ac78a3aef4a01fb9a9201ff4f0be10beb</anchor>
      <arglist>(const IndexedVectorArray &amp;positionOrientation, double dt)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>invertState</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a9ad7704e68b1852f1b2962e0487d53a9</anchor>
      <arglist>(const Vector &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>Matrix4</type>
      <name>invertHomoMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a11103e044b5db4b8ba4857f88ee82504</anchor>
      <arglist>(const Matrix4 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>rigid-body-kinematics_8hpp.html</anchorfile>
      <anchor>ae61601d32684f4f130ec6a54939f27ea</anchor>
      <arglist>(std::ostream &amp;os, const stateObservation::kine::Kinematics &amp;k)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>quatNormTol</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>aa01dc4db866cf56126eec454dba6702f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>state-vector-arithmetics.hpp</name>
    <path>/home/runner/work/state-observation/state-observation/include/state-observation/tools/</path>
    <filename>state-vector-arithmetics_8hpp</filename>
    <includes id="definitions_8hpp" name="definitions.hpp" local="no" imported="no">state-observation/tools/definitions.hpp</includes>
    <class kind="class">stateObservation::StateVectorArithmetics</class>
    <namespace>stateObservation</namespace>
    <namespace>stateObservation::detail</namespace>
    <member kind="function">
      <type>void STATE_OBSERVATION_DLLAPI</type>
      <name>defaultSum</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>a03b2909c21d843ca6363914f8989d52a</anchor>
      <arglist>(const Vector &amp;stateVector, const Vector &amp;tangentVector, Vector &amp;sum)</arglist>
    </member>
    <member kind="function">
      <type>void STATE_OBSERVATION_DLLAPI</type>
      <name>defaultDifference</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>a0bc44c69f09db5aefccaf6ae66e603d2</anchor>
      <arglist>(const Vector &amp;stateVector1, const Vector &amp;stateVector2, Vector &amp;difference)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/runner/work/state-observation/state-observation/</path>
    <filename>README_8md</filename>
  </compound>
  <compound kind="struct">
    <name>stateObservation::KineticsObserver::AbsolutePoseSensor</name>
    <filename>structstateObservation_1_1KineticsObserver_1_1AbsolutePoseSensor.html</filename>
    <base>stateObservation::KineticsObserver::Sensor</base>
    <member kind="function">
      <type></type>
      <name>AbsolutePoseSensor</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1AbsolutePoseSensor.html</anchorfile>
      <anchor>ad4791aff52eb0dee6357187d710dfce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Kinematics</type>
      <name>pose</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1AbsolutePoseSensor.html</anchorfile>
      <anchor>a4f140b4344248ef4a57b322603948ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CheckedMatrix6</type>
      <name>covMatrix</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1AbsolutePoseSensor.html</anchorfile>
      <anchor>a8a2f4d4ea9a957bbd50463c88c782014</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Kinematics::Flags::Byte</type>
      <name>poseFlags</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1AbsolutePoseSensor.html</anchorfile>
      <anchor>ab42476a216bc452806447c020252ac6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::AccelerometerGyrometer</name>
    <filename>classstateObservation_1_1AccelerometerGyrometer.html</filename>
    <base>stateObservation::AlgebraicSensor</base>
    <base protection="protected">stateObservation::algorithm::LinearAcceleration</base>
    <base protection="protected">stateObservation::algorithm::RotationVelocity</base>
    <member kind="function">
      <type></type>
      <name>AccelerometerGyrometer</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>affc2a7b349e93c1f81c2ccc7d7673053</anchor>
      <arglist>(bool matrixMode=false, bool withAcceleroBias=false, bool withGyroBias=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AccelerometerGyrometer</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>aac6f0f8f1d546b9377005a39e3a83ef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrixMode</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>af82f2263d32f909586880dfcaa9f03af</anchor>
      <arglist>(bool matrixMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWithGyroBias</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>ab8f4eb4a9577f491de343f4c0fb68e43</anchor>
      <arglist>(bool withGyroBias)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWithAcceleroBias</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>a848dd7d3f963365acddd0a9825e123ca</anchor>
      <arglist>(bool withAcceleroBias)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>acd55b2c1fdab7f25f9b0b4a479d8d726</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasurementSize_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>abac7eab9908b5f9bbb19a36e815fd3a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Vector</type>
      <name>computeNoiselessMeasurement_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>a20c0f4ea8ae8777495a0fd12878e10c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateStateSize_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>aadda42216173c1aa6c9cf5541d520bdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>r_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>a7d3852e093efa3f3ddbb7d5ebbac70cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>acc_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>abb4524384007ca7cfb2bd52ac6c8adf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>omega_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>a1b8286d9de8d69fd612c80f536f961d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>output_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>ad659228fe2eeb04323ed8cf8f53e8972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withGyroBias_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>adae4429f0ec1e63fdaea73f4818b83ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withAcceleroBias_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>ae277c683166c5f84dcf2d34842299d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>matrixMode_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>a477ee1fcc29f77bac83cca4f27c8496e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>currentStateSize_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>a40a2d19abd031b45e8c099cdb47b244b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>stateSize_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>a39e4e95f1d6f0a76bb702142b321fac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>stateSizeMatrix_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>a0017a3accc95760d29b66668ced0b015</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>measurementSize_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometer.html</anchorfile>
      <anchor>a3ff8dddb15c8df3adbe5903aa8838c3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::AccelerometerGyrometerMagnetometer</name>
    <filename>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</filename>
    <base>stateObservation::AlgebraicSensor</base>
    <base protection="protected">stateObservation::algorithm::LinearAcceleration</base>
    <base protection="protected">stateObservation::algorithm::RotationVelocity</base>
    <base protection="protected">stateObservation::algorithm::MagneticField</base>
    <member kind="function">
      <type></type>
      <name>AccelerometerGyrometerMagnetometer</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>afa69fe140ecf79a27e6ff380365e545f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AccelerometerGyrometerMagnetometer</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>a66d8cf6cc2a203c487c0a417cc15f8a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrixMode</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>a4ef0145c776d35c8f67caf2d353f3ce0</anchor>
      <arglist>(bool matrixMode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>aa6e69734a556228bba0911ce7f10012b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasurementSize_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>a3f5bd27984961b95dc87c4d5609bf3e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Vector</type>
      <name>computeNoiselessMeasurement_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>af8ad9cf16b3702c84e1a64896bdd96cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>r_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>a80c48a67a488751df93ccac48162ebc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>acc_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>ab2b941fec95095cc34530d97923942c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>omega_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>a93a25207229e3cc82f3d3c9af0d8809f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>magne_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>a90d36615a64954a089ee027b2b5d7364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>output_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>af66fb2315cd8616e70266fa6c4f19984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>matrixMode_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>a664836a07eaf65146615a7e6121d3cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>currentStateSize_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>a3a0bdaf1dba0e636f3ddad21b2a7bcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>stateSize_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>acf66f4a9d0c9ee8087cd00d31ef0313d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>stateSizeMatrix_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>a1cea2eec47eec5e4500ad5e7d85cb4f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>measurementSize_</name>
      <anchorfile>classstateObservation_1_1AccelerometerGyrometerMagnetometer.html</anchorfile>
      <anchor>abceceea3c9c31d779135832d4f20237b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::AlgebraicSensor</name>
    <filename>classstateObservation_1_1AlgebraicSensor.html</filename>
    <base>stateObservation::SensorBase</base>
    <member kind="function">
      <type></type>
      <name>AlgebraicSensor</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>a471573d42df7ebb44d843fdb21cd34f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AlgebraicSensor</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>ab68bfed0cafacc67d27fdb59faeaaaff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getMeasurements</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>ae1e4246613f525c151b2b4cb33732ec4</anchor>
      <arglist>(bool noisy=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>a5a03e0a847539caa457c8c9e93daecf4</anchor>
      <arglist>(const Vector &amp;state, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeIndex</type>
      <name>getTime</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>ae5d5ea7fce3de8de54c5e111e2077dad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>af605d2135835d0765a2ec90c65ca10f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>aac61db371820cace77b59d123c02c0d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>concatenateWithInput</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>a6bbb45e72d6f63375883b37e7f066ae9</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Vector</type>
      <name>computeNoiselessMeasurement_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>a5a7fe12d4329c1b5740a1e3282ca7f98</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Index</type>
      <name>getStateSize_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>a464e8c81e9526cb29c416802254fc98a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Index</type>
      <name>getMeasurementSize_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>af7888252c3ed6bb1fb9ae514e7443d87</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vector</type>
      <name>computeNoisyMeasurement_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>aee0ab148e8191b672140aeb927862510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkState_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>a9a52b994235ee626bc4cda79d2408af2</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeIndex</type>
      <name>time_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>a7b2d955d6df28292c1b6f2e2dae6037e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>concat_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>ac0f4989bcf2e5e1e07dc5ec3b2aa3482</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>state_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>a9f7ba6e5b440e632aeccf1bf044208a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>directInputToOutput_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>a2660c6e87ebebad6c8f9424f73311308</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>storedNoisyMeasurement_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>a9df954f5e19b0188cc8a3c6bfea2a641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>noisyMeasurement_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>af9170e7cc81cb9ebf5ae93863783ccf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>storedNoiselessMeasurement_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>a292b2ee676e3e503ac40e9e9c5cde69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>noiselessMeasurement_</name>
      <anchorfile>classstateObservation_1_1AlgebraicSensor.html</anchorfile>
      <anchor>acbd8b5ae7d875378bd2b889d0ddbfeb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::BidimElasticInvPendulum</name>
    <filename>classstateObservation_1_1BidimElasticInvPendulum.html</filename>
    <base>stateObservation::DynamicalSystemFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>BidimElasticInvPendulum</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>ad5c168dc348f72a07d789627d2a40020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BidimElasticInvPendulum</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>afe5d039637848bb4ae9c6b9c4039c72b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>stateDynamics</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>aca2141883dc74798df28c538a30ec1f9</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>measureDynamics</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>a93bd8b67e879259107e63aea509a0184</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProcessNoise</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>ab16091ad379fba5a251f25f40ad8426f</anchor>
      <arglist>(NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetProcessNoise</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>ab32c0d5aa38ba05ebef475170d98c890</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoiseBase *</type>
      <name>getProcessNoise</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>a7b71a4da83f269006c65aac9decb070f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>a5a7e6dcd01941b5f2a8c29c5dd88d069</anchor>
      <arglist>(NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>a04e5abb1aac3e141fb63947dfee26a2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoiseBase *</type>
      <name>getMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>aa7ea495ec99c25d25b3cacfc42e2e7d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSamplingPeriod</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>ac2476129028072683640cd1bafc13971</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>a7242758bcb47e92af4abf050151c32f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>a3929de96241c162cdee7deef6a03198a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>ade3b008ff13ab955e4bcc612c2a70551</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>a763dafd35923c8effb29fdfa71836d4e</anchor>
      <arglist>(const double &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMass</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>a813c79a719f917c3e4071d5f0d626b0a</anchor>
      <arglist>(const double &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElasticity</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>abbc0b0504eb34e61809bf1207874c48f</anchor>
      <arglist>(const double &amp;k)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>k_</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>a4f2bc9783e292f7578923cd6fcb9f0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>a9735319fa33848437952fa198a73f2db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>h_</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>abde6d9c3e315a8deae47f8c4a606ece5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NoiseBase *</type>
      <name>processNoise_</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>a60c725cac65517d3f005a06c9f55f3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>acdc11d6f02a3dbfa0cd10643aae41a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>stateSize_</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>a833bb0f2feea855424fd5a2288b30769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>inputSize_</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>ac2ca13a55456866c56a2b4fd60ed106e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>measurementSize_</name>
      <anchorfile>classstateObservation_1_1BidimElasticInvPendulum.html</anchorfile>
      <anchor>ab8520612f3c46f0c64dd4e0ec5a87e2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::CheckedItem</name>
    <filename>classstateObservation_1_1CheckedItem.html</filename>
    <templarg>T</templarg>
    <templarg>lazy</templarg>
    <templarg>alwaysCheck</templarg>
    <templarg>assertion</templarg>
    <templarg>eigenAlignedNew</templarg>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>af7153a2215fc5b650a14e6f0e9355c24</anchor>
      <arglist>(bool initialize=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a72f4a8987431c3b461c2a21ea42a46de</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7321df3bd6b424ab54f940f3473beaa4</anchor>
      <arglist>(const CheckedItem &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a0cce79029c1cc90f5de556c678b9e65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CheckedItem &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a60857f01aeec2e0a9ae78a864f386515</anchor>
      <arglist>(const CheckedItem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad9745c08f24174d1778c17b9a0571bc0</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a5bce8364ab5313411bb365b58272facb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>af359019731aae1de7f2f75ea2a638d39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>chckitm_getValue</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7caf729949a22fd433331f319afd6865</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a1c21e12526f61687287565673359b050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>aa8061e9072a022e11dd9bc3ebbc42507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad5c080e32c963db9a85e437a34b573a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a4fa842cac87229eb793137ed2e8bc43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a37c50a4f2e4ff48a930ba2fc1fc8ab35</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssertMessage</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ae6a4661ff12e5e64490ed28e1c49a30c</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExceptionPtr</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>abb85bf0c1c6431ce4715644d765b3452</anchor>
      <arglist>(std::exception *e)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad24a7416be304c90706ab83d4a93a009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; bool, detail::defaultTrue, do_check_ &gt;</type>
      <name>IsSet</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a1d1cb05f76bebc68d8703b39eb62051e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; const char *, detail::defaultErrorMSG, do_assert_ &gt;</type>
      <name>AssertMsg</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7bacb9583ec80cec7b1754706047d116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; const std::exception *, detail::defaultExceptionAddr, do_exception_ &gt;</type>
      <name>ExceptionPtr</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a0d60a9634b6f4b1f6c0ece9aed55535e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>chckitm_check_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a68fd02e1bd5cb800316014f75619ebcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IsSet</type>
      <name>isSet_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ac155961f6f9dc3fd3a37603fae7ad386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AssertMsg</type>
      <name>assertMsg_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a8e45084f120d6f782aec4929e93a4844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExceptionPtr</type>
      <name>exceptionPtr_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a4bc1982ecd9ce069a304eabc8e5b6a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>v_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>abda5712a0eadc461a7475bed36eaa8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_check_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a873f1d6d12f25223ce80b9cb68bc17bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_assert_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>aa1290ff1e7ac6a25c5c6faabe3e96f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_exception_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a9f6d3c18eaefede4c15fbde61e12fc3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedItem&lt; Matrix3, false, false, true, true &gt;</name>
    <filename>classstateObservation_1_1CheckedItem.html</filename>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>af7153a2215fc5b650a14e6f0e9355c24</anchor>
      <arglist>(bool initialize=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a72f4a8987431c3b461c2a21ea42a46de</anchor>
      <arglist>(const Matrix3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7321df3bd6b424ab54f940f3473beaa4</anchor>
      <arglist>(const CheckedItem &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a0cce79029c1cc90f5de556c678b9e65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CheckedItem &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a60857f01aeec2e0a9ae78a864f386515</anchor>
      <arglist>(const CheckedItem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3 &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad9745c08f24174d1778c17b9a0571bc0</anchor>
      <arglist>(const Matrix3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Matrix3</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a5bce8364ab5313411bb365b58272facb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Matrix3 &amp;</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>af359019731aae1de7f2f75ea2a638d39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>chckitm_getValue</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7caf729949a22fd433331f319afd6865</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3 &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a1c21e12526f61687287565673359b050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3 &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>aa8061e9072a022e11dd9bc3ebbc42507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad5c080e32c963db9a85e437a34b573a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a4fa842cac87229eb793137ed2e8bc43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a37c50a4f2e4ff48a930ba2fc1fc8ab35</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3 &amp;</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad24a7416be304c90706ab83d4a93a009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssertMessage</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ae6a4661ff12e5e64490ed28e1c49a30c</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExceptionPtr</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>abb85bf0c1c6431ce4715644d765b3452</anchor>
      <arglist>(std::exception *e)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; bool, detail::defaultTrue, do_check_ &gt;</type>
      <name>IsSet</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a1d1cb05f76bebc68d8703b39eb62051e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; const char *, detail::defaultErrorMSG, do_assert_ &gt;</type>
      <name>AssertMsg</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7bacb9583ec80cec7b1754706047d116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; const std::exception *, detail::defaultExceptionAddr, do_exception_ &gt;</type>
      <name>ExceptionPtr</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a0d60a9634b6f4b1f6c0ece9aed55535e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>chckitm_check_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a68fd02e1bd5cb800316014f75619ebcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IsSet</type>
      <name>isSet_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ac155961f6f9dc3fd3a37603fae7ad386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AssertMsg</type>
      <name>assertMsg_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a8e45084f120d6f782aec4929e93a4844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExceptionPtr</type>
      <name>exceptionPtr_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a4bc1982ecd9ce069a304eabc8e5b6a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>v_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>abda5712a0eadc461a7475bed36eaa8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_check_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a873f1d6d12f25223ce80b9cb68bc17bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_assert_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>aa1290ff1e7ac6a25c5c6faabe3e96f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_exception_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a9f6d3c18eaefede4c15fbde61e12fc3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedItem&lt; Matrix6, false, false, true, true &gt;</name>
    <filename>classstateObservation_1_1CheckedItem.html</filename>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>af7153a2215fc5b650a14e6f0e9355c24</anchor>
      <arglist>(bool initialize=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a72f4a8987431c3b461c2a21ea42a46de</anchor>
      <arglist>(const Matrix6 &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7321df3bd6b424ab54f940f3473beaa4</anchor>
      <arglist>(const CheckedItem &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a0cce79029c1cc90f5de556c678b9e65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CheckedItem &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a60857f01aeec2e0a9ae78a864f386515</anchor>
      <arglist>(const CheckedItem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix6 &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad9745c08f24174d1778c17b9a0571bc0</anchor>
      <arglist>(const Matrix6 &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Matrix6</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a5bce8364ab5313411bb365b58272facb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Matrix6 &amp;</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>af359019731aae1de7f2f75ea2a638d39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6</type>
      <name>chckitm_getValue</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7caf729949a22fd433331f319afd6865</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6 &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a1c21e12526f61687287565673359b050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix6 &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>aa8061e9072a022e11dd9bc3ebbc42507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad5c080e32c963db9a85e437a34b573a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a4fa842cac87229eb793137ed2e8bc43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a37c50a4f2e4ff48a930ba2fc1fc8ab35</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>Matrix6 &amp;</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad24a7416be304c90706ab83d4a93a009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssertMessage</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ae6a4661ff12e5e64490ed28e1c49a30c</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExceptionPtr</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>abb85bf0c1c6431ce4715644d765b3452</anchor>
      <arglist>(std::exception *e)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; bool, detail::defaultTrue, do_check_ &gt;</type>
      <name>IsSet</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a1d1cb05f76bebc68d8703b39eb62051e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; const char *, detail::defaultErrorMSG, do_assert_ &gt;</type>
      <name>AssertMsg</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7bacb9583ec80cec7b1754706047d116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; const std::exception *, detail::defaultExceptionAddr, do_exception_ &gt;</type>
      <name>ExceptionPtr</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a0d60a9634b6f4b1f6c0ece9aed55535e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>chckitm_check_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a68fd02e1bd5cb800316014f75619ebcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IsSet</type>
      <name>isSet_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ac155961f6f9dc3fd3a37603fae7ad386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AssertMsg</type>
      <name>assertMsg_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a8e45084f120d6f782aec4929e93a4844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExceptionPtr</type>
      <name>exceptionPtr_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a4bc1982ecd9ce069a304eabc8e5b6a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix6</type>
      <name>v_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>abda5712a0eadc461a7475bed36eaa8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_check_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a873f1d6d12f25223ce80b9cb68bc17bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_assert_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>aa1290ff1e7ac6a25c5c6faabe3e96f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_exception_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a9f6d3c18eaefede4c15fbde61e12fc3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedItem&lt; Quaternion, false, false, true, true &gt;</name>
    <filename>classstateObservation_1_1CheckedItem.html</filename>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>af7153a2215fc5b650a14e6f0e9355c24</anchor>
      <arglist>(bool initialize=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a72f4a8987431c3b461c2a21ea42a46de</anchor>
      <arglist>(const Quaternion &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7321df3bd6b424ab54f940f3473beaa4</anchor>
      <arglist>(const CheckedItem &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a0cce79029c1cc90f5de556c678b9e65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CheckedItem &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a60857f01aeec2e0a9ae78a864f386515</anchor>
      <arglist>(const CheckedItem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad9745c08f24174d1778c17b9a0571bc0</anchor>
      <arglist>(const Quaternion &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Quaternion</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a5bce8364ab5313411bb365b58272facb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Quaternion &amp;</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>af359019731aae1de7f2f75ea2a638d39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>chckitm_getValue</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7caf729949a22fd433331f319afd6865</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a1c21e12526f61687287565673359b050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Quaternion &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>aa8061e9072a022e11dd9bc3ebbc42507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad5c080e32c963db9a85e437a34b573a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a4fa842cac87229eb793137ed2e8bc43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a37c50a4f2e4ff48a930ba2fc1fc8ab35</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion &amp;</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad24a7416be304c90706ab83d4a93a009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssertMessage</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ae6a4661ff12e5e64490ed28e1c49a30c</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExceptionPtr</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>abb85bf0c1c6431ce4715644d765b3452</anchor>
      <arglist>(std::exception *e)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; bool, detail::defaultTrue, do_check_ &gt;</type>
      <name>IsSet</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a1d1cb05f76bebc68d8703b39eb62051e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; const char *, detail::defaultErrorMSG, do_assert_ &gt;</type>
      <name>AssertMsg</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7bacb9583ec80cec7b1754706047d116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; const std::exception *, detail::defaultExceptionAddr, do_exception_ &gt;</type>
      <name>ExceptionPtr</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a0d60a9634b6f4b1f6c0ece9aed55535e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>chckitm_check_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a68fd02e1bd5cb800316014f75619ebcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IsSet</type>
      <name>isSet_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ac155961f6f9dc3fd3a37603fae7ad386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AssertMsg</type>
      <name>assertMsg_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a8e45084f120d6f782aec4929e93a4844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExceptionPtr</type>
      <name>exceptionPtr_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a4bc1982ecd9ce069a304eabc8e5b6a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Quaternion</type>
      <name>v_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>abda5712a0eadc461a7475bed36eaa8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_check_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a873f1d6d12f25223ce80b9cb68bc17bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_assert_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>aa1290ff1e7ac6a25c5c6faabe3e96f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_exception_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a9f6d3c18eaefede4c15fbde61e12fc3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedItem&lt; Vector3, false, false, true, true &gt;</name>
    <filename>classstateObservation_1_1CheckedItem.html</filename>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>af7153a2215fc5b650a14e6f0e9355c24</anchor>
      <arglist>(bool initialize=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a72f4a8987431c3b461c2a21ea42a46de</anchor>
      <arglist>(const Vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7321df3bd6b424ab54f940f3473beaa4</anchor>
      <arglist>(const CheckedItem &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CheckedItem</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a0cce79029c1cc90f5de556c678b9e65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CheckedItem &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a60857f01aeec2e0a9ae78a864f386515</anchor>
      <arglist>(const CheckedItem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3 &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad9745c08f24174d1778c17b9a0571bc0</anchor>
      <arglist>(const Vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Vector3</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a5bce8364ab5313411bb365b58272facb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Vector3 &amp;</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>af359019731aae1de7f2f75ea2a638d39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>chckitm_getValue</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7caf729949a22fd433331f319afd6865</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3 &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a1c21e12526f61687287565673359b050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>aa8061e9072a022e11dd9bc3ebbc42507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad5c080e32c963db9a85e437a34b573a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a4fa842cac87229eb793137ed2e8bc43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a37c50a4f2e4ff48a930ba2fc1fc8ab35</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>Vector3 &amp;</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ad24a7416be304c90706ab83d4a93a009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssertMessage</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ae6a4661ff12e5e64490ed28e1c49a30c</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExceptionPtr</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>abb85bf0c1c6431ce4715644d765b3452</anchor>
      <arglist>(std::exception *e)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; bool, detail::defaultTrue, do_check_ &gt;</type>
      <name>IsSet</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a1d1cb05f76bebc68d8703b39eb62051e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; const char *, detail::defaultErrorMSG, do_assert_ &gt;</type>
      <name>AssertMsg</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a7bacb9583ec80cec7b1754706047d116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DebugItem&lt; const std::exception *, detail::defaultExceptionAddr, do_exception_ &gt;</type>
      <name>ExceptionPtr</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a0d60a9634b6f4b1f6c0ece9aed55535e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>chckitm_check_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a68fd02e1bd5cb800316014f75619ebcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IsSet</type>
      <name>isSet_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>ac155961f6f9dc3fd3a37603fae7ad386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AssertMsg</type>
      <name>assertMsg_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a8e45084f120d6f782aec4929e93a4844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExceptionPtr</type>
      <name>exceptionPtr_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a4bc1982ecd9ce069a304eabc8e5b6a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>v_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>abda5712a0eadc461a7475bed36eaa8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_check_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a873f1d6d12f25223ce80b9cb68bc17bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_assert_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>aa1290ff1e7ac6a25c5c6faabe3e96f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>do_exception_</name>
      <anchorfile>classstateObservation_1_1CheckedItem.html</anchorfile>
      <anchor>a9f6d3c18eaefede4c15fbde61e12fc3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::hrp2::contact</name>
    <filename>structstateObservation_1_1hrp2_1_1contact.html</filename>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>nbMax</name>
      <anchorfile>structstateObservation_1_1hrp2_1_1contact.html</anchorfile>
      <anchor>a5ba717f9e2dc4bc181b76fc62a01bf6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>nbModeledMax</name>
      <anchorfile>structstateObservation_1_1hrp2_1_1contact.html</anchorfile>
      <anchor>a19b7ca7aafe83ae0413c4872e7f9b03e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>lf</name>
      <anchorfile>structstateObservation_1_1hrp2_1_1contact.html</anchorfile>
      <anchor>a396235a98b97e548dc2fb6507c980128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>rf</name>
      <anchorfile>structstateObservation_1_1hrp2_1_1contact.html</anchorfile>
      <anchor>a4f2b798ad3f03b8a8e95ec7c20c6ed7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>lh</name>
      <anchorfile>structstateObservation_1_1hrp2_1_1contact.html</anchorfile>
      <anchor>a86428ce394b977f7e656d8ee72043c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>rh</name>
      <anchorfile>structstateObservation_1_1hrp2_1_1contact.html</anchorfile>
      <anchor>aa2bb60c59dfbee7d16d1abee27ac4351</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::KineticsObserver::Contact</name>
    <filename>structstateObservation_1_1KineticsObserver_1_1Contact.html</filename>
    <base>stateObservation::KineticsObserver::Sensor</base>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>a9c18c4cfc48bc990bdd5608f069c0eee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Contact</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>a7792f0fbaf3abfc253dce260ea5d0b6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Kinematics</type>
      <name>absPose</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>a5d383e9826611b5fa748c341147ef24f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector6</type>
      <name>wrench</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>a3b4d6c5f1c473441e80c8a7edf5e8f2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CheckedMatrix6</type>
      <name>sensorCovMatrix</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>ac7b3af83b0e60598bee5109e9deabf04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>linearStiffness</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>a9d779ee20c79062aa9ac7ddac217d0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>linearDamping</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>a8928a129309d428bc67b32255bad0b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>angularStiffness</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>a7546a25f2ff48ab1976d8acfb6082194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>angularDamping</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>ab89fa089862e60fc75887a215fb22747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>abd9db9a6d0f8d6a4eb50223fc4d151a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>withRealSensor</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>a2d8e3e9cb3cd1a096eda47029d494bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stateIndex</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>a8eafd28bd101e4ee6f275871002a7499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stateIndexTangent</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>afa3d3565952ab3938de9a019dd2419c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Kinematics</type>
      <name>localKine</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>ab7d0c212082e31d595d1d94139a1f553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Kinematics::Flags::Byte</type>
      <name>localKineFlags</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Contact.html</anchorfile>
      <anchor>a1beb03662b412f309972cb8ebc6a773e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::contactModel</name>
    <filename>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1contactModel.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>elasticContact</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1contactModel.html</anchorfile>
      <anchor>a5dfb49b2782f2d70c4c65d74f8f5aad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>pendulum</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1contactModel.html</anchorfile>
      <anchor>a8c009f69a491b028dd125a7d96f3f8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>none</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1contactModel.html</anchorfile>
      <anchor>a45f8a0fd691206924e20ebb3d3da60fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::flexibilityEstimation::ModelBaseEKFFlexEstimatorIMU::contactModel</name>
    <filename>structstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU_1_1contactModel.html</filename>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>elasticContact</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU_1_1contactModel.html</anchorfile>
      <anchor>afe20787361952c4911f5fbdfd3d21371</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>pendulum</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU_1_1contactModel.html</anchorfile>
      <anchor>a9b01125197905c61663d43ec0c0ca803</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::DebugItem</name>
    <filename>classstateObservation_1_1DebugItem.html</filename>
    <templarg>T</templarg>
    <templarg>defaultValue</templarg>
    <templarg>debug</templarg>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a7970f5cbd4c2875ceb75b7ac25b25554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>ac60c720e38bc703afb86cb41461c1240</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a30df311dba6d2912a326e1e61eb695d0</anchor>
      <arglist>(T v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a7f4d6c3f25ed667cb9b98c3d2e45e6dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a9102f9d3880b3b49c484eecca1f54ed6</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>ac6722e1ea8771991c1b8647867f41977</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DebugItem&lt; bool, detail::defaultTrue, !false||isDebug &gt;</name>
    <filename>classstateObservation_1_1DebugItem.html</filename>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a7970f5cbd4c2875ceb75b7ac25b25554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>ac60c720e38bc703afb86cb41461c1240</anchor>
      <arglist>(const bool &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a30df311dba6d2912a326e1e61eb695d0</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a7f4d6c3f25ed667cb9b98c3d2e45e6dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a9102f9d3880b3b49c484eecca1f54ed6</anchor>
      <arglist>(const bool &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>ac6722e1ea8771991c1b8647867f41977</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DebugItem&lt; bool, detail::defaultTrue, !lazy||isDebug &gt;</name>
    <filename>classstateObservation_1_1DebugItem.html</filename>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a7970f5cbd4c2875ceb75b7ac25b25554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>ac60c720e38bc703afb86cb41461c1240</anchor>
      <arglist>(const bool &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a30df311dba6d2912a326e1e61eb695d0</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a7f4d6c3f25ed667cb9b98c3d2e45e6dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a9102f9d3880b3b49c484eecca1f54ed6</anchor>
      <arglist>(const bool &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>ac6722e1ea8771991c1b8647867f41977</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DebugItem&lt; bool, detail::defaultTrue, do_check_ &gt;</name>
    <filename>classstateObservation_1_1DebugItem.html</filename>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a7970f5cbd4c2875ceb75b7ac25b25554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>ac60c720e38bc703afb86cb41461c1240</anchor>
      <arglist>(const bool &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a30df311dba6d2912a326e1e61eb695d0</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a7f4d6c3f25ed667cb9b98c3d2e45e6dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a9102f9d3880b3b49c484eecca1f54ed6</anchor>
      <arglist>(const bool &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>ac6722e1ea8771991c1b8647867f41977</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DebugItem&lt; const char *, detail::defaultErrorMSG, do_assert_ &gt;</name>
    <filename>classstateObservation_1_1DebugItem.html</filename>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a7970f5cbd4c2875ceb75b7ac25b25554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>ac60c720e38bc703afb86cb41461c1240</anchor>
      <arglist>(const const char * &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const char * &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a30df311dba6d2912a326e1e61eb695d0</anchor>
      <arglist>(const char * v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a7f4d6c3f25ed667cb9b98c3d2e45e6dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a9102f9d3880b3b49c484eecca1f54ed6</anchor>
      <arglist>(const const char * &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>ac6722e1ea8771991c1b8647867f41977</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DebugItem&lt; const std::exception *, detail::defaultExceptionAddr, do_exception_ &gt;</name>
    <filename>classstateObservation_1_1DebugItem.html</filename>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a7970f5cbd4c2875ceb75b7ac25b25554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>ac60c720e38bc703afb86cb41461c1240</anchor>
      <arglist>(const const std::exception * &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const std::exception * &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a30df311dba6d2912a326e1e61eb695d0</anchor>
      <arglist>(const std::exception * v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const std::exception *</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a7f4d6c3f25ed667cb9b98c3d2e45e6dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::exception *</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>a9102f9d3880b3b49c484eecca1f54ed6</anchor>
      <arglist>(const const std::exception * &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const std::exception *</type>
      <name>get</name>
      <anchorfile>classstateObservation_1_1DebugItem.html</anchorfile>
      <anchor>ac6722e1ea8771991c1b8647867f41977</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::DebugItem&lt; T, defaultValue, false &gt;</name>
    <filename>classstateObservation_1_1DebugItem_3_01T_00_01defaultValue_00_01false_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem_3_01T_00_01defaultValue_00_01false_01_4.html</anchorfile>
      <anchor>ad151eca97e71f649eb640c534d36ef80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DebugItem</name>
      <anchorfile>classstateObservation_1_1DebugItem_3_01T_00_01defaultValue_00_01false_01_4.html</anchorfile>
      <anchor>aed93d1779583def2cde25d0c2a9b7477</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1DebugItem_3_01T_00_01defaultValue_00_01false_01_4.html</anchorfile>
      <anchor>ae164df524d78783c243feb2a4628992b</anchor>
      <arglist>(T v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>classstateObservation_1_1DebugItem_3_01T_00_01defaultValue_00_01false_01_4.html</anchorfile>
      <anchor>a6de162b1af6f8ebd90873a9f6f69ee00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1DebugItem_3_01T_00_01defaultValue_00_01false_01_4.html</anchorfile>
      <anchor>abc0b106a0a35e88ba426d9fa19e7e097</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>classstateObservation_1_1DebugItem_3_01T_00_01defaultValue_00_01false_01_4.html</anchorfile>
      <anchor>a2736ce52ccd3b4511699df238fd1063d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::detail::DebugItemDefaultError</name>
    <filename>classstateObservation_1_1detail_1_1DebugItemDefaultError.html</filename>
    <templarg>i</templarg>
    <templarg>dummy</templarg>
  </compound>
  <compound kind="class">
    <name>stateObservation::detail::DebugItemDefaultError&lt; exception, dummy &gt;</name>
    <filename>classstateObservation_1_1detail_1_1DebugItemDefaultError_3_01exception_00_01dummy_01_4.html</filename>
    <templarg>dummy</templarg>
    <member kind="variable" static="yes">
      <type>static const std::runtime_error</type>
      <name>v</name>
      <anchorfile>classstateObservation_1_1detail_1_1DebugItemDefaultError_3_01exception_00_01dummy_01_4.html</anchorfile>
      <anchor>a79f55402adedc6c0326b80e97034eb60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::detail::DebugItemDefaultError&lt; exceptionAddr, dummy &gt;</name>
    <filename>classstateObservation_1_1detail_1_1DebugItemDefaultError_3_01exceptionAddr_00_01dummy_01_4.html</filename>
    <templarg>dummy</templarg>
    <member kind="variable" static="yes">
      <type>static const std::runtime_error *</type>
      <name>v</name>
      <anchorfile>classstateObservation_1_1detail_1_1DebugItemDefaultError_3_01exceptionAddr_00_01dummy_01_4.html</anchorfile>
      <anchor>a4abf210889794f011f83fb13ae97f665</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::detail::DebugItemDefaultError&lt; message, dummy &gt;</name>
    <filename>classstateObservation_1_1detail_1_1DebugItemDefaultError_3_01message_00_01dummy_01_4.html</filename>
    <templarg>dummy</templarg>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>v</name>
      <anchorfile>classstateObservation_1_1detail_1_1DebugItemDefaultError_3_01message_00_01dummy_01_4.html</anchorfile>
      <anchor>a4d32e9e01e1060e7b688eb809721ac66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::DebugItemDefaultValue</name>
    <filename>classstateObservation_1_1DebugItemDefaultValue.html</filename>
    <templarg></templarg>
    <templarg>defaultValue</templarg>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>v</name>
      <anchorfile>classstateObservation_1_1DebugItemDefaultValue.html</anchorfile>
      <anchor>a2140d65889cda15227ae2b5ee3822ee7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::DynamicalSystemFunctorBase</name>
    <filename>classstateObservation_1_1DynamicalSystemFunctorBase.html</filename>
    <member kind="function">
      <type></type>
      <name>DynamicalSystemFunctorBase</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemFunctorBase.html</anchorfile>
      <anchor>a9f033aaf152b4d2746e3b22a76957e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DynamicalSystemFunctorBase</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemFunctorBase.html</anchorfile>
      <anchor>a008cf4e07016dcf1996988ce35765972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>stateDynamics</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemFunctorBase.html</anchorfile>
      <anchor>a2aec1446623d5e4a48ede51a42613336</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u, TimeIndex k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>measureDynamics</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemFunctorBase.html</anchorfile>
      <anchor>a93b0edd8994ad074f16164ac94e00095</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u, TimeIndex k)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemFunctorBase.html</anchorfile>
      <anchor>af92f07e4fcf2fba00a5c191c17a834e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemFunctorBase.html</anchorfile>
      <anchor>a52ba3d885f06f68288e9fb34bb651426</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemFunctorBase.html</anchorfile>
      <anchor>a5b0d05b8032d2891a6b79dd5ae2fb233</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemFunctorBase.html</anchorfile>
      <anchor>af01299ad692259cdb65f9e8b8c4d6e54</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkStateVector</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemFunctorBase.html</anchorfile>
      <anchor>a19cacc00d10142b38482df979978edff</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkInputvector</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemFunctorBase.html</anchorfile>
      <anchor>a1ad0bae34da167558bfbe9eb6a62d2e7</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assertStateVector_</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemFunctorBase.html</anchorfile>
      <anchor>a0c70dc0e02a1ac622dedb9b7e3ea46eb</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assertInputVector_</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemFunctorBase.html</anchorfile>
      <anchor>a4962de04466ce7c01607616bcf858f23</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::DynamicalSystemSimulator</name>
    <filename>classstateObservation_1_1DynamicalSystemSimulator.html</filename>
    <member kind="function">
      <type></type>
      <name>DynamicalSystemSimulator</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>af2d94cba47905198e9ad80ae9ffce50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DynamicalSystemSimulator</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a523f367fc643a77306e8e14f5aead7ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDynamicsFunctor</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a35c8cd214fbe7b8ec154a6a504a85a4d</anchor>
      <arglist>(DynamicalSystemFunctorBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a83691c2bfed7d9b03926c5e7b7cf11d0</anchor>
      <arglist>(const Vector &amp;x, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInput</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a233f7f367e732ca2bf4c5116b725b4c6</anchor>
      <arglist>(const Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getCurrentState</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a7467c8cd1fe948d5d9ce83703b9961c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeIndex</type>
      <name>getCurrentTime</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a3994a4f074f42be29653542215998866</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>simulateDynamics</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>ab334cf719db47d51c66176d01205a9ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>simulateDynamicsTo</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a900a56038c3f38a105edffadb8b3e99e</anchor>
      <arglist>(TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getInput</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>ab96c6644dd5d61b7c8eaeeab69ab6ea7</anchor>
      <arglist>(TimeIndex k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getMeasurement</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a9462965bc0e49e353f1b02ca32c1a48d</anchor>
      <arglist>(TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getState</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a6ce5bd2774430ceac2033b32153c6382</anchor>
      <arglist>(TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IndexedVectorArray</type>
      <name>getMeasurementArray</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>acacea6d2b1631b58703115b0719f9c6d</anchor>
      <arglist>(TimeIndex startingTime, TimeSize duration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IndexedVectorArray</type>
      <name>getStateArray</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>aa8f84f13e6ff7e8d47441f3f091c0146</anchor>
      <arglist>(TimeIndex startingTime, TimeSize duration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetDynamics</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a47174f744df1637216f5d41a53b1295c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetSimulator</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a5af9b36290984d185315c9259cdc8b81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DynamicalSystemFunctorBase *</type>
      <name>f_</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a9ce18e8fdd4ce0bfd8fd6eb42acadeab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedVectorArray</type>
      <name>x_</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a888c90b78727e68970306c9c20bed4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedVectorArray</type>
      <name>y_</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a7112fbce947baf5891a9682b1f132770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; TimeIndex, Vector &gt;</type>
      <name>u_</name>
      <anchorfile>classstateObservation_1_1DynamicalSystemSimulator.html</anchorfile>
      <anchor>a94f9a860c47ac02fe6366fa8f45a808b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::EigenType</name>
    <filename>structstateObservation_1_1EigenType.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>stateObservation::flexibilityEstimation::EKFFlexibilityEstimatorBase</name>
    <filename>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</filename>
    <base>stateObservation::flexibilityEstimation::FlexibilityEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>EKFFlexibilityEstimatorBase</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a57bd701cf7b1e71380fe0a91e1fb2b91</anchor>
      <arglist>(Index stateSize, Index measurementSize, Index inputSize, const Vector &amp;dx=Vector::Zero(0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EKFFlexibilityEstimatorBase</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a6d51a6b07fe1d2154dd6424016a923fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFlexibilityGuess</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a25f59bf9ae780f40e7c00540bff2bce5</anchor>
      <arglist>(const Matrix &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFlexibilityCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>ae69973109b5ac7976be43beb14744edf</anchor>
      <arglist>(const Matrix &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getFlexibilityCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a9cbc8082ee870d2b35176177800b1272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProcessNoiseCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>aa39a732073841dc8b7ed868a17d1b671</anchor>
      <arglist>(const Matrix &amp;Q)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementNoiseCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a20b53dfbc4f9688155d5633d696ec2c8</anchor>
      <arglist>(const Matrix &amp;R)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getProcessNoiseCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a3dfbc349f2428b6f32b4c8d5bd1a6fc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getMeasurementNoiseCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>af501021b695aff014743018ec65ed710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurement</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>af29afe44ee2bbed391e5eb90136dda8d</anchor>
      <arglist>(const Vector &amp;y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getMeasurement</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a1a058ef95644b1ddad79c4df5d1a5e66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInput</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a75ecd41d3950f5f453d3011314dea6ee</anchor>
      <arglist>(const Vector &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementInput</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>aaaef07360e95fffcf3750e9cab460f2d</anchor>
      <arglist>(const Vector &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getInput</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>aa4b48fb23d9087f2b6c06400f0d2e248</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getMeasurementInput</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>ab79522140d21c90fed967c1e8c299768</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector &amp;</type>
      <name>getFlexibilityVector</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a899f8aa4f2e3920917e0d8b8bd8135c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix4</type>
      <name>getFlexibility</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a0d2194dee95a78daba44e7f4e099321a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const stateObservation::ExtendedKalmanFilter &amp;</type>
      <name>getEKF</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>ae362fc399e1694a08ecd900da50e4f01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::ExtendedKalmanFilter &amp;</type>
      <name>getEKF</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a1cde435bab52638677406be2d4cc1226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a0f7c91dd885f81fb1f10fd5c42cbf784</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>af68333c27cbe06054113df0b8d47781a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a9cbbf09a38d5c2a1b7d0d5b984de60fc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getSimulatedMeasurement</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>ad521aa40dae9934b899d1fc3ce5bbd45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetCovarianceMatrices</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a84f16cfd61edc2003055ce19437cc845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getInnovation</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a7e475b570f045b4de5e5b83e0143408f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getPredictedMeasurement</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a83889b6ffe872b475e1bd4cccaee3bf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getPrediction</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>acee7618c00d087323bc0f20f49ab7dd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getLastPredictedMeasurement</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a73cb887bdae8c48913a10b047f208779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getLastPrediction</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>aeeb5151175838a2a83ba306b1bbcf048</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setJacobians</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a2377236b98e6065314f5174a18d5057f</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;C)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>useFiniteDifferencesJacobians</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>aaf694318f3349048084c1afbdc62b43e</anchor>
      <arglist>(Vector dx)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stateObservation::ExtendedKalmanFilter</type>
      <name>ekf_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a1ef5a4511a1e001e4d02908725257911</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finiteDifferencesJacobians_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>aaa63c4e9128aeb3428f66d7735cd267c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>dx_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a505abc5a6738b71f2656bc08f64069f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>lastX_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a3c19e20939c70419e62d0cf7ae29c0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeIndex</type>
      <name>k_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1EKFFlexibilityEstimatorBase.html</anchorfile>
      <anchor>a43ddaf15a021ff89fe5267a77ec55164</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::ExtendedKalmanFilter</name>
    <filename>classstateObservation_1_1ExtendedKalmanFilter.html</filename>
    <base>stateObservation::KalmanFilterBase</base>
    <class kind="struct">stateObservation::ExtendedKalmanFilter::Optimization</class>
    <member kind="function">
      <type></type>
      <name>ExtendedKalmanFilter</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>aac679ffd2f9e516c7716f76e28c01a46</anchor>
      <arglist>(Index n, Index m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExtendedKalmanFilter</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>ae63c441510987a99a6e99d64813e038e</anchor>
      <arglist>(Index n, Index m, Index p, bool directInputOutputFeedthrough=true, bool directInputStateProcessFeedthrough=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExtendedKalmanFilter</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>afc803721dc077bbe532969607bd2f338</anchor>
      <arglist>(Index n, Index nt, Index m, Index mt, Index p, bool directInputOutputFeedthrough, bool directInputStateProcessFeedthrough)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctor</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>a0f5669e7fde3ff8c9e7f179e8e160db4</anchor>
      <arglist>(DynamicalSystemFunctorBase *f)</arglist>
    </member>
    <member kind="function">
      <type>DynamicalSystemFunctorBase *</type>
      <name>getFunctor</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>a1207ba0708cde21d2bce3e10889306dd</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>DynamicalSystemFunctorBase *</type>
      <name>functor</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>a8991b2e5493c0ec7785890e337f2740b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearFunctor</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>aefa1da472e03447df5ee749d801f8bfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectInputOutputFeedthrough</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>afe27b5722eb6e958298224177138e005</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectInputStateFeedthrough</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>a3200d62f6b843ad513c7c9ab513ea813</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Amatrix</type>
      <name>getAMatrixFD</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>a665a3d31279160819f385d697a621ca0</anchor>
      <arglist>(const Vector &amp;dx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cmatrix</type>
      <name>getCMatrixFD</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>a15a50463af720f22a3e35adef21480ce</anchor>
      <arglist>(const Vector &amp;dx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>a6762e76a79ad08b64230c73c9873e898</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual StateVector</type>
      <name>prediction_</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>ac21e3fdf84183555c293fa3e564005be</anchor>
      <arglist>(TimeIndex k)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MeasureVector</type>
      <name>simulateSensor_</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>aa829a793bc5830cc781472bd50c6e3ab</anchor>
      <arglist>(const StateVector &amp;x, TimeIndex k)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MeasureVector</type>
      <name>predictSensor_</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>a30c87697356ddf825e5d62290883e6cd</anchor>
      <arglist>(TimeIndex k)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>directInputOutputFeedthrough_</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>ab2439e3f77febfb7c61f22ee8bb9c680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>directInputStateProcessFeedthrough_</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>a0999372f43a667f61ad0e484364b3967</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DynamicalSystemFunctorBase *</type>
      <name>f_</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>a3e23394bf083b9f960d8317d3b916274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct stateObservation::ExtendedKalmanFilter::Optimization</type>
      <name>opt</name>
      <anchorfile>classstateObservation_1_1ExtendedKalmanFilter.html</anchorfile>
      <anchor>a8a5edce0f7bf65236cbd750307a5384b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::flexibilityEstimation::FixedContactEKFFlexEstimatorIMU</name>
    <filename>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</filename>
    <base>stateObservation::flexibilityEstimation::EKFFlexibilityEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>FixedContactEKFFlexEstimatorIMU</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a4afcfbfcfba8df718766ac694815f2a5</anchor>
      <arglist>(double dt=0.005)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FixedContactEKFFlexEstimatorIMU</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a14b958c9ff0ab2b61cac6b051954af2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactsNumber</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a9d949d01e2eee892f3a787b136389e3a</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactPosition</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>af65d840f020f4a59d4d727d1d677f77e</anchor>
      <arglist>(unsigned i, Vector3 position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurement</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ad2a91671f1456f75e2b86123760b78d3</anchor>
      <arglist>(const Vector &amp;y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVirtualMeasurementsCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ae6dbc92dfeca44475d0f00603f3b4e8c</anchor>
      <arglist>(double c_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getVirtualMeasurementsCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a579e0c3d0d17554d17215ec0993468da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProcessNoiseCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a747572899f9a9f127b413b4e618e601a</anchor>
      <arglist>(const Matrix &amp;Q)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementNoiseCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a812404fd46472be9e1be5ca73b9bc044</anchor>
      <arglist>(const Matrix &amp;R)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getProcessNoiseCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a3087638102ed8611b1eddd15b9002ec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getMeasurementNoiseCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a18a4d3557b23f96ae076edc022a6c38c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFlexibilityGuess</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>af323740e58c1b1c5c9dff80f2b11ec04</anchor>
      <arglist>(const Matrix &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix4</type>
      <name>getFlexibility</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a98cb219cd2a2db079d1310c06cb15218</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector &amp;</type>
      <name>getFlexibilityVector</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a2de82e1db3a9dcb5f52f4e241258271b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ac349a55e96b61d9043fd96e0411588c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ad695568581d813a0e5dd36ba5ea2637b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>af8c85e9541eed126a1af033fae9fceff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSamplingPeriod</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a3cb6fe2068a33b912dd663a55b7bf552</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetCovarianceMatrices</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a012fac4f9f1e1d351791166f881ea66b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>kine::indexes&lt; kine::rotationVector &gt;</type>
      <name>indexes</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a993078c6d576c9622bb6ae04c4dc97c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateCovarianceMatrix_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a57f7c965ca495e31c2c893feec0488cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IMUFixedContactDynamicalSystem</type>
      <name>functor_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ae2258e19f89c1300508ea88869d59d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>virtualMeasurementCovariance_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ae741e9a3615e231566a5f4bb58bc1513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>R_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a820fd72679da9ccb751ff7b8f81669b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>Q_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a30ce1ce237b15135a635a8fbaa246f99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a4e9f70f606c88c6297c23c9cd0704350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>stateSizeConst_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a4f8a008115fda1f35f03023a55e47cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>measurementSizeConst_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ade87e0ddf882f108a9ff1224b4851ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>inputSizeConst_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FixedContactEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a36cf1b47a2ee4cee3893267a92d2de29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::FixOrDynMatrixTools</name>
    <filename>classstateObservation_1_1FixOrDynMatrixTools.html</filename>
    <templarg></templarg>
    <base>FixOrDynMatrixToolsBySize&lt; MatrixType&lt; MatrixT &gt;::type::RowsAtCompileTime, MatrixType&lt; MatrixT &gt;::type::ColsAtCompileTime &gt;</base>
  </compound>
  <compound kind="class">
    <name>stateObservation::FixOrDynMatrixToolsBySize</name>
    <filename>classstateObservation_1_1FixOrDynMatrixToolsBySize.html</filename>
    <templarg>compileTimeRows</templarg>
    <templarg>compileTimeCols</templarg>
    <member kind="function" static="yes">
      <type>static const Eigen::CwiseNullaryOp&lt; CustomNullaryOp, typename Eigen::Matrix&lt; double, compileTimeRows, compileTimeCols &gt; &gt;</type>
      <name>nullaryExp</name>
      <anchorfile>classstateObservation_1_1FixOrDynMatrixToolsBySize.html</anchorfile>
      <anchor>aa1be0d158a054998e250905619e0ffc4</anchor>
      <arglist>(const CustomNullaryOp &amp;func, Index rows=compileTimeRows, Index cols=compileTimeCols)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::FixOrDynMatrixToolsBySize&lt; compileTimeRows, -1 &gt;</name>
    <filename>classstateObservation_1_1FixOrDynMatrixToolsBySize_3_01compileTimeRows_00_01-1_01_4.html</filename>
    <templarg>compileTimeRows</templarg>
    <member kind="function" static="yes">
      <type>static const Eigen::CwiseNullaryOp&lt; CustomNullaryOp, typename Eigen::Matrix&lt; double, compileTimeRows, -1 &gt; &gt;</type>
      <name>nullaryExp</name>
      <anchorfile>classstateObservation_1_1FixOrDynMatrixToolsBySize_3_01compileTimeRows_00_01-1_01_4.html</anchorfile>
      <anchor>aa6a5476b07b3569302c093ab50897a25</anchor>
      <arglist>(const CustomNullaryOp &amp;func, Index rows=compileTimeRows, Index cols=-1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FixOrDynMatrixToolsBySize&lt; MatrixType&lt; MatrixT &gt;::type::RowsAtCompileTime, MatrixType&lt; MatrixT &gt;::type::ColsAtCompileTime &gt;</name>
    <filename>classstateObservation_1_1FixOrDynMatrixToolsBySize.html</filename>
    <member kind="function" static="yes">
      <type>static const Eigen::CwiseNullaryOp&lt; CustomNullaryOp, typename Eigen::Matrix&lt; double, compileTimeRows, compileTimeCols &gt; &gt;</type>
      <name>nullaryExp</name>
      <anchorfile>classstateObservation_1_1FixOrDynMatrixToolsBySize.html</anchorfile>
      <anchor>aa1be0d158a054998e250905619e0ffc4</anchor>
      <arglist>(const CustomNullaryOp &amp;func, Index rows=compileTimeRows, Index cols=compileTimeCols)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::FixOrDynMatrixToolsBySize&lt;-1, -1 &gt;</name>
    <filename>classstateObservation_1_1FixOrDynMatrixToolsBySize_3-1_00_01-1_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const Eigen::CwiseNullaryOp&lt; CustomNullaryOp, typename Eigen::Matrix&lt; double, -1, -1 &gt; &gt;</type>
      <name>nullaryExp</name>
      <anchorfile>classstateObservation_1_1FixOrDynMatrixToolsBySize_3-1_00_01-1_01_4.html</anchorfile>
      <anchor>a8ce119acbaa07774d20d1876f8e94437</anchor>
      <arglist>(const CustomNullaryOp &amp;func, Index rows=-1, Index cols=-1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::FixOrDynMatrixToolsBySize&lt;-1, compileTimeCols &gt;</name>
    <filename>classstateObservation_1_1FixOrDynMatrixToolsBySize_3-1_00_01compileTimeCols_01_4.html</filename>
    <templarg>compileTimeCols</templarg>
    <member kind="function" static="yes">
      <type>static const Eigen::CwiseNullaryOp&lt; CustomNullaryOp, typename Eigen::Matrix&lt; double, -1, compileTimeCols &gt; &gt;</type>
      <name>nullaryExp</name>
      <anchorfile>classstateObservation_1_1FixOrDynMatrixToolsBySize_3-1_00_01compileTimeCols_01_4.html</anchorfile>
      <anchor>adc091e6af57b2fd620c508e7461c8b5d</anchor>
      <arglist>(const CustomNullaryOp &amp;func, Index rows=-1, Index cols=compileTimeCols)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::kine::Kinematics::Flags</name>
    <filename>structstateObservation_1_1kine_1_1Kinematics_1_1Flags.html</filename>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>Byte</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics_1_1Flags.html</anchorfile>
      <anchor>ac72fe189696d37e0d9c52651a24fc8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Byte</type>
      <name>position</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics_1_1Flags.html</anchorfile>
      <anchor>ae90f0816a290c6219be3ba35a0d2bef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Byte</type>
      <name>orientation</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics_1_1Flags.html</anchorfile>
      <anchor>a714ef29e1fdbf9bdeba284fd14bdf348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Byte</type>
      <name>linVel</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics_1_1Flags.html</anchorfile>
      <anchor>a1c3621075e74f491ee5781c306abe033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Byte</type>
      <name>angVel</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics_1_1Flags.html</anchorfile>
      <anchor>a3621713f8d8752828e73337be148df55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Byte</type>
      <name>linAcc</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics_1_1Flags.html</anchorfile>
      <anchor>acbe01fd94aefe689e83fb14d44ce3363</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Byte</type>
      <name>angAcc</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics_1_1Flags.html</anchorfile>
      <anchor>ac2df8b3ef79830843136172b6ab4ebf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Byte</type>
      <name>all</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics_1_1Flags.html</anchorfile>
      <anchor>ad73a2552a558da86e8cd4c548b9613f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::flexibilityEstimation::FlexibilityEstimatorBase</name>
    <filename>classstateObservation_1_1flexibilityEstimation_1_1FlexibilityEstimatorBase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FlexibilityEstimatorBase</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FlexibilityEstimatorBase.html</anchorfile>
      <anchor>acd34ef62ef73f7ec393e97b09b294e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlexibilityEstimatorBase</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FlexibilityEstimatorBase.html</anchorfile>
      <anchor>a1fb88203bb522c4a9a3d325888bd0966</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFlexibilityGuess</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FlexibilityEstimatorBase.html</anchorfile>
      <anchor>acac52cd1d74997c2599c934ea67ce3cb</anchor>
      <arglist>(const Matrix &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMeasurement</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FlexibilityEstimatorBase.html</anchorfile>
      <anchor>adda51d74ab842c74b2eacbd46a9a2477</anchor>
      <arglist>(const Vector &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix4</type>
      <name>getFlexibility</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1FlexibilityEstimatorBase.html</anchorfile>
      <anchor>ae3b7d0c9da16a16d1772b051023b48ad</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::GaussianWhiteNoise</name>
    <filename>classstateObservation_1_1GaussianWhiteNoise.html</filename>
    <base>stateObservation::NoiseBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianWhiteNoise</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a677527078f04644ac1c9deb49c583ba5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianWhiteNoise</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>aff582053a444ac5cce0db98a1baea8c9</anchor>
      <arglist>(Index dimension)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianWhiteNoise</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>ade982d55fc275d50d6625c7475f7229e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getNoisy</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a247dab80bd18b0c214007f32a1e3a97f</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStandardDeviation</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a2675382af4f1af20cf470aa5f005aad0</anchor>
      <arglist>(const Matrix &amp;std)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCovarianceMatrix</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a7b1ce2a8f22898771166f0dddd5e020b</anchor>
      <arglist>(const Matrix &amp;cov)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBias</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a2c8e22f296306fd854f5a6ab67f597b5</anchor>
      <arglist>(const Vector &amp;bias)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDimension</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a781093d8ba196ce7adf1e7819e0882f0</anchor>
      <arglist>(Index dim_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getDimension</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>af915067034cf64ed27f3c3cf96c897be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSumFunction</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a297e8adc5ab103d78bfb921e5cb9d981</anchor>
      <arglist>(void(*sum)(const Vector &amp;stateVector, const Vector &amp;tangentVector, Vector &amp;result))</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkMatrix_</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a1b56fad4e3c50083248f807da7504a5a</anchor>
      <arglist>(const Matrix &amp;m) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkVector_</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a2b65a48ad83d82704a56e2a2a4683e60</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>dim_</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a8a5a84c4d83be8abb6508b4a9ceba4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>std_</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a528194e2fadccbfa220d5e1fce2bdbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>bias_</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a4ebf7520b205a5821cb1aab570fa0652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>noisy_</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>a9919888a8e62dadf87b4723953739e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>sum_</name>
      <anchorfile>classstateObservation_1_1GaussianWhiteNoise.html</anchorfile>
      <anchor>ad22471b517913388158aa60d63e5892e</anchor>
      <arglist>)(const Vector &amp;stateVector, const Vector &amp;tangentVector, Vector &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::KineticsObserver::IMU</name>
    <filename>structstateObservation_1_1KineticsObserver_1_1IMU.html</filename>
    <base>stateObservation::KineticsObserver::Sensor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IMU</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1IMU.html</anchorfile>
      <anchor>acd383b5c0f295e96061d747cfc93b0a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMU</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1IMU.html</anchorfile>
      <anchor>ae4e0d2ed4a768c660e4f990c57a826ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Kinematics</type>
      <name>kinematics</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1IMU.html</anchorfile>
      <anchor>a8ac5bccfd55ea973fb054fbe7d3ec984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector6</type>
      <name>acceleroGyro</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1IMU.html</anchorfile>
      <anchor>a28425de42d116a1af4ff0f667aed4a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>covMatrixAccelero</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1IMU.html</anchorfile>
      <anchor>a3803610bdc6dc0a60a446b432329c364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>covMatrixGyro</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1IMU.html</anchorfile>
      <anchor>adf8ff5ab5ef3b68f14ba88d7c7c79c5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::IMUDynamicalSystem</name>
    <filename>classstateObservation_1_1IMUDynamicalSystem.html</filename>
    <base>stateObservation::DynamicalSystemFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>IMUDynamicalSystem</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>afef992cbd1b88ae165b7c88f82de02e7</anchor>
      <arglist>(bool withGyroBias=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IMUDynamicalSystem</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>acb4a99e04eda8901e0e1ec63d3c76ec5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>stateDynamics</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a27d05b0af6a9611d9474cdda0e9abb39</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>measureDynamics</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a44e19581be0f450d614cbf435315b048</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProcessNoise</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>ab205812c74d2a92d61feb1a1af15a327</anchor>
      <arglist>(NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetProcessNoise</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a37245530148bc9b3d90f6ce5f812fcc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoiseBase *</type>
      <name>getProcessNoise</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a2bb2e1161dea7162a176caa3c1fed2da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a0f931ca93217e1421ff16e4023ded6e1</anchor>
      <arglist>(NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a81e7d46b975ac2e62431891f205b89eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoiseBase *</type>
      <name>getMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>af180a0bf1b1b3820ac1ff26c1e5f3bdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSamplingPeriod</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>ab6d35048e837b53ec3a9ace3a10d0de6</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a0aa94af578a4e77ca737eacdc1baa647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a82169c601c26fa1a56d29fe9145bbb8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>acf59951650a3535538588568c010a186</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>kine::indexes&lt; kine::rotationVector &gt;</type>
      <name>indexes</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a6acc1cc25a6d6c0fa743e1619e3454e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Quaternion</type>
      <name>computeQuaternion_</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a4daee413e9b3a37f51c3f5f3d1afa920</anchor>
      <arglist>(const Vector3 &amp;x)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AccelerometerGyrometer</type>
      <name>sensor_</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>ac80e192813615ead81dfacfc39a503e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NoiseBase *</type>
      <name>processNoise_</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a939f07b64a3b9eca1401dc731057d665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a06cf3cd18ed0352677da7783ea7f3e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3Unaligned</type>
      <name>orientationVector_</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>ac29e38aa44a26ac877a002ab02e0983c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QuaternionUnaligned</type>
      <name>quaternion_</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a7c06f3466c65beff06ccb04784737263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>statesize_</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>aa9caedac0665e63874280de99dac11f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withGyroBias_</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a01e008fbb4ef4c60d250cf0c0751601d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>stateSizeBase_</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a1b49a873995dafe38a92fca5e70908b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>inputSize_</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a6036ad24a2a8272d2677bf10584b2286</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>measurementSize_</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>aab3accee9830d683c2bb8721d5a2a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr double</type>
      <name>one_</name>
      <anchorfile>classstateObservation_1_1IMUDynamicalSystem.html</anchorfile>
      <anchor>a2a12e938759f8f64c5e62623f54c4121</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem</name>
    <filename>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</filename>
    <base>stateObservation::DynamicalSystemFunctorBase</base>
    <class kind="struct">stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::contactModel</class>
    <class kind="struct">stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::input</class>
    <class kind="struct">stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::Optimization</class>
    <class kind="struct">stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::state</class>
    <member kind="typedef">
      <type>Eigen::LLT&lt; Matrix3 &gt;</type>
      <name>LLTMatrix3</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a6b5bd1596d5123db7d8a5ad4e0affc88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMUElasticLocalFrameDynamicalSystem</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a3295497661403c9352ca12a931e6e8ce</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IMUElasticLocalFrameDynamicalSystem</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>abf191d7dee0f225f77983904d49003ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ad87739ea9db5718fcdbcb917656f4e37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeContactWrench</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a2adf2b65b5bc4331dd6ba21041f2fd4e</anchor>
      <arglist>(const Matrix3 &amp;orientation, const Vector3 &amp;position, const IndexedVectorArray &amp;contactPosV, const IndexedVectorArray &amp;contactOriV, const Vector &amp;fc, const Vector &amp;tc, const Vector3 &amp;fm, const Vector3 &amp;tm, const Vector3 &amp;addForce, const Vector3 &amp;addMoment)</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::Vector</type>
      <name>computeAccelerations</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ade5dc0095d6f2be8cb242e1d60c00433</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeAccelerations</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a2d393436c6d9a91f11026dd838de9203</anchor>
      <arglist>(const Vector3 &amp;positionCom, const Vector3 &amp;velocityCom, const Vector3 &amp;accelerationCom, const Vector3 &amp;AngMomentum, const Vector3 &amp;dotAngMomentum, const Matrix3 &amp;Inertia, const Matrix3 &amp;dotInertia, const IndexedVectorArray &amp;contactPos, const IndexedVectorArray &amp;contactOri, const Vector3 &amp;position, const Vector3 &amp;linVelocity, Vector3 &amp;linearAcceleration, const Vector3 &amp;oriVector, const Matrix3 &amp;orientation, const Vector3 &amp;angularVel, Vector3 &amp;angularAcceleration, const Vector &amp;fc, const Vector &amp;tc, const Vector3 &amp;fm, const Vector3 &amp;tm, const Vector3 &amp;addForces, const Vector3 &amp;addMoments)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::Vector</type>
      <name>stateDynamics</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a28070cbb750b534de6c514147927c80f</anchor>
      <arglist>(const stateObservation::Vector &amp;x, const stateObservation::Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::Matrix</type>
      <name>stateDynamicsJacobian</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a1012b2c102100ddc750ad022131d4223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::Matrix</type>
      <name>stateDynamicsJacobian</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a39668f909b635d13f9ed4de0bfaff3f6</anchor>
      <arglist>(const stateObservation::Vector &amp;x, const stateObservation::Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFDstep</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>af1cba223c271985dc460ab87e1c5a76f</anchor>
      <arglist>(const stateObservation::Vector &amp;dx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::Vector</type>
      <name>measureDynamics</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ab206d5f504aaaef06fca963e2640d84b</anchor>
      <arglist>(const stateObservation::Vector &amp;x, const stateObservation::Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::Matrix</type>
      <name>measureDynamicsJacobian</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a0ba8aed12fcc9395472fa5bb650a4620</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::Matrix</type>
      <name>measureDynamicsJacobian</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aed6391cd10a0d516e0c459f5262c93b9</anchor>
      <arglist>(const stateObservation::Vector &amp;x, const stateObservation::Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProcessNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a77603cb51526d5a82207896af5d6af00</anchor>
      <arglist>(stateObservation::NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetProcessNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aaed289221d4ab00cb4239eea46d09cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::NoiseBase *</type>
      <name>getProcessNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a63d9d25e7e37be1810d5c5f7cd2ab69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aff600607b47a6cc2c006d9ebfa29dc92</anchor>
      <arglist>(stateObservation::NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a072df06af434b7be28f1da54171c5472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::NoiseBase *</type>
      <name>getMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a25e0f7e1812fc31919c1b7c562bccda1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSamplingPeriod</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aae3b9851fc12b164c4b483af05e0d1a0</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a1d468161a2486db88f44f058061283a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a57e4b1a387152f4dc268807776f29a13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInputSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a72db9b513794c5a3ad80d4fea3f10c25</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ace6b4d15586044cda9fcb3c9453748c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContactsNumber</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a23069971df1d5c994dff2f0e53a9caa4</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPe</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a94445d6634e80179f44e4af6ec595c2a</anchor>
      <arglist>(stateObservation::Vector3 Pe)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getContactsNumber</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ab2cf8b61e7d76093c723dc2da8774eba</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContactModel</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a96023b9b4e7f0f755c93655b16073eae</anchor>
      <arglist>(unsigned nb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrinted</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ae3414623407c5752fb39be3f687e1063</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeElastContactForcesAndMoments</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a8ff8338f3c9cbbdef4b7af03c2193ae6</anchor>
      <arglist>(const IndexedVectorArray &amp;contactPosArray, const IndexedVectorArray &amp;contactOriArray, const IndexedVectorArray &amp;contactVelArray, const IndexedVectorArray &amp;contactAngVelArray, const Vector3 &amp;position, const Vector3 &amp;linVelocity, const Vector3 &amp;oriVector, const Matrix3 &amp;orientation, const Vector3 &amp;angVel, Vector &amp;fc, Vector &amp;tc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeElastPendulumForcesAndMoments</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>abfe1d7143b35d682e18839f6a6749e95</anchor>
      <arglist>(const IndexedVectorArray &amp;PrArray, const Vector3 &amp;position, const Vector3 &amp;linVelocity, const Vector3 &amp;oriVector, const Matrix3 &amp;orientation, const Vector3 &amp;angVel, Vector &amp;forces, Vector &amp;moments)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeForcesAndMoments</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aa336e6904bb4efe6a02e41c2c359479a</anchor>
      <arglist>(const IndexedVectorArray &amp;position1, const IndexedVectorArray &amp;position2, const IndexedVectorArray &amp;velocity1, const IndexedVectorArray &amp;velocity2, const Vector3 &amp;position, const Vector3 &amp;linVelocity, const Vector3 &amp;oriVector, const Matrix3 &amp;orientation, const Vector3 &amp;angVel, Vector &amp;fc, Vector &amp;tc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeForcesAndMoments</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a551db80ee2fd5ead92c1530c0d1be6e5</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getForcesAndMoments</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a389a30a5f8a060d441b82e863e2a07ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getForcesAndMoments</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a206ec640dc3d0ca7faceba992f980edc</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getMomentaDotFromForces</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a3f07baa588e8acf1f3f5dae500b8de9f</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getMomentaDotFromKinematics</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a82f0f5ce97e9ed83af20ef2bc93e0129</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateDynamicsEuler</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ab876cbd4f9dce72677d0ef1041aecf19</anchor>
      <arglist>(const Vector3 &amp;positionCom, const Vector3 &amp;velocityCom, const Vector3 &amp;accelerationCom, const Vector3 &amp;AngMomentum, const Vector3 &amp;dotAngMomentum, const Matrix3 &amp;Inertia, const Matrix3 &amp;dotInertia, const IndexedVectorArray &amp;contactPos, const IndexedVectorArray &amp;contactOri, Vector3 &amp;position, Vector3 &amp;linVelocity, Vector &amp;fc1, Vector3 &amp;oriVector, Vector3 &amp;angularVel, Vector &amp;fc2, const Vector3 &amp;fm, const Vector3 &amp;tm, const Vector3 &amp;addForces, const Vector3 &amp;addMoments, double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateDynamicsRK4</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aec1c97e5a875bb59a0e546fc08bbaace</anchor>
      <arglist>(const Vector3 &amp;positionCom, const Vector3 &amp;velocityCom, const Vector3 &amp;accelerationCom, const Vector3 &amp;AngMomentum, const Vector3 &amp;dotAngMomentum, const Matrix3 &amp;Inertia, const Matrix3 &amp;dotInertia, const IndexedVectorArray &amp;contactPos, const IndexedVectorArray &amp;contactOri, Vector3 &amp;position, Vector3 &amp;linVelocity, Vector &amp;fc1, Vector3 &amp;oriVector, Vector3 &amp;angularVel, Vector &amp;fc2, const Vector3 &amp;fm, const Vector3 &amp;tm, const Vector3 &amp;addForces, const Vector3 &amp;addMoments, double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWithForceMeasurements</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>afce273ba990684bdbcbd75f05853ad18</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getWithForceMeasurements</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a375ab9caf171695d15977a4e0ff9ea86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWithComBias</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ab157fa9fa8ff0f9a9f742236173a3970</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getWithComBias</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ae213fa3954291937aa85fc940660aa24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWithAbsolutePosition</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>acc2044bb4e83f433492d89a896276a3f</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getWithAbsolutePosition</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a0780d15074d0ac9903c2dcb2a661ccb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWithUnmodeledForces</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>adb08eea01104b91ce0e91fa73e0d0e32</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKfe</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ad565495dca3fccd8362cc9fce411848e</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKfv</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aeb5690e8bf46d1f9b964025e32b601da</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKte</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a87cefc5468b5c89329853de2ca4078b0</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKtv</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ae6c769adef1593ba746a2277251136df</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKfeRopes</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a92a607b386d5ccc72fd89faa2691be47</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKfvRopes</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a669853d8c943352fb033e2bc5b96f911</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKteRopes</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a3caf4bd411d4c9ec8b293a309689da96</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKtvRopes</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aecb9867eb3f124649b0a603bae76ee68</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getKfe</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a3723cc900fde0693a5784495261e31cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getKfv</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a74f36d036b6941e6c336ea5180e95565</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getKte</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aa50ede49e584ddcbbb58898046d89808</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getKtv</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a5ebbd11c992f0f02c8af6ca0176cde21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobotMass</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aa6c253f4d480dea163affed60a52512a</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRobotMass</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a3293d9e9a339bce1ca41002adc0bd766</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateMeasurementSize_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a0d84bd48bd7322a42aeca46648f1967d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix3 &amp;</type>
      <name>computeRotation_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>acf9acd1ad696139c4cb65f7a1379ae73</anchor>
      <arglist>(const Vector3 &amp;x, int i)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>printed_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ad4cd7fbc5c32aeaa40b3120f301344a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stateObservation::AccelerometerGyrometer</type>
      <name>sensor_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a3db2011d22413a353f3a5304b33cc0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stateObservation::NoiseBase *</type>
      <name>processNoise_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a19464e6e7d788d6782dc152a440776dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a5aad54bd66f8a940c35161977492a0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>robotMass_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a36134fb5c0f6d8a2f331da2bb0260834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>robotMassInv_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a24a1749be94437e4519b8dfccaaf0df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>inputSize_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a876749746d1c3017bdb3e2276141fd83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>nbContacts_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a34adb37cc75693dc4de508d1c7c54cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>contactModel_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a944117cf556c710f6c87753d3e328d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>fc_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a698f5a06dec84836a1d0a3d97d97a35b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>tc_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ace91b16afde7efe4a3957328b54528d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>dx_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a16efcdf16f2639bddc89a1147203fac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>xk1_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a6287fc78d2057b0f47c70e029e7764c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>xk_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ae5cc44baf5688e84a4907f0f667d05d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>uk_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a2928b596ffe5eff0f0d5a6dfb9c22630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>xk_fory_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>afb6fba71143c0b8c2197843b3f479e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>yk_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a4c44695621bbf92e751c4e2f2ee5df22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>uk_fory_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ab2ebeaa40accd1f30953f8474a8dcb10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>measurementSize_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a4806a3204792215c416e29315c7b733a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vector3, Eigen::aligned_allocator&lt; Vector3 &gt; &gt;</type>
      <name>contactPositions_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ac9fb7f30a8754b2658d99ce8bc6bf17c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>Kfe_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a8f5c514c9bfd51da4d0095f42bb3ba3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>Kte_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a2f05fc35bd205b321c0f782b476a156d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>Kfv_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a90c8cd8b3bdfcce5e75c649fd1c9e700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>Ktv_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ac42170566cbc772630e3937697fc7bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>KfeRopes_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aa1b47e69b95483da2e7c853a8f1d0a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>KteRopes_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>af8a6b4b9235d4f4de5f42c17d6635dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>KfvRopes_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a04605669f13c4cf1aa612e1d11fdaa66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>KtvRopes_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a3766d95b91719ebe7bd91f9797399423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeIndex</type>
      <name>kcurrent_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aa04bb7e77e5edd20593926f847300191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withForceMeasurements_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>afa299e3eeb86213ab21d6f074da6e2e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withComBias_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a002605f543d68211aa690a11d43e9bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withAbsolutePos_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>aeb613f1c6901f4bd89acb09cfd98a236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withUnmodeledForces_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a95d1aa69fbd13a048d3bbedd3e7b4867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stateObservation::Vector3</type>
      <name>pe</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a17993408f08ef4411ad2a7da058a5696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>marginalStabilityFactor_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>acc5b99e9b9c6ff23185c0b32a6037707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>index_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>af08e12ba600f18e9e771d8bfad1a4eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::Optimization</type>
      <name>op_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a886f2d8e351943feb35a339c757eb32b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr Index</type>
      <name>stateSize_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>a6b18c926f901d6eed28dc58c87d134e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr Index</type>
      <name>measurementSizeBase_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem.html</anchorfile>
      <anchor>ab046e025568e5a1c56c7c45a0312b2ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::flexibilityEstimation::IMUFixedContactDynamicalSystem</name>
    <filename>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</filename>
    <base>stateObservation::DynamicalSystemFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>IMUFixedContactDynamicalSystem</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>abc0b778f12e3bd0b6b3847e871533fe5</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IMUFixedContactDynamicalSystem</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>aece634782f8473be41b96e09fc5c811b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::Vector</type>
      <name>stateDynamics</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>aac2d72e89963f1976b62717b9e1a8635</anchor>
      <arglist>(const stateObservation::Vector &amp;x, const stateObservation::Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::Vector</type>
      <name>measureDynamics</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a5b87824a6bf94c2fae22a2abc40e843d</anchor>
      <arglist>(const stateObservation::Vector &amp;x, const stateObservation::Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProcessNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a7b4e72653bfde3dca01580b5d71245eb</anchor>
      <arglist>(stateObservation::NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetProcessNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a39bea4349f5ffff0824deb6941315c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::NoiseBase *</type>
      <name>getProcessNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a147a9cc921d26d7c2834c3f0526a029d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a6cd0ea71a74ec88cfaae35f953045106</anchor>
      <arglist>(stateObservation::NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a91480d7442244d1d741a65dadcadfd57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::NoiseBase *</type>
      <name>getMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a56126b00df80bccf2932556ec6a0619d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSamplingPeriod</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a579ee4b94026909b6e2588fb6bdacdaa</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a1c00ab114d2ffcb322b2fcf9efd4d3ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a05a9c07e1aa4bd41bf8bfc9468444957</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a4f72ec9150d42575e86fa3402b974732</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContactsNumber</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a15ee207483abee581ef079fe9ae03532</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContactPosition</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>afa97baa65314b9b6f59118c893f15db4</anchor>
      <arglist>(unsigned i, const Vector3 &amp;position)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>kine::indexes&lt; kine::rotationVector &gt;</type>
      <name>indexes</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a2b7f839c41878b7de8dc156690cbe692</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Quaternion</type>
      <name>computeQuaternion_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a64d35484d5d4d585ede7b88173bc3b6e</anchor>
      <arglist>(const Vector3 &amp;x)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stateObservation::AccelerometerGyrometer</type>
      <name>sensor_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>ac252a2813298d56f019eefc5b7c9de16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stateObservation::NoiseBase *</type>
      <name>processNoise_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a91d34132a3d991a358136867f78d55b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>ab2c6031010871850727c5c4c9c4a6e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3Unaligned</type>
      <name>orientationVector_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a0f909f12c9d8ffb068d28942148e5100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QuaternionUnaligned</type>
      <name>quaternion_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>ab5a48aa14da103a2086c0628bd6f0747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>measurementSize_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a7fc156635a192af02a7817fa9d9d6b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vector3, Eigen::aligned_allocator&lt; Vector3 &gt; &gt;</type>
      <name>contactPositions_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a1bf33d8b397e53d76f043fba4b1b486f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>stateSize_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a3c618cd6c9e2cf6f45b4192ff83483ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>inputSize_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>ab47beb4a6496177a49c203f180a67726</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>measurementSizeBase_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1IMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a0f790ece55b9d00fcb6f2429d0c9a04e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::IMUMagnetometerDynamicalSystem</name>
    <filename>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</filename>
    <base>stateObservation::DynamicalSystemFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>IMUMagnetometerDynamicalSystem</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>ae2ef186b4c92eaf59421142b3786a088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IMUMagnetometerDynamicalSystem</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a16cc37f7d92bd6ac29357933f637a416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>stateDynamics</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a9bbf84c3905c5c4ec55d4636400396ca</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>measureDynamics</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a97785ac511307120875aa044b949c1db</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProcessNoise</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>ac56845ec6b4efe006f52dd926a080251</anchor>
      <arglist>(NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetProcessNoise</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>aca222272ef61908e62aa7b1eadb7320e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoiseBase *</type>
      <name>getProcessNoise</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>ab5f8da3e86a2362132389aa5037f35fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>aa57619daee994b940ea2e2c9216acdb6</anchor>
      <arglist>(NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>aa4c358380bd3522010d5688ccfd462ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoiseBase *</type>
      <name>getMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a97a88275b2407bb1897927f4a784720e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSamplingPeriod</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a2b11d57ad2f80719820ffa0f8a7eff76</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a5d78f6b1ddc6fb372250ef2d9b05d1de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a28ed092f2752b99dd55296db86fa1148</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a03a52eabca771b58dd066771d9f82293</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>kine::indexes&lt; kine::rotationVector &gt;</type>
      <name>indexes</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a1ec6ce6fec765197d0b1a09e451d6451</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Quaternion</type>
      <name>computeQuaternion_</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a76797937a4aec152e6e8342f6206fa9c</anchor>
      <arglist>(const Vector3 &amp;x)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AccelerometerGyrometerMagnetometer</type>
      <name>sensor_</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a986156ffac64b76cd19e574550c63f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NoiseBase *</type>
      <name>processNoise_</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a53ac12a78c2e2bab9216e9e9ea520ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>ac519993cce932bb62a78b15ea875b46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3Unaligned</type>
      <name>orientationVector_</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a666464fb60121120c73fbb915afe297e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QuaternionUnaligned</type>
      <name>quaternion_</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a5fbc700f95ee99ab49e6cc0389d97684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>stateSize_</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a776f256daf1d2ead88d6254ba909bf46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>inputSize_</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>aa81148d64d67612ae818468b26ad9bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>measurementSize_</name>
      <anchorfile>classstateObservation_1_1IMUMagnetometerDynamicalSystem.html</anchorfile>
      <anchor>a9d8c3f48107e48cf93e4ad2cc4e21115</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::IMUMltpctiveDynamicalSystem</name>
    <filename>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</filename>
    <base>stateObservation::DynamicalSystemFunctorBase</base>
    <base>stateObservation::StateVectorArithmetics</base>
    <class kind="struct">stateObservation::IMUMltpctiveDynamicalSystem::opt</class>
    <member kind="function">
      <type></type>
      <name>IMUMltpctiveDynamicalSystem</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a5a43d4a76fd9996976ebab5206154f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IMUMltpctiveDynamicalSystem</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a206ff6e298de03866e5141cd9edb894b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>stateDynamics</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a1c4139939ecb3a487e2ced1e82118287</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>measureDynamics</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>ab8af0e27236c4ca96c162fddc070d108</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProcessNoise</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a52a98a57ea0081c7ab8e906366142a38</anchor>
      <arglist>(NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetProcessNoise</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a7987c64bf20d24395ef6bd44193207ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoiseBase *</type>
      <name>getProcessNoise</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a51a7c74bddd33161569e0c9f06b4e201</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>aef5df3025bb81400250a694be16bc4e6</anchor>
      <arglist>(NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a3542e2a791a086bf425c4998a94801cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoiseBase *</type>
      <name>getMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a1b24e8bc40d7f9f5ec82b236aacee0d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSamplingPeriod</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>af75737399cf1ee3ae02d8ae94c668a27</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getAMatrix</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>ae6558d35fa6d6733f9dc01aebc620a5d</anchor>
      <arglist>(const Vector &amp;xh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getCMatrix</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>ae78056ab8a4389ad06808dd6b5e4f404</anchor>
      <arglist>(const Vector &amp;xp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a39dbbe050dc419a6898b702d6be9da2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>abf7acc13088d0933f81309754e53338f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a5f3aa55c98bfedda368a6a8d5fe34130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stateSum</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a8cf57a82f96f18751021af889c5347b4</anchor>
      <arglist>(const Vector &amp;stateVector, const Vector &amp;tangentVector, Vector &amp;sum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stateDifference</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a47db3dc594ade3be50877a10055141f8</anchor>
      <arglist>(const Vector &amp;stateVector1, const Vector &amp;stateVector2, Vector &amp;difference)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>kine::indexes&lt; kine::quaternion &gt;</type>
      <name>indexes</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a7476088e6788cafc2242924056adfeca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>kine::indexes&lt; kine::rotationVector &gt;</type>
      <name>indexesTangent</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a81cab1955a5ffaf6ab4125588b30eeb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct stateObservation::IMUMltpctiveDynamicalSystem::opt</type>
      <name>opt_</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>ae8b1fec53d8314ce2e82e32f043a1518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AccelerometerGyrometer</type>
      <name>sensor_</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a91d5b12fd704a30716196dd87dc3c491</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NoiseBase *</type>
      <name>processNoise_</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a5ff989bc802586f378be00f3a3a33ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>aa63962cff60d457b75bf6df9af29e428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>stateSize_</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a0a08487a297b68a53bcc39f56f73ab1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>stateTangentSize_</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>a05b686703593ae28c5e71fe2f9b6508b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>inputSize_</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>aefce4c7cc5a1ac52d47ae84cedf46ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>measurementSize_</name>
      <anchorfile>classstateObservation_1_1IMUMltpctiveDynamicalSystem.html</anchorfile>
      <anchor>af1e91d0ec1de257b1a28a0c6b1845253</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::IndexedMatrixArrayT</name>
    <filename>classstateObservation_1_1IndexedMatrixArrayT.html</filename>
    <templarg>MatrixType</templarg>
    <templarg>Allocator</templarg>
    <member kind="typedef">
      <type>std::vector&lt; MatrixType, Allocator &gt;</type>
      <name>Array</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a102b2522c94e481765e383d301a913ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixArrayT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>acd5dc3f434611e820a948ea64d5665f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixArrayT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ab704b5753e9ff837e4e65657e24320e6</anchor>
      <arglist>(TimeSize size, TimeIndex initTime=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ac86e31b20982c9e3adcfbd1b6f9a473b</anchor>
      <arglist>(const MatrixType &amp;v, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a89f2da478eaa049f663c2ee6a73fdbba</anchor>
      <arglist>(const MatrixType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popFront</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aaf738b0c25ceafc26a78990fed3bab3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>operator[]</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aa4767c3da9bb647b928ed2f87dad7d09</anchor>
      <arglist>(TimeIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>af568b5a0c5db0809acb307d5a37d1d4d</anchor>
      <arglist>(TimeIndex index)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>front</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ac5e7914b9ce420085b1f3d7cd2f021a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType &amp;</type>
      <name>front</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aae17070e9e7be52f493e8c0e09285750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>back</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aed75a8dcdc609df4e7e4627d030a0108</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType &amp;</type>
      <name>back</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a69a281959dd740c2881b18758b6627b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncateAfter</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a25206ef06569fb62e2167ece33fa54f8</anchor>
      <arglist>(TimeIndex timeIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncateBefore</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a6d526a36540253066edab41a5430e97b</anchor>
      <arglist>(TimeIndex timeIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ab8ed67c9ba7c8556f2b85a2a77f27058</anchor>
      <arglist>(TimeSize i, const MatrixType &amp;m=MatrixType())</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getLastIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aee63ca7af2b42efb37ab2fe07c2c5947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getNextIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a2097570893fd27e8313c3361fd2df58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>setLastIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a1c6aa7f725bb502d30a5244081ce767a</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getFirstIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>acf03fd14aebdf22fd1166a82ba13fd46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>setFirstIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a5bae677795d7aa19aee18d2bd028842b</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>TimeSize</type>
      <name>size</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a65bf6262cb760e761164bfd10c449f9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a72a8d2b0f949731d45561369617ddb5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a6ed7174b079f541e711a1b1a039972c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>getArray</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a342e4dbc6093d7d086820a509ef7cd56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a7600f6b27bf3391b2d3fcdaba13f7904</anchor>
      <arglist>(TimeIndex k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFromFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ade344bb39104daa655b3d27398f8185f</anchor>
      <arglist>(const char *filename, Index rows, Index cols=1, bool withTimeStamp=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFromFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a91bfdec5167932996d50b8bae559a4c4</anchor>
      <arglist>(const std::string &amp;filename, Index rows, Index cols=1, bool withTimeStamp=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readVectorsFromFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>af86aac0166419232e73a6ef6a0130451</anchor>
      <arglist>(const std::string &amp;filename, bool withTimeStamp=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readVectorsFromFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a41a795210731181973193b145741b697</anchor>
      <arglist>(const char *filename, bool withTimeStamp=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeInFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a7c99770d2859eda028b98da610ffcdc9</anchor>
      <arglist>(const char *filename, bool clear=false, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeInFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a32d80aa3040d26d8aba7b7753e4c2f93</anchor>
      <arglist>(const std::string &amp;filename, bool clear=false, bool append=false)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::deque&lt; MatrixType, Allocator &gt;</type>
      <name>Deque</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ac04e0711a7f745a92f86c8670660855c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aa455227dde4ba3a9c93b09d53c86ede1</anchor>
      <arglist>(TimeIndex time) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a1e388fbabf3bb2e1796c44f19353b777</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkNext_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a2a2970acce7315211b07eadea0c035e6</anchor>
      <arglist>(TimeIndex time) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeIndex</type>
      <name>k_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a97a647949194644c641890ec24042f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Deque</type>
      <name>v_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ac1d6ba2c50b194d1ff55e3b10f4a0163</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexedMatrixArrayT&lt; Matrix &gt;</name>
    <filename>classstateObservation_1_1IndexedMatrixArrayT.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; Matrix, std::allocator&lt; Matrix &gt; &gt;</type>
      <name>Array</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a102b2522c94e481765e383d301a913ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixArrayT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>acd5dc3f434611e820a948ea64d5665f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixArrayT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ab704b5753e9ff837e4e65657e24320e6</anchor>
      <arglist>(TimeSize size, TimeIndex initTime=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ac86e31b20982c9e3adcfbd1b6f9a473b</anchor>
      <arglist>(const Matrix &amp;v, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a89f2da478eaa049f663c2ee6a73fdbba</anchor>
      <arglist>(const Matrix &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popFront</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aaf738b0c25ceafc26a78990fed3bab3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator[]</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aa4767c3da9bb647b928ed2f87dad7d09</anchor>
      <arglist>(TimeIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator[]</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>af568b5a0c5db0809acb307d5a37d1d4d</anchor>
      <arglist>(TimeIndex index)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>front</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ac5e7914b9ce420085b1f3d7cd2f021a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>front</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aae17070e9e7be52f493e8c0e09285750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>back</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aed75a8dcdc609df4e7e4627d030a0108</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>back</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a69a281959dd740c2881b18758b6627b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncateAfter</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a25206ef06569fb62e2167ece33fa54f8</anchor>
      <arglist>(TimeIndex timeIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncateBefore</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a6d526a36540253066edab41a5430e97b</anchor>
      <arglist>(TimeIndex timeIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ab8ed67c9ba7c8556f2b85a2a77f27058</anchor>
      <arglist>(TimeSize i, const Matrix &amp;m=Matrix())</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getLastIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aee63ca7af2b42efb37ab2fe07c2c5947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getNextIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a2097570893fd27e8313c3361fd2df58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>setLastIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a1c6aa7f725bb502d30a5244081ce767a</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getFirstIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>acf03fd14aebdf22fd1166a82ba13fd46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>setFirstIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a5bae677795d7aa19aee18d2bd028842b</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>TimeSize</type>
      <name>size</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a65bf6262cb760e761164bfd10c449f9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a72a8d2b0f949731d45561369617ddb5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a6ed7174b079f541e711a1b1a039972c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>getArray</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a342e4dbc6093d7d086820a509ef7cd56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a7600f6b27bf3391b2d3fcdaba13f7904</anchor>
      <arglist>(TimeIndex k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFromFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ade344bb39104daa655b3d27398f8185f</anchor>
      <arglist>(const char *filename, Index rows, Index cols=1, bool withTimeStamp=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFromFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a91bfdec5167932996d50b8bae559a4c4</anchor>
      <arglist>(const std::string &amp;filename, Index rows, Index cols=1, bool withTimeStamp=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readVectorsFromFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>af86aac0166419232e73a6ef6a0130451</anchor>
      <arglist>(const std::string &amp;filename, bool withTimeStamp=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readVectorsFromFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a41a795210731181973193b145741b697</anchor>
      <arglist>(const char *filename, bool withTimeStamp=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeInFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a7c99770d2859eda028b98da610ffcdc9</anchor>
      <arglist>(const char *filename, bool clear=false, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeInFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a32d80aa3040d26d8aba7b7753e4c2f93</anchor>
      <arglist>(const std::string &amp;filename, bool clear=false, bool append=false)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::deque&lt; Matrix, std::allocator&lt; Matrix &gt; &gt;</type>
      <name>Deque</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ac04e0711a7f745a92f86c8670660855c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aa455227dde4ba3a9c93b09d53c86ede1</anchor>
      <arglist>(TimeIndex time) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a1e388fbabf3bb2e1796c44f19353b777</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkNext_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a2a2970acce7315211b07eadea0c035e6</anchor>
      <arglist>(TimeIndex time) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeIndex</type>
      <name>k_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a97a647949194644c641890ec24042f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Deque</type>
      <name>v_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ac1d6ba2c50b194d1ff55e3b10f4a0163</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexedMatrixArrayT&lt; Vector &gt;</name>
    <filename>classstateObservation_1_1IndexedMatrixArrayT.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; Vector, std::allocator&lt; Vector &gt; &gt;</type>
      <name>Array</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a102b2522c94e481765e383d301a913ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixArrayT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>acd5dc3f434611e820a948ea64d5665f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixArrayT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ab704b5753e9ff837e4e65657e24320e6</anchor>
      <arglist>(TimeSize size, TimeIndex initTime=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ac86e31b20982c9e3adcfbd1b6f9a473b</anchor>
      <arglist>(const Vector &amp;v, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a89f2da478eaa049f663c2ee6a73fdbba</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popFront</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aaf738b0c25ceafc26a78990fed3bab3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator[]</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aa4767c3da9bb647b928ed2f87dad7d09</anchor>
      <arglist>(TimeIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator[]</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>af568b5a0c5db0809acb307d5a37d1d4d</anchor>
      <arglist>(TimeIndex index)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>front</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ac5e7914b9ce420085b1f3d7cd2f021a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>front</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aae17070e9e7be52f493e8c0e09285750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>back</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aed75a8dcdc609df4e7e4627d030a0108</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>back</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a69a281959dd740c2881b18758b6627b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncateAfter</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a25206ef06569fb62e2167ece33fa54f8</anchor>
      <arglist>(TimeIndex timeIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncateBefore</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a6d526a36540253066edab41a5430e97b</anchor>
      <arglist>(TimeIndex timeIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ab8ed67c9ba7c8556f2b85a2a77f27058</anchor>
      <arglist>(TimeSize i, const Vector &amp;m=Vector())</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getLastIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aee63ca7af2b42efb37ab2fe07c2c5947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getNextIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a2097570893fd27e8313c3361fd2df58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>setLastIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a1c6aa7f725bb502d30a5244081ce767a</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getFirstIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>acf03fd14aebdf22fd1166a82ba13fd46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>setFirstIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a5bae677795d7aa19aee18d2bd028842b</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>TimeSize</type>
      <name>size</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a65bf6262cb760e761164bfd10c449f9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a72a8d2b0f949731d45561369617ddb5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a6ed7174b079f541e711a1b1a039972c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>getArray</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a342e4dbc6093d7d086820a509ef7cd56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a7600f6b27bf3391b2d3fcdaba13f7904</anchor>
      <arglist>(TimeIndex k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFromFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ade344bb39104daa655b3d27398f8185f</anchor>
      <arglist>(const char *filename, Index rows, Index cols=1, bool withTimeStamp=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFromFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a91bfdec5167932996d50b8bae559a4c4</anchor>
      <arglist>(const std::string &amp;filename, Index rows, Index cols=1, bool withTimeStamp=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readVectorsFromFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>af86aac0166419232e73a6ef6a0130451</anchor>
      <arglist>(const std::string &amp;filename, bool withTimeStamp=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readVectorsFromFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a41a795210731181973193b145741b697</anchor>
      <arglist>(const char *filename, bool withTimeStamp=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeInFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a7c99770d2859eda028b98da610ffcdc9</anchor>
      <arglist>(const char *filename, bool clear=false, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeInFile</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a32d80aa3040d26d8aba7b7753e4c2f93</anchor>
      <arglist>(const std::string &amp;filename, bool clear=false, bool append=false)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::deque&lt; Vector, std::allocator&lt; Vector &gt; &gt;</type>
      <name>Deque</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ac04e0711a7f745a92f86c8670660855c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>aa455227dde4ba3a9c93b09d53c86ede1</anchor>
      <arglist>(TimeIndex time) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a1e388fbabf3bb2e1796c44f19353b777</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkNext_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a2a2970acce7315211b07eadea0c035e6</anchor>
      <arglist>(TimeIndex time) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeIndex</type>
      <name>k_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>a97a647949194644c641890ec24042f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Deque</type>
      <name>v_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixArrayT.html</anchorfile>
      <anchor>ac1d6ba2c50b194d1ff55e3b10f4a0163</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::IndexedMatrixT</name>
    <filename>classstateObservation_1_1IndexedMatrixT.html</filename>
    <templarg>MatrixType</templarg>
    <templarg>lazy</templarg>
    <base protection="protected">DebugItem&lt; bool, detail::defaultTrue, !lazy||isDebug &gt;</base>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>abe91576eaeeec83c1b6ab11d8045372d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>ab39fb39c8f770a98d78e4ac45459ab1d</anchor>
      <arglist>(const MatrixType &amp;v, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>IndexedMatrixT &amp;</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a2f77d4b70e927abf20e9395c79861799</anchor>
      <arglist>(const MatrixType &amp;v, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>afb3b8de4e530da1233cdf0c561c9ae5a</anchor>
      <arglist>(bool value=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a51513f77e5d8ad5e8297c28265da38bf</anchor>
      <arglist>(TimeIndex index)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>af27fe5405ecd2bacc4ca0702f3c14f4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>abd740f0aded2fa9bdf0299066d350afa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getTime</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>ac3628505bd04bd81d30254f0f71dcb0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>af2b032bafa7daf28edc14aa39c96de79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>adbf9827b912155d6c7b2cd07f570bfd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a822e96067f9d354ff6e0465a42fcb55a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeIndex</type>
      <name>k_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a901028aa5c9c31727baf81acd24b323b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixType</type>
      <name>v_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a4cf6829fc305c19a5a5db865be695662</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexedMatrixT&lt; Matrix3 &gt;</name>
    <filename>classstateObservation_1_1IndexedMatrixT.html</filename>
    <base protection="protected">DebugItem&lt; bool, detail::defaultTrue, !false||isDebug &gt;</base>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>abe91576eaeeec83c1b6ab11d8045372d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>ab39fb39c8f770a98d78e4ac45459ab1d</anchor>
      <arglist>(const Matrix3 &amp;v, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>IndexedMatrixT &amp;</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a2f77d4b70e927abf20e9395c79861799</anchor>
      <arglist>(const Matrix3 &amp;v, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>afb3b8de4e530da1233cdf0c561c9ae5a</anchor>
      <arglist>(bool value=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a51513f77e5d8ad5e8297c28265da38bf</anchor>
      <arglist>(TimeIndex index)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3 &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>af27fe5405ecd2bacc4ca0702f3c14f4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3 &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>abd740f0aded2fa9bdf0299066d350afa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getTime</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>ac3628505bd04bd81d30254f0f71dcb0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>af2b032bafa7daf28edc14aa39c96de79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>adbf9827b912155d6c7b2cd07f570bfd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a822e96067f9d354ff6e0465a42fcb55a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeIndex</type>
      <name>k_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a901028aa5c9c31727baf81acd24b323b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>v_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a4cf6829fc305c19a5a5db865be695662</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexedMatrixT&lt; Vector &gt;</name>
    <filename>classstateObservation_1_1IndexedMatrixT.html</filename>
    <base protection="protected">DebugItem&lt; bool, detail::defaultTrue, !false||isDebug &gt;</base>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>abe91576eaeeec83c1b6ab11d8045372d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>ab39fb39c8f770a98d78e4ac45459ab1d</anchor>
      <arglist>(const Vector &amp;v, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>IndexedMatrixT &amp;</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a2f77d4b70e927abf20e9395c79861799</anchor>
      <arglist>(const Vector &amp;v, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>afb3b8de4e530da1233cdf0c561c9ae5a</anchor>
      <arglist>(bool value=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a51513f77e5d8ad5e8297c28265da38bf</anchor>
      <arglist>(TimeIndex index)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>af27fe5405ecd2bacc4ca0702f3c14f4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>abd740f0aded2fa9bdf0299066d350afa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getTime</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>ac3628505bd04bd81d30254f0f71dcb0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>af2b032bafa7daf28edc14aa39c96de79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>adbf9827b912155d6c7b2cd07f570bfd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a822e96067f9d354ff6e0465a42fcb55a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeIndex</type>
      <name>k_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a901028aa5c9c31727baf81acd24b323b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>v_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a4cf6829fc305c19a5a5db865be695662</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexedMatrixT&lt; Vector3 &gt;</name>
    <filename>classstateObservation_1_1IndexedMatrixT.html</filename>
    <base protection="protected">DebugItem&lt; bool, detail::defaultTrue, !false||isDebug &gt;</base>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>abe91576eaeeec83c1b6ab11d8045372d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedMatrixT</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>ab39fb39c8f770a98d78e4ac45459ab1d</anchor>
      <arglist>(const Vector3 &amp;v, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>IndexedMatrixT &amp;</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a2f77d4b70e927abf20e9395c79861799</anchor>
      <arglist>(const Vector3 &amp;v, TimeIndex k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>afb3b8de4e530da1233cdf0c561c9ae5a</anchor>
      <arglist>(bool value=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndex</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a51513f77e5d8ad5e8297c28265da38bf</anchor>
      <arglist>(TimeIndex index)</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>af27fe5405ecd2bacc4ca0702f3c14f4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3 &amp;</type>
      <name>operator()</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>abd740f0aded2fa9bdf0299066d350afa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getTime</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>ac3628505bd04bd81d30254f0f71dcb0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>af2b032bafa7daf28edc14aa39c96de79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>adbf9827b912155d6c7b2cd07f570bfd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a822e96067f9d354ff6e0465a42fcb55a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeIndex</type>
      <name>k_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a901028aa5c9c31727baf81acd24b323b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>v_</name>
      <anchorfile>classstateObservation_1_1IndexedMatrixT.html</anchorfile>
      <anchor>a4cf6829fc305c19a5a5db865be695662</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::kine::indexes</name>
    <filename>structstateObservation_1_1kine_1_1indexes.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>stateObservation::kine::indexes&lt; quaternion &gt;</name>
    <filename>structstateObservation_1_1kine_1_1indexes_3_01quaternion_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>pos</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01quaternion_01_4.html</anchorfile>
      <anchor>aa03569ed92d596aeb59784ae570ce56c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>ori</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01quaternion_01_4.html</anchorfile>
      <anchor>ab67db3791206a8ea00389cade98dcf0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>linVel</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01quaternion_01_4.html</anchorfile>
      <anchor>a8f82460627879661cea24f559f9fee3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>angVel</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01quaternion_01_4.html</anchorfile>
      <anchor>aaaf20840675efc41319af4b074b50704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>linAcc</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01quaternion_01_4.html</anchorfile>
      <anchor>a089d6e787a9fb4821cb17d86d5f103fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>angAcc</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01quaternion_01_4.html</anchorfile>
      <anchor>a1e7ef32c7d7658733ef44382d7ece71f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>size</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01quaternion_01_4.html</anchorfile>
      <anchor>abaf31964b27326986d223e3cf44b0aa3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::kine::indexes&lt; rotationVector &gt;</name>
    <filename>structstateObservation_1_1kine_1_1indexes_3_01rotationVector_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>pos</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01rotationVector_01_4.html</anchorfile>
      <anchor>a89dd2954edc033204b6cf274dfdb7184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>ori</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01rotationVector_01_4.html</anchorfile>
      <anchor>affdcb7feac0bf0f5fe99cdacc0c28fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>linVel</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01rotationVector_01_4.html</anchorfile>
      <anchor>a856a7f5d29a2eb6cd00d20b4734e4eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>angVel</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01rotationVector_01_4.html</anchorfile>
      <anchor>aa4ea46e4ffcd9e53f430777a336d11cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>linAcc</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01rotationVector_01_4.html</anchorfile>
      <anchor>a261f8d6048b9a703d365e3b69814fc71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>angAcc</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01rotationVector_01_4.html</anchorfile>
      <anchor>a59917f3e451d7c1bf26e52f40e0b063b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>size</name>
      <anchorfile>structstateObservation_1_1kine_1_1indexes_3_01rotationVector_01_4.html</anchorfile>
      <anchor>aeabb040dabe9e0d1e16741f62915a350</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::input</name>
    <filename>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>posCom</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>ad92e000d14e371c71e451fc7f7ae3416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>velCom</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>a392e8a96d56ab63fadfebb9a33429c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>accCom</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>ab3b9a12a12326422e78acb484d752ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>inertia</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>a4510229a2fc64e6fb6b544561855124e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>angMoment</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>ad9aa339f27015922516dc5224067a33a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>dotInertia</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>a45930c9b16d184f335c94790e7a68697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>dotAngMoment</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>a3d9b7234f656b9b32216d82c0893d814</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>posIMU</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>a9298a1b7681c9e1e1f251aab836733e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>oriIMU</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>a27b892755d370b0b89290540cefb86c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>linVelIMU</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>abb60e1a4a46aeae00fb927b0d7e835bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>angVelIMU</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>a1f0301ba7debf7b6dd580854946eaa11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>linAccIMU</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>a9aeb2f0508890223677cb1816f44e142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>additionalForces</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>a9932cf188470838e8a0ce4c945cf893e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>contacts</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>aa37cb9a2af45562434600d8fb402cd02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>sizeBase</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1input.html</anchorfile>
      <anchor>a0fcbc122f976c687321ced4ae6548838</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::isEigen</name>
    <filename>structstateObservation_1_1isEigen.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structstateObservation_1_1isEigen.html</anchorfile>
      <anchor>aa8abfd6e182a8e8be56b2b43bac05606</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::isMatrix</name>
    <filename>structstateObservation_1_1isMatrix.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>stateObservation::isMatrix&lt; Eigen::Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structstateObservation_1_1isMatrix_3_01Eigen_1_1Matrix_3_01__Scalar_00_01__Rows_00_01__Cols_00_0ef6b73255092c89cac8fa5ea734359d2.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
  </compound>
  <compound kind="class">
    <name>stateObservation::KalmanFilterBase</name>
    <filename>classstateObservation_1_1KalmanFilterBase.html</filename>
    <base>stateObservation::ZeroDelayObserver</base>
    <base protection="protected">stateObservation::StateVectorArithmetics</base>
    <class kind="struct">stateObservation::KalmanFilterBase::optimizationContainer</class>
    <member kind="typedef">
      <type>Matrix</type>
      <name>Amatrix</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a1adb09e3b7688888ae6346a393b93eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>Cmatrix</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>af4a3c075af9f628b96d99f5ac1f9c5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>Qmatrix</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a964adeb5d7b385cdd8f821fa02c6c443</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>Rmatrix</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ac334ed09e528e39a184cc81369161d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>Pmatrix</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a309c3b0ea98e315825d02cfd08f02d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::LLT&lt; Pmatrix &gt;</type>
      <name>LLTPMatrix</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>afb5af44bd7d9e72904fb6db54eb0574d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector</type>
      <name>StateVectorTan</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ac32430cd8d19a118508c90ef0d42e118</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector</type>
      <name>MeasureVectorTan</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a7776cbd6a7db09309fde06f1649e0328</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KalmanFilterBase</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a3e72944b85832c2891ffc5bdf2b833ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KalmanFilterBase</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a0cfaac8bb175b12993815a448f487a85</anchor>
      <arglist>(Index n, Index m, Index p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KalmanFilterBase</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a47922cf0fba31a6ae25f00e79c8b31d3</anchor>
      <arglist>(Index n, Index nt, Index m, Index mt, Index p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setA</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>aff3e3f4640e238240a6431f64b039d99</anchor>
      <arglist>(const Amatrix &amp;A)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getA</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>afbca488db5af42673b4c31eaae78fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearA</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a2cb693d47e393755c5cad4ace228c032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setC</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a1963c2f35c8d4981ca1781921e05e888</anchor>
      <arglist>(const Cmatrix &amp;C)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getC</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a7c2bcf3baeb1e374073846e5182ad992</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearC</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a18cc4b294edffdc5c73449503c31f1c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setR</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ae79ee52bad30c6307f98fb662521ba58</anchor>
      <arglist>(const Rmatrix &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMeasurementCovariance</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a36e5529fc32733d14cb407999ef2278d</anchor>
      <arglist>(const Rmatrix &amp;R)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getR</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a63f8d435838914f6ccf3efcb06bbbd68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>getMeasurementCovariance</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a2293573b057fb05bf96e09a95abb2fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearR</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ae00d034684c0d2616a9153ef46e5d537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQ</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a4cb7d4e5098bb81bc982b93ac12b9714</anchor>
      <arglist>(const Qmatrix &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcessCovariance</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>aa3550267a61d9e2d4d8fd7927cee86ab</anchor>
      <arglist>(const Qmatrix &amp;Q)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getQ</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ab5e57259f85d04de8b26e1ff879b9d84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>getProcessCovariance</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a6468d8f7e39de77a752678c8b4f0bf99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearQ</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a1338a40d3a56dd3d0a20f1399e756ae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateCovariance</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>af4c715206c39bfe9569b5a4f197f5f8b</anchor>
      <arglist>(const Pmatrix &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearStates</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ac9d91f870f6865acefc29b21312fc1a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearStateCovariance</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a915edad6eb7618a510ea5de299b44702</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pmatrix</type>
      <name>getStateCovariance</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a60f7f18e490e3ac9a868d14decdac68e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a4740b749f1573acfadbf28db8f43d2bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Amatrix</type>
      <name>getAmatrixConstant</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ac2ee8b440c007184abde0e140c6ec929</anchor>
      <arglist>(double c) const</arglist>
    </member>
    <member kind="function">
      <type>Amatrix</type>
      <name>getAmatrixRandom</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a6038464e5b22f6970fca7aa5d775949b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Amatrix</type>
      <name>getAmatrixZero</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>afcffc22e238f54b8f42af6b5a7b8a6c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Amatrix</type>
      <name>getAmatrixIdentity</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a981bf9ddb58ff72171d401c80b4ae9ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkAmatrix</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ad749bbd3bf3671344f33da892fca28ac</anchor>
      <arglist>(const Amatrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Cmatrix</type>
      <name>getCmatrixConstant</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ae141547695b31ff1b46e29fa4f815b78</anchor>
      <arglist>(double c) const</arglist>
    </member>
    <member kind="function">
      <type>Cmatrix</type>
      <name>getCmatrixRandom</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a33b893da46c5229b9f6671ac9bd6cca6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cmatrix</type>
      <name>getCmatrixZero</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a0752ae3b50b70d22544fc52ddc47931a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkCmatrix</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ab6d764b394c2a92545c10cf6df9f7108</anchor>
      <arglist>(const Cmatrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Qmatrix</type>
      <name>getQmatrixConstant</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a59bc54320449e0793ad400571bbff5d2</anchor>
      <arglist>(double c) const</arglist>
    </member>
    <member kind="function">
      <type>Qmatrix</type>
      <name>getQmatrixRandom</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a4e188296d553fbd43cefd204f18e51b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Qmatrix</type>
      <name>getQmatrixZero</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a88909154a3083bd6db4154013c7ab224</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Qmatrix</type>
      <name>getQmatrixIdentity</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a72e8e96c2057230f9fccdbe90dab21ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkQmatrix</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a25e2832f321f61f2cefea061c41a01af</anchor>
      <arglist>(const Qmatrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Rmatrix</type>
      <name>getRmatrixConstant</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a2bd829f4f612cf049c1cc4a923df5316</anchor>
      <arglist>(double c) const</arglist>
    </member>
    <member kind="function">
      <type>Rmatrix</type>
      <name>getRmatrixRandom</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a7f70e9b8355148a3305f5405dec8af30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rmatrix</type>
      <name>getRmatrixZero</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>aa78b0340a9868ba216509fa8759637a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rmatrix</type>
      <name>getRmatrixIdentity</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a12901744e6a01372dd2ca09000e45f2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkRmatrix</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a341ee4ef88eabd6222abbf143c0726b3</anchor>
      <arglist>(const Rmatrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Pmatrix</type>
      <name>getPmatrixConstant</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a75d6c8fd73c7c59b845a33dcd5c6cee0</anchor>
      <arglist>(double c) const</arglist>
    </member>
    <member kind="function">
      <type>Pmatrix</type>
      <name>getPmatrixRandom</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a781928e05bebdd45fdecfc7d464b9172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pmatrix</type>
      <name>getPmatrixZero</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a024f93a414f6f288d1bafffac6b12be4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pmatrix</type>
      <name>getPmatrixIdentity</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a787157412c7a1b337a0009303906eb8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkPmatrix</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>aae813b50e6bd2e7e64f611bc7f5e0da1</anchor>
      <arglist>(const Pmatrix &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateVectorTan</type>
      <name>stateTangentVectorConstant</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ad57c4e1eb47da9b5d2ad29f43c2a57ce</anchor>
      <arglist>(double c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateVectorTan</type>
      <name>stateTangentVectorRandom</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ac6af9e5d7145209b728912c6ae06d093</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateVectorTan</type>
      <name>stateTangentVectorZero</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>aec620f3312d2789975394d825c9c6405</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkStateTangentVector</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>abd507cf3c37af68df1f63630fcd19c7b</anchor>
      <arglist>(const StateVectorTan &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MeasureVectorTan</type>
      <name>measureTangentVectorConstant</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a6888cdf4fa0f3ca7ea349bf2e65a462e</anchor>
      <arglist>(double c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MeasureVectorTan</type>
      <name>measureTangentVectorRandom</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>aac2130c6d78753c6e798c8f8a1440804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MeasureVectorTan</type>
      <name>measureTangentVectorZero</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a4f8b7f21d0f34a44ef2410165e865830</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMeasureTangentVector</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a9cba2e5801940ef09fdebd8824b688dd</anchor>
      <arglist>(const MeasureVectorTan &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateSize</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a5b5b67781fe2dfb3a5ec88d47c61b740</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateSize</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a7b7b50885eee113e5278f64e862b6139</anchor>
      <arglist>(Index n, Index nt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasureSize</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>ab67b5ddb096384082292a5f1971168d0</anchor>
      <arglist>(Index m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasureSize</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a5fded3d59510d27a83bd51b84c521b65</anchor>
      <arglist>(Index m, Index mt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MeasureVector</type>
      <name>getSimulatedMeasurement</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a5157dd43cc865c21c758c46c60f8912b</anchor>
      <arglist>(TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateVector</type>
      <name>getInnovation</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a3d01a1588b7f448b99818ac02a8a4bb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StateVector</type>
      <name>updateStatePrediction</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a995254f995c2727b27fc0ca41c9aee67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MeasureVector</type>
      <name>updateStateAndMeasurementPrediction</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>adee58617aaacaf92de1ea354f5307b0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StateVector</type>
      <name>getLastPrediction</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>af3dc2f79152558d81642beecb43e60a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MeasureVector</type>
      <name>getLastPredictedMeasurement</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a9b5c2ed9a4ca76a724d41851f3acdc6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>getLastGain</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>aaa4ab7d4ee1c787325807a0fcfd1a2a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateArithmetics</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a662db61eaeec20c77938f9742409499f</anchor>
      <arglist>(StateVectorArithmetics *arith)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix</type>
      <name>Kmatrix</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a89944bb14605d678e0cddc7a5390864f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual StateVector</type>
      <name>oneStepEstimation_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a4c0c46e521e7c2a91a5c96884d6bbdf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual StateVector</type>
      <name>prediction_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a05c83b0e4d0559eee5918a9e9561d03c</anchor>
      <arglist>(TimeIndex k)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual MeasureVector</type>
      <name>simulateSensor_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a3940901c9b568bf350e90957724c01f9</anchor>
      <arglist>(const StateVector &amp;x, TimeIndex k)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MeasureVector</type>
      <name>predictSensor_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a0dbaeee02b8486390a45ae9ffa41582e</anchor>
      <arglist>(TimeIndex k)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>nt_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>aa249c7136a7b222c84343577c582a9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>mt_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a0a17e429884b279a666344c2594d58dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>a_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>aa370d2ad78d1011dc57c91f14eeeca66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>c_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a107a753056cab5d90146cd55df1a4033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>q_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>aa8b4983193507a990ca89f44fcb7cc1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>r_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a5d8da2fc30488c75d8b03eb7f848ca53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>pr_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a4ec3931cdd8289aff501833debf3d3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedVector</type>
      <name>xbar_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a655245a3bce7bc5c8a88bf4d8a391ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedVector</type>
      <name>ybar_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a93641ed97aec1924351d56efc01b0980</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>innovation_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a5f6d667dfd080f6bd251660a349a7c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct stateObservation::KalmanFilterBase::optimizationContainer</type>
      <name>oc_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a3c5a0baa790314878f898c6ed512ca0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateVectorArithmetics *</type>
      <name>arithm_</name>
      <anchorfile>classstateObservation_1_1KalmanFilterBase.html</anchorfile>
      <anchor>a61f133b95e7bf84f202032c613f398d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::kine::Kinematics</name>
    <filename>structstateObservation_1_1kine_1_1Kinematics.html</filename>
    <class kind="struct">stateObservation::kine::Kinematics::Flags</class>
    <member kind="function">
      <type></type>
      <name>Kinematics</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a7afe734002c6abe2b5fc76e35a842f6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Kinematics</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>aaa354ac8b4fbb4a334f3fa8fc7d0f25b</anchor>
      <arglist>(const Vector &amp;v, Flags::Byte=Flags::all)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Kinematics</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a04c5dd3d3af0e9f1470906aa8d36991e</anchor>
      <arglist>(const Kinematics &amp;multiplier1, const Kinematics &amp;multiplier2)</arglist>
    </member>
    <member kind="function">
      <type>Kinematics &amp;</type>
      <name>fromVector</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a2e9e75dc79099b4d385edec1bd96f0ae</anchor>
      <arglist>(const Vector &amp;v, Flags::Byte=Flags::all)</arglist>
    </member>
    <member kind="function">
      <type>Kinematics &amp;</type>
      <name>setZero</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a1dad8fd93c13685bbc871b6a32493aaf</anchor>
      <arglist>(Flags::Byte=Flags::all)</arglist>
    </member>
    <member kind="function">
      <type>Kinematics &amp;</type>
      <name>setZero</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a9bfb9c05b58aaaef0260c6c8cc6d948f</anchor>
      <arglist>(Flags::Byte=Flags::all)</arglist>
    </member>
    <member kind="function">
      <type>const Kinematics &amp;</type>
      <name>integrate</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a29932dc6bb84a7264b21be5c7a6290d7</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function">
      <type>const Kinematics &amp;</type>
      <name>update</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a5f0fe9f7511635c3b951cee497853d27</anchor>
      <arglist>(const Kinematics &amp;newValue, double dt, Flags::Byte=Flags::all)</arglist>
    </member>
    <member kind="function">
      <type>Kinematics</type>
      <name>getInverse</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>add84ab592a47926089deb76546e3fd01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>toVector</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>abe06ae95bbb4310d033fcf8b257b35ab</anchor>
      <arglist>(Flags::Byte) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>toVector</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a171c2155c40fce5faefbbe56a46280f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Kinematics</type>
      <name>operator*</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>af9b1a231b3f94e9bdfb5a1bcaaf9a13c</anchor>
      <arglist>(const Kinematics &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Kinematics</type>
      <name>setToProductNoAlias</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a70cfd188aa7f51f94685348045f149c1</anchor>
      <arglist>(const Kinematics &amp;operand1, const Kinematics &amp;operand2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>aeae7e1aa93cb5c04f377dddcbaa6af56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>CheckedVector3</type>
      <name>position</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>ac6c0849272f17017627a974c154267b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>adcb44f6eecab5f92fc023ac78e65dcec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CheckedVector3</type>
      <name>linVel</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a16a741a618d19a2d6fe92b054dd4586b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CheckedVector3</type>
      <name>angVel</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a419aad64288deb85ce2bb636f7cb2c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CheckedVector3</type>
      <name>linAcc</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a71dce0ead08c7fd23eb1a67e9cd07016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CheckedVector3</type>
      <name>angAcc</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>af998238e801633a5c6a288539715958c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Kinematics &amp;</type>
      <name>update_deprecated</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a32785d159ad1b72daec6210c878ed298</anchor>
      <arglist>(const Kinematics &amp;newValue, double dt, Flags::Byte=Flags::all)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>tempVec_</name>
      <anchorfile>structstateObservation_1_1kine_1_1Kinematics.html</anchorfile>
      <anchor>a26033f9a5e8d7c656c814bd4136cd00d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::KineticsObserver</name>
    <filename>classstateObservation_1_1KineticsObserver.html</filename>
    <base protection="protected">stateObservation::DynamicalSystemFunctorBase</base>
    <base protection="protected">stateObservation::StateVectorArithmetics</base>
    <class kind="struct">stateObservation::KineticsObserver::AbsolutePoseSensor</class>
    <class kind="struct">stateObservation::KineticsObserver::Contact</class>
    <class kind="struct">stateObservation::KineticsObserver::IMU</class>
    <class kind="struct">stateObservation::KineticsObserver::Opt</class>
    <class kind="struct">stateObservation::KineticsObserver::Sensor</class>
    <member kind="typedef">
      <type>kine::Kinematics</type>
      <name>Kinematics</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aab93d59d57726e3ab9566e9cb605f98e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>kine::Orientation</type>
      <name>Orientation</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aad2108adbc5d88fa2f9bd92f165bdc83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KineticsObserver</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aec7484db4ddd0162eb68859a20f1a262</anchor>
      <arglist>(unsigned maxContacts=4, unsigned maxNumberOfIMU=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KineticsObserver</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ab40d2d2098265a7290fc07ebbf659999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSamplingTime</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>afc8a39279ca77d1fbabacdbd7fdf27e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSamplingTime</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>abee9ef3ee969c4c798acb1cca89045ee</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWithUnmodeledWrench</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad60981afaa1763ed9bae9a5d55f97324</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWithAccelerationEstimation</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7d9d8b542a69720a446d8ea94eb29b2a</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWithGyroBias</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a66163ba4361292ed0834277c387f2f4f</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMass</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8550033497c0fab9b369560ff76fc99c</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setIMU</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>adc8e9d45b1d49cab2927a4b449e0fe86</anchor>
      <arglist>(const Vector3 &amp;accelero, const Vector3 &amp;gyrometer, const Kinematics &amp;localKine, int num=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setIMU</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aff77c307b4406539fe6d428a0368d3c9</anchor>
      <arglist>(const Vector3 &amp;accelero, const Vector3 &amp;gyrometer, const Matrix3 &amp;acceleroCov, const Matrix3 &amp;gyroCov, const Kinematics &amp;localKine, int num=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIMUDefaultCovarianceMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae6427334e2bab3d0fb4e71e4869f8924</anchor>
      <arglist>(const Matrix3 &amp;acceleroCov, const Matrix3 &amp;gyroCov)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsolutePoseSensor</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a6e7319be5ec9c8a0220c9f3988e04c37</anchor>
      <arglist>(const Kinematics &amp;measurement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsolutePoseSensor</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aab364172525077f784a38da9ceca36fc</anchor>
      <arglist>(const Kinematics &amp;measurement, const Matrix6 &amp;CovarianceMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsolutePoseSensorDefaultCovarianceMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a6c6ab8c2d69a377aa1d17450a90522dc</anchor>
      <arglist>(const Matrix6 &amp;covMat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addContact</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a49ae40515187bfd3e499d1874a217e78</anchor>
      <arglist>(const Kinematics &amp;pose, const Vector6 &amp;contactWrench, const Matrix12 &amp;initialCovarianceMatrix, const Matrix12 &amp;processCovarianceMatrix, int contactNumber=-1, const Matrix3 &amp;linearStiffness=Matrix3::Constant(-1), const Matrix3 &amp;linearDamping=Matrix3::Constant(-1), const Matrix3 &amp;angularStiffness=Matrix3::Constant(-1), const Matrix3 &amp;angularDamping=Matrix3::Constant(-1))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addContact</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2a4947ab391d218df4b3d1a83ff0c514</anchor>
      <arglist>(const Kinematics &amp;pose, const Vector6 &amp;contactWrench=Vector6::Zero(), int contactNumber=-1, const Matrix3 &amp;linearStiffness=Matrix3::Constant(-1), const Matrix3 &amp;linearDamping=Matrix3::Constant(-1), const Matrix3 &amp;angularStiffness=Matrix3::Constant(-1), const Matrix3 &amp;angularDamping=Matrix3::Constant(-1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeContact</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a641f46549197908377f4a99ffbfa222f</anchor>
      <arglist>(int contactnbr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearContacts</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a74e15a200f6f1ffbdfc98a5b90b5b86d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumberOfContacts</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae35787d65f5dc05134583e69df5219e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>getListOfContacts</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a6a4390efd69d87cfecb902632cbac9a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContactWithNoSensor</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a50f01ae14f10b27cb3cedb2fe9fb96e3</anchor>
      <arglist>(const Kinematics &amp;localKine, unsigned contactNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContactWithWrenchSensor</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1ccba0bf1c2eee918960f2d84d1660e0</anchor>
      <arglist>(const Vector6 &amp;wrenchMeasurement, const Kinematics &amp;localKine, unsigned contactNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContactWithWrenchSensor</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a312fc277c9e3a0691319b2ffba964dd2</anchor>
      <arglist>(const Vector6 &amp;wrenchMeasurement, const Matrix6 &amp;wrenchCovMatrix, const Kinematics &amp;localKine, unsigned contactNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactWrenchSensorDefaultCovarianceMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a561e85770d1655172b957e4ca58e5d81</anchor>
      <arglist>(const Matrix6 &amp;wrenchSensorCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenterOfMass</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>af800bd6eb4302dc3e286c230a51f8ae6</anchor>
      <arglist>(const Vector3 &amp;com, const Vector3 &amp;com_dot, const Vector3 &amp;com_dot_dot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenterOfMass</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2e9816060c9a9f833caf7e8a7a019038</anchor>
      <arglist>(const Vector3 &amp;com, const Vector3 &amp;com_dot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenterOfMass</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2903a426527b0e5c3fb2172defb2fce4</anchor>
      <arglist>(const Vector3 &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInertiaMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad505de6db32f5b13ebf8f918a417b972</anchor>
      <arglist>(const Matrix3 &amp;I, const Matrix3 &amp;I_dot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInertiaMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7922b3e7e7e83fa61d6a315780998104</anchor>
      <arglist>(const Matrix3 &amp;I)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInertiaMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1862b7b808fd215a51da29cd49f5ec83</anchor>
      <arglist>(const Vector6 &amp;I, const Vector6 &amp;I_dot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInertiaMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ada193357139506c3c20ae1282ddbeeb7</anchor>
      <arglist>(const Vector6 &amp;I)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularMomentum</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>abc0b3240acc8a33fb799bf188c3335aa</anchor>
      <arglist>(const Vector3 &amp;sigma, const Vector3 &amp;sigma_dot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularMomentum</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad4e3e2a4203097b48ffe0e9d1663740d</anchor>
      <arglist>(const Vector3 &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdditionalWrench</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae9432871c1193d4f5a66cf15d57a989d</anchor>
      <arglist>(const Vector3 &amp;force, const Vector3 &amp;torque)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>update</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a373403115258327bb90292ebef64f826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Kinematics</type>
      <name>getKinematics</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aaa3d8d81cb5d1fcb229d1ef2b6728cf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Kinematics</type>
      <name>estimateAccelerations</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a63b05bb6a677a721934ac36482bb06aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Kinematics</type>
      <name>getKinematicsOf</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad4fe22873b11bdd0f58774f6d06f3c27</anchor>
      <arglist>(const Kinematics &amp;localKinematics) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>getContactWrench</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a04b06c56803d5bf0c5a04f5098dbee26</anchor>
      <arglist>(int contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>Kinematics</type>
      <name>getContactPosition</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa8b4a6e675021fe371b74b184bf753d9</anchor>
      <arglist>(int contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>getUnmodeledWrench</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a27df12db6e8362ef7cf9b4223392b804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateKinematics</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa03c960d6f4ee0b78635ab2378cdf4bd</anchor>
      <arglist>(const Kinematics &amp;kine, bool resetContactWrenches=true, bool resetCovariance=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGyroBias</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a9bd0e12a1a0337aa0ad326460ac26423</anchor>
      <arglist>(const Vector3 &amp;, unsigned numberOfIMU=1, bool resetCovariance=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateUnmodeledWrench</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a67f1fe20864cdb26fa91ba39d8c577eb</anchor>
      <arglist>(const Vector6 &amp;, bool resetCovariance=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSensorsDefaultCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ab53a59a4e560de909e0c89202c3ddb47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetInputs</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5e066c733993fd2c225d4bb57c23e9a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKinematicsStateCovariance</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae6f6d32dbe766814f5359c74e5bb28f2</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKinematicsInitCovarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5a71929f3d6878a1151de07e81987bf6</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKinematicsProcessCovariance</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a914ed34a954e062f75644b109b3fe7d4</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGyroBiasStateCovariance</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a80ed57a9d225e60f78796e4ef0ba1666</anchor>
      <arglist>(const Matrix3 &amp;covMat, unsigned imuNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGyroBiasInitCovarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a329656db3d8f6d9482fc134f63872a8a</anchor>
      <arglist>(const Matrix3 &amp;covMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGyroBiasProcessCovariance</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2a804750de44046461a36ca0945b6b03</anchor>
      <arglist>(const Matrix3 &amp;covMat, unsigned imuNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnmodeledWrenchStateCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa1d061385fe31a16d8431cccf4dcb862</anchor>
      <arglist>(const Matrix6 &amp;newCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnmodeledWrenchInitCovMatDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0fb6210efd7795b903b1239bc025bcf9</anchor>
      <arglist>(const Matrix6 &amp;initCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnmodeledWrenchProcessCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad57d742346c8cf18f06da7ad7f94215f</anchor>
      <arglist>(const Matrix6 &amp;processCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactStateCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>afae452ae5dfbcbaf7065c5dac5da39a9</anchor>
      <arglist>(int contactNbr, const Matrix12 &amp;contactCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactInitCovMatDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad04cec958c6cd4902d19dcc4e165277b</anchor>
      <arglist>(const Matrix12 &amp;contactCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactProcessCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7b084250f7227a3e8165f8aaeee5d6a7</anchor>
      <arglist>(int contactNbr, const Matrix12 &amp;contactCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStateCovarianceMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a80e62fdf1546cd38f8b9565df4b23dbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStateKinematicsCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ac2b34c985202e867e4c095a77df9bda1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStateGyroBiasCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae6e4d0ff3128aabbf2ac9bf5c58d4c4e</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStateUnmodeledWrenchCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a61195b56dc60742a859b085aa602ad02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStateContactsCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aee9418c311833165a0a403024f24f235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStateContactCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1ee12fad0d735ea05e786a6c4529ec85</anchor>
      <arglist>(unsigned contactNbr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessCovarianceMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a44d8206140b21d6f90d730cecc15d746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessKinematicsCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1591b9c049655186d505f23e5916597f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessGyroBiasCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a132fc40a2b324c7a89d6a36d61d399ee</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessUnmodeledWrenchCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a45047c8c1338a3a4a5210511ab0337aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessContactsCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aebb78302078e9b6c5407b38ecdb6a3b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessContactCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1dabb6588ebc226b67d9e3fbf85ec1d3</anchor>
      <arglist>(unsigned contactNbr)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a750c98e03356378703614a1ff3ee7a01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a91fcb39776180723b39584558fbed523</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>getStateCovarianceMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa9cdf0d5d21b9c188462b3527ca08d0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateCovarianceMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a11453bc8202e3ae279de472db6d8f968</anchor>
      <arglist>(const Matrix &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcessNoiseCovarianceMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8cc674176cad5ff755fbcf2aa14b26eb</anchor>
      <arglist>(const Matrix &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getCurrentStateVector</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a45559a8dd5560c1a6ea7020d5b29686a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getStateVectorTimeIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a79c80955bc7df3f874c210077489f194</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateVector</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0d06e4e8dc9276cb20737b06de36b589</anchor>
      <arglist>(const Vector &amp;newvalue, bool resetCovariance=true)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getMeasurementVector</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0d07b7028dd67f71a91e1d7c83462c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>kineIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a68016b6606d7d6bccc66eec08a82071d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>posIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a97f5f53c7857d40773c67f40cd23a9ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>oriIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1ba031e18492077f99ea3bb2112093ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>linVelIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a86d633eda94e8cdde450a0ccaf62c565</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>angVelIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae3da8fc87ba3fdb4c9c6337b4027b7be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>gyroBiasIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a823ba5d8e23260e812f3aee65b6b0ff7</anchor>
      <arglist>(unsigned IMUNumber) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>unmodeledWrenchIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa4034a1771e3944e3162061dfde7fac3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>unmodeledForceIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a44d0824abe09397ab308d803bc6f7923</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>unmodeledTorqueIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aebd963bc6f93f10139b1c889de9bedff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactsIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a44bdb256259ca9b9a76f7e54f62d8961</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5d0699e6048a1d769c2b4d5fa5da0477</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactKineIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2e19e26e8198c2b299d175514217e5fc</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactPosIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a828939b202bec19028ce517d88a45324</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactOriIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2232d6a2a68e38cdf600edc89fae2208</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactForceIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a65551d416c6a28a9abc8401d71930b65</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactTorqueIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae79e757a6485c6eb0df762c07f99debf</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactWrenchIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad1cbdddb5bd32373df99e9016b991acc</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>kineIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad55aeb5c48e73ce5a3a4041fb6f5407a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>posIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8169e8a4d14890cb2c2cc206d717db03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>oriIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a34ffda7bca35000011c121aa7c7ca278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>linVelIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a77ea1d843e7e1662ab57cb0fb13ee932</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>angVelIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ab0e4adf1a51b82cacbbba6b0ac9c2e0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>gyroBiasIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aab25bb3fb7e13789bbd10175c857aac1</anchor>
      <arglist>(unsigned IMUNumber) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>unmodeledWrenchIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2c67162f444fe582562c608a3850a9db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>unmodeledForceIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a91659cb31b5b189fa5b528e1dc7c49bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>unmodeledTorqueIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ac22c76c121dae50370ab6b7660c20119</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactsIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae53ef37dcaf7bf71a6a4e7c8e54f1500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a37af9fb41c2fee9a8e2da71b946b416c</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactKineIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a4bd53a90c271869377dc8c75541fc9c0</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactPosIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7993deef757cc35e46d4c8c5b15f55c6</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactOriIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a12aa585f377632fb5d6d7cd7db5f8516</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactForceIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae13367671655f3545c21c77aa7cf4c37</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactTorqueIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad4ba6766155aaf367d047212abfda7f9</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactWrenchIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0759fa0b9f877ee44272857328ee03a6</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>const ExtendedKalmanFilter &amp;</type>
      <name>getEKF</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8f214b73b90c5f81cbf5b667d0d21f42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ExtendedKalmanFilter &amp;</type>
      <name>getEKF</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ab10fc6ffe045b8bdc95b77a59c0d1fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>stateSum</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a4e22520151df3a19b668d5a9df674ec3</anchor>
      <arglist>(const Vector &amp;stateVector, const Vector &amp;tangentVector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stateSum</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ac177256e61a9926c1c68d168d0f0479f</anchor>
      <arglist>(const Vector &amp;stateVector, const Vector &amp;tangentVector, Vector &amp;sum)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>stateDifference</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a39caef1d9086022659b1419ff4f5e624</anchor>
      <arglist>(const Vector &amp;stateVector1, const Vector &amp;stateVector2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stateDifference</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7d4b85c98cabbd6b950d0b669e554044</anchor>
      <arglist>(const Vector &amp;stateVector1, const Vector &amp;stateVector2, Vector &amp;difference)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>measurementDifference</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0149a8911125a13bb659dc9aad4593ee</anchor>
      <arglist>(const Vector &amp;measureVector1, const Vector &amp;measureVector2, Vector &amp;difference)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>useFiniteDifferencesJacobians</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a369298bc2d344452308e0e03803037ee</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFiniteDifferenceStep</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a33d750b5859142bb84a0d31366a90230</anchor>
      <arglist>(const Vector &amp;dx)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeAcceleroSignal</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a071758083bc0686c9f52f766acf8d0f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeGyroSignal</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a3aa6055acdc3cf1cfe33377935ee603c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeIMUSignal</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aec3fa327eb133758a80a379459121a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizePos</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8357b71c1bc17a80ab8a8d1d0b1f89f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeOri</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>adf783ecc05f1630a943679f76e586ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeOriTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8ca70955c02d541b752e8eef6a3ca141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeLinVel</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae66c14b8435d74b879e2a1808d6e139c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeAngVel</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a4b367a21aaebd680cf7a2eb0345a05d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeGyroBias</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>afd17459cece62282b8eb3ea7f8f55754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeForce</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0fdfc45480276ab087a9d44b87d5ebc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeTorque</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a38846351c6a3270059531174bf4ac83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeWrench</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7d8bd00a87164f56bbec2443e8df2e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeStateKine</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2fda2ab3ab2a06e08b3ea929dd58bc82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeStateBase</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa1c1e8b592a005f85a53814519da59fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeStateKineTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a65a8e49a9c5f73c09ed88c53a36143d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeStateTangentBase</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a9a0c6a21dc52c16a4675940f02c217cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizePose</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a96491e4be6efac5f8bd81947f7478d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizePoseTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ab59f05c106450ae3fce9178527b55f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeContactKine</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a4fb8be29f8674de77eadedc65250ebf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeContactKineTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad245da444e11afce1082498e55f8b278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeContact</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>abe7cbfdd477c7b4c0c9d559b60cf0883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>sizeContactTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa296f1b1c8a22888cf9ba023c16a4cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Kinematics::Flags::Byte</type>
      <name>flagsStateKine</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a48fcac5913167edb5c9dcd0c331df392</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Kinematics::Flags::Byte</type>
      <name>flagsContactKine</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad681f3e3667e01b1edcc69eb2544aab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Kinematics::Flags::Byte</type>
      <name>flagsPoseKine</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1fec295c33ef553f2828e80b58d02aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Kinematics::Flags::Byte</type>
      <name>flagsIMUKine</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa70fdc30b807b40e03484d54c439e534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>defaultMass</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae09bf8ea1e2f0ac0be22ecd37476813f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>statePoseInitVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a32b3333f99bae3a22839ad72df79c6fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>stateOriInitVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a179d2cafbd54e100c0b909e3fb29b253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>stateLinVelInitVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae89eae0a43033023b3bd0f67e147b6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>stateAngVelInitVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a06406d92f120fed088bf7a0f491572c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>gyroBiasInitVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ab660b462166310445233b4f51341d78d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>unmodeledWrenchInitVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a15d92687800f1929e9da7698c41295b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>contactForceInitVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a054da06c93eba4e2744b0e7fb13e5d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>contactTorqueInitVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a507bbe2813159887db48fe10f4b62975</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>statePoseProcessVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a65572ad6159fa4d901d558cf27df5ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>stateOriProcessVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7313f4edc90dcbb23f84f0a7c5234e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>stateLinVelProcessVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5eb41f94e3c49e5c4107f481dec2a85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>stateAngVelProcessVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ab3f04c32836e10d7781c263236311598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>gyroBiasProcessVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5dda101eacaa36db4ec8919a4333f3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>unmodeledWrenchProcessVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a72888a5c0e9c00a39c20cc300e30f539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>contactPositionProcessVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0b2f7a5bc6a569f2eebe12126c9ab1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>contactOrientationProcessVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>af1e3054fc58faef4f7f0bbbbffdb4e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>contactForceProcessVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1e707e4fa7e5cd6b6537b4ff423339bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>contactTorqueProcessVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a98959e61c81c0dec909e9b178bbe9bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>acceleroVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a4b4dfcbae8029303d71d970d3a4cdd0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>gyroVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a09caa8f5a8f9cfeb27d37f663896d10f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>forceSensorVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a9d2bc3b3e4fe35500aa012f4e22cf728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>torqueSensorVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7143393fbf357b12d55019d7c709e56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>positionSensorVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a26fa5fa3bb0ec18755f84a36e452ed23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>orientationSensorVarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad6338d67ebdbd011d2bdf4c59681e564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>linearStiffnessDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a10c55161f805a988d5628f12d49f90af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>angularStiffnessDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a9d418c059422f4aaaa12ce1c6136e3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>linearDampingDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aec3e5c41c366bb3a3c09bf7c8ed5cd5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>angularDampingDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aca467cb0ef3af834698b62c274e15fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; IMU, Eigen::aligned_allocator&lt; IMU &gt; &gt;</type>
      <name>VectorIMU</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ac91a585d6c701a4e07d562508cc4dc23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>VectorIMU::iterator</type>
      <name>VectorIMUIterator</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aec5447a4e7346a3c6418984f0bf5a9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>VectorIMU::const_iterator</type>
      <name>VectorIMUConstIterator</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a6b10ac6affe44d01d57aabff995fed32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Contact, Eigen::aligned_allocator&lt; Contact &gt; &gt;</type>
      <name>VectorContact</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a831acc8b0c077414ddffb920c50255f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>VectorContact::iterator</type>
      <name>VectorContactIterator</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a576306736e666ee847be6da7d5f9ae21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>VectorContact::const_iterator</type>
      <name>VectorContactConstIterator</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a6ce742fa953a8fd1ae58732f2df3d6f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Vector</type>
      <name>stateDynamics</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa79a80f857783a725b23f531e195dc5c</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Vector</type>
      <name>measureDynamics</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a16488779955da60ce11648b492941ff9</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addUnmodeledAndContactWrench_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae92891481da2668a4f912b7f4ccf3796</anchor>
      <arglist>(const Vector &amp;stateVector, Vector3 &amp;force, Vector3 &amp;torque)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeAccelerations_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8e1eade6d4e9259c749a6e961fab55f1</anchor>
      <arglist>(Kinematics &amp;stateKine, const Vector3 &amp;totalForceLocal, const Vector3 &amp;totalMomentLocal, Vector3 &amp;linAcc, Vector3 &amp;angAcc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeContactForces_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a72ab860dc7ec86c091bb106e7a48d9da</anchor>
      <arglist>(VectorContactIterator i, Kinematics &amp;stateKine, Kinematics &amp;contactPose, Vector3 &amp;Force, Vector3 torque)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setProcessNoise</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a58a318f6bf52208257d3d780d3f0ce7f</anchor>
      <arglist>(NoiseBase *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resetProcessNoise</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2ede2d4556bd1b2ae944b7ce70407d77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual NoiseBase *</type>
      <name>getProcessNoise</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a581e410b2f8443c4812a03d632a6691f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a32fc1d65a82e1a3b4936542bda6c0e49</anchor>
      <arglist>(NoiseBase *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resetMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a9a17fbe2cdc7875770ef9633e32f3505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual NoiseBase *</type>
      <name>getMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a04834694a4fed3ee47a85855d19f6edd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a71d4dd2c26dc1ce98e26f76815586504</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vector</type>
      <name>stateNaNCorrection_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8202057bc4c62b8bcfcafa8aafd2c221</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateKine_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>afdf8f1ea001fa5e316e242e456fde9e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startNewIteration_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a9a62cd488ec29f63b0990936f28ad9e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>computeAMatrix_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae320b36a7de0c4bf6860a0dcf0bc3aca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>computeCMatrix_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a11c9bf2828c8329965bc1102494676a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ac0df99db8ee606b5ca44f4484b21626e</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactKineIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>af10eddf4d579149b98402b4a7d8e4f04</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactPosIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>afa2bff7b427867501937d059b4d2899e</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactOriIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae56a807cee138c0b38c9f9b77138a0fa</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactForceIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5ed67550fdf88161b9b0ee03bd37180e</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactTorqueIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0d7c359bc736804e2920c2259232c6d5</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactWrenchIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ac2b3b893c01b79d95a26fa0dffb994fa</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a08951e97d824067f6288379acb02e04a</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactKineIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad5298f1c23b1ddf42cdde3402f3af884</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactPosIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae83e6de6c7736a9cff4c28d0bba0b209</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactOriIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a83a7502f88a2f70f01d061318a019e46</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactForceIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a66bf2f8d09df53e9072de6acd2596306</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactTorqueIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae6a952ced2c59896198e94f023420165</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>contactWrenchIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8c399caa988314764b91de65825b774e</anchor>
      <arglist>(VectorContactConstIterator i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>maxContacts_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae234a817e8bbb6c97b2d6aca58ce5468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>maxImuNumber_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>adfcf9d3a0c0eb1a6adf0b222effd753e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AbsolutePoseSensor</type>
      <name>absPoseSensor_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ac5beffb0de8640ae6d9713843ba58004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorContact</type>
      <name>contacts_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2d2b349aa8da8499616255ba2532c03e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorIMU</type>
      <name>imuSensors_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aeec92b6c8c73e61c17c47e26aff2c6f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>stateSize_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7586f3fbeddad6bf765b74560cc95420</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>stateTangentSize_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>acc32641058de413cda3ee2621dadb9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>measurementSize_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa3de7bb7b43271b634eb2ee32c25208d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>measurementTangentSize_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5db9f347e19b2a7a26c9db988e03cc42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Kinematics</type>
      <name>stateKinematics_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a398555f36c8a0fb125a2aeeb9e3ed7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>stateVector_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0876dde2df9edefa313ce4890721906a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>stateVectorDx_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a888424435a5586ffe898ef31bfca3720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>oldStateVector_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>acecdd05772357e998375614404353d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>additionalForce_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae6ccd6e09022b17f9bd0c499cc712812</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>additionalTorque_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2ee120cfb2c66ef46d407f16a8acc8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>measurementVector_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a9642c0076bc11cb498e8ad4a3946a876</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>measurementCovMatrix_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>abb499196602e2390aea97c1d850f6610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stateObservation::ExtendedKalmanFilter</type>
      <name>ekf_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aab5983c5cadf95f0ab7b57114fcdfc02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finiteDifferencesJacobians_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7350477214ecf070ccd148280473cfb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withGyroBias_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8d060e50775d5e641f51422a5f234512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withUnmodeledWrench_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>acd20f8b0bccfee1140f5047945a16f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withAccelerationEstimation_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a9234c9dcc04451d7a03b218a53eb0798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedVector3</type>
      <name>com_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a6655e9459b0867028a6a37310ae9e169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedVector3</type>
      <name>comd_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a3c70b015ee568dd2485cc9f626c6aec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedVector3</type>
      <name>comdd_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8491a2d7a7e33444e611780636064cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedVector3</type>
      <name>sigma_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>afbe07cb91817ef5ee5b04b8b3e895557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedVector3</type>
      <name>sigmad_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a33848facee7bce25bc2fe5d5f700efe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedMatrix3</type>
      <name>I_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a3bf35f0f331cb6099ed694d5c8ff39e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedMatrix3</type>
      <name>Id_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>afa22723de0a990597e931178e813d88d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeIndex</type>
      <name>k_est_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a926b86ec877e92d0e1444e7308b3f4b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeIndex</type>
      <name>k_data_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a6aafabd875254fad554f4d1082bb56e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mass_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a71edd22103895279266fce2093364dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1746ffcc56f556c046e5fd8fadea6b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NoiseBase *</type>
      <name>processNoise_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ac44a7fdb276e7a8e13ca513226b496fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NoiseBase *</type>
      <name>measurementNoise_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2f1432189e7f3197b2d4295960040204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numberOfContactRealSensors_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>afcca520b8bf434a4dfa9df180f2e104d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>currentIMUSensorNumber_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a37a5d789a5747334276da790c5bf8c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>linearStiffnessMatDefault_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a75978e9568b4091f81cfe9b27a1efb7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>angularStiffnessMatDefault_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aad0a2aba4e4d21ef3ba7fdf3a3ef4770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>linearDampingMatDefault_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ac26518a30ef0ad5caf8c3363ad6b0680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>angularDampingMatDefault_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>af6fe6ac5555cb5fc4a66aed523f51773</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>acceleroCovMatDefault_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>af2507b82f139bcfef5841b6afa0c21e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>gyroCovMatDefault_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aaee6504243791ce0327a154c9d2d4fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix6</type>
      <name>contactWrenchSensorCovMatDefault_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad19fc397d835d9b174698e865a6235a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix6</type>
      <name>absPoseSensorCovMatDefault_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5a048ea34ab07c68be90a7690d1587e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>statePosInitCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ab1e52ecb274fe5fb8a21315ed329ca7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>stateOriInitCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a6d2abe59f7f2a79a7a7e4512211450f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>stateLinVelInitCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a4469d5a383b3ff590be8931941c52944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>stateAngVelInitCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5a1ceaf430fb38063405ad2415644ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>gyroBiasInitCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a14b6ffb580f7ec956aab2ba3bea88823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix6</type>
      <name>unmodeledWrenchInitCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0ca6d2ce36f951291d27e74ff8a7e033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix12</type>
      <name>contactInitCovMatDefault_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aac551a74114eeb14bbe35ffb501d83fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>statePosProcessCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a4b843978f2df8754421930defff76d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>stateOriProcessCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1d3de7e99dfbe608782f37efcf91dea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>stateLinVelProcessCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa311b8797250eda6cf4a83c8f0206ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>stateAngVelProcessCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a55d296f8b5abfc3640d810891c9c18e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>gyroBiasProcessCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a98efd8d2673c46e397861c1327166863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix6</type>
      <name>unmodeledWrenchProcessCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aadadc1db3ae8fda6c38bb60b272c1a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>contactPositionProcessCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2cc85e4a4bc3a128748f90fb9c1f983e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>contactOrientationProcessCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ade68150441cc90d4317bb411725312db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>contactForceProcessCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a124208e5731023a34ea9d2bf3353b3c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>contactTorqueProcessCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5cd8f59782c211bce00fbd183b891015</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix12</type>
      <name>contactProcessCovMatDefault_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8291a66d40a05afb4faa31b787665ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix12</type>
      <name>stateKinematicsInitCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae7ef020b3c8b50a4198b481f0e748407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix12</type>
      <name>stateKinematicsProcessCovMat_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad738bce1eca92b84d0799f4066796154</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct stateObservation::KineticsObserver::Opt</type>
      <name>opt_</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>af4cc1ff1bf561dcd3a360fb69d9a7826</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>defaultdx</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad44df5789cd1f5ba9e4eeee3f982028e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KineticsObserver</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aec7484db4ddd0162eb68859a20f1a262</anchor>
      <arglist>(unsigned maxContacts=4, unsigned maxNumberOfIMU=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KineticsObserver</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ab40d2d2098265a7290fc07ebbf659999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSamplingTime</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>afc8a39279ca77d1fbabacdbd7fdf27e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSamplingTime</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>abee9ef3ee969c4c798acb1cca89045ee</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWithUnmodeledWrench</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad60981afaa1763ed9bae9a5d55f97324</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWithAccelerationEstimation</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7d9d8b542a69720a446d8ea94eb29b2a</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWithGyroBias</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a66163ba4361292ed0834277c387f2f4f</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMass</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8550033497c0fab9b369560ff76fc99c</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setIMU</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>adc8e9d45b1d49cab2927a4b449e0fe86</anchor>
      <arglist>(const Vector3 &amp;accelero, const Vector3 &amp;gyrometer, const Kinematics &amp;localKine, int num=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setIMU</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aff77c307b4406539fe6d428a0368d3c9</anchor>
      <arglist>(const Vector3 &amp;accelero, const Vector3 &amp;gyrometer, const Matrix3 &amp;acceleroCov, const Matrix3 &amp;gyroCov, const Kinematics &amp;localKine, int num=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIMUDefaultCovarianceMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae6427334e2bab3d0fb4e71e4869f8924</anchor>
      <arglist>(const Matrix3 &amp;acceleroCov, const Matrix3 &amp;gyroCov)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsolutePoseSensor</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a6e7319be5ec9c8a0220c9f3988e04c37</anchor>
      <arglist>(const Kinematics &amp;measurement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsolutePoseSensor</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aab364172525077f784a38da9ceca36fc</anchor>
      <arglist>(const Kinematics &amp;measurement, const Matrix6 &amp;CovarianceMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsolutePoseSensorDefaultCovarianceMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a6c6ab8c2d69a377aa1d17450a90522dc</anchor>
      <arglist>(const Matrix6 &amp;covMat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addContact</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a49ae40515187bfd3e499d1874a217e78</anchor>
      <arglist>(const Kinematics &amp;pose, const Vector6 &amp;contactWrench, const Matrix12 &amp;initialCovarianceMatrix, const Matrix12 &amp;processCovarianceMatrix, int contactNumber=-1, const Matrix3 &amp;linearStiffness=Matrix3::Constant(-1), const Matrix3 &amp;linearDamping=Matrix3::Constant(-1), const Matrix3 &amp;angularStiffness=Matrix3::Constant(-1), const Matrix3 &amp;angularDamping=Matrix3::Constant(-1))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addContact</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2a4947ab391d218df4b3d1a83ff0c514</anchor>
      <arglist>(const Kinematics &amp;pose, const Vector6 &amp;contactWrench=Vector6::Zero(), int contactNumber=-1, const Matrix3 &amp;linearStiffness=Matrix3::Constant(-1), const Matrix3 &amp;linearDamping=Matrix3::Constant(-1), const Matrix3 &amp;angularStiffness=Matrix3::Constant(-1), const Matrix3 &amp;angularDamping=Matrix3::Constant(-1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeContact</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a641f46549197908377f4a99ffbfa222f</anchor>
      <arglist>(int contactnbr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearContacts</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a74e15a200f6f1ffbdfc98a5b90b5b86d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumberOfContacts</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae35787d65f5dc05134583e69df5219e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>getListOfContacts</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a6a4390efd69d87cfecb902632cbac9a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContactWithNoSensor</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a50f01ae14f10b27cb3cedb2fe9fb96e3</anchor>
      <arglist>(const Kinematics &amp;localKine, unsigned contactNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContactWithWrenchSensor</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1ccba0bf1c2eee918960f2d84d1660e0</anchor>
      <arglist>(const Vector6 &amp;wrenchMeasurement, const Kinematics &amp;localKine, unsigned contactNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateContactWithWrenchSensor</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a312fc277c9e3a0691319b2ffba964dd2</anchor>
      <arglist>(const Vector6 &amp;wrenchMeasurement, const Matrix6 &amp;wrenchCovMatrix, const Kinematics &amp;localKine, unsigned contactNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactWrenchSensorDefaultCovarianceMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a561e85770d1655172b957e4ca58e5d81</anchor>
      <arglist>(const Matrix6 &amp;wrenchSensorCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenterOfMass</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>af800bd6eb4302dc3e286c230a51f8ae6</anchor>
      <arglist>(const Vector3 &amp;com, const Vector3 &amp;com_dot, const Vector3 &amp;com_dot_dot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenterOfMass</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2e9816060c9a9f833caf7e8a7a019038</anchor>
      <arglist>(const Vector3 &amp;com, const Vector3 &amp;com_dot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenterOfMass</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2903a426527b0e5c3fb2172defb2fce4</anchor>
      <arglist>(const Vector3 &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInertiaMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad505de6db32f5b13ebf8f918a417b972</anchor>
      <arglist>(const Matrix3 &amp;I, const Matrix3 &amp;I_dot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInertiaMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7922b3e7e7e83fa61d6a315780998104</anchor>
      <arglist>(const Matrix3 &amp;I)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInertiaMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1862b7b808fd215a51da29cd49f5ec83</anchor>
      <arglist>(const Vector6 &amp;I, const Vector6 &amp;I_dot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInertiaMatrix</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ada193357139506c3c20ae1282ddbeeb7</anchor>
      <arglist>(const Vector6 &amp;I)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularMomentum</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>abc0b3240acc8a33fb799bf188c3335aa</anchor>
      <arglist>(const Vector3 &amp;sigma, const Vector3 &amp;sigma_dot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularMomentum</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad4e3e2a4203097b48ffe0e9d1663740d</anchor>
      <arglist>(const Vector3 &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdditionalWrench</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae9432871c1193d4f5a66cf15d57a989d</anchor>
      <arglist>(const Vector3 &amp;force, const Vector3 &amp;torque)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>update</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a373403115258327bb90292ebef64f826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Kinematics</type>
      <name>getKinematics</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aaa3d8d81cb5d1fcb229d1ef2b6728cf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Kinematics</type>
      <name>estimateAccelerations</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a63b05bb6a677a721934ac36482bb06aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Kinematics</type>
      <name>getKinematicsOf</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad4fe22873b11bdd0f58774f6d06f3c27</anchor>
      <arglist>(const Kinematics &amp;localKinematics) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>getContactWrench</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a04b06c56803d5bf0c5a04f5098dbee26</anchor>
      <arglist>(int contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>Kinematics</type>
      <name>getContactPosition</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa8b4a6e675021fe371b74b184bf753d9</anchor>
      <arglist>(int contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>getUnmodeledWrench</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a27df12db6e8362ef7cf9b4223392b804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateKinematics</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa03c960d6f4ee0b78635ab2378cdf4bd</anchor>
      <arglist>(const Kinematics &amp;kine, bool resetContactWrenches=true, bool resetCovariance=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGyroBias</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a9bd0e12a1a0337aa0ad326460ac26423</anchor>
      <arglist>(const Vector3 &amp;, unsigned numberOfIMU=1, bool resetCovariance=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateUnmodeledWrench</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a67f1fe20864cdb26fa91ba39d8c577eb</anchor>
      <arglist>(const Vector6 &amp;, bool resetCovariance=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSensorsDefaultCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ab53a59a4e560de909e0c89202c3ddb47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetInputs</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5e066c733993fd2c225d4bb57c23e9a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKinematicsStateCovariance</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae6f6d32dbe766814f5359c74e5bb28f2</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKinematicsInitCovarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5a71929f3d6878a1151de07e81987bf6</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKinematicsProcessCovariance</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a914ed34a954e062f75644b109b3fe7d4</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGyroBiasStateCovariance</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a80ed57a9d225e60f78796e4ef0ba1666</anchor>
      <arglist>(const Matrix3 &amp;covMat, unsigned imuNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGyroBiasInitCovarianceDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a329656db3d8f6d9482fc134f63872a8a</anchor>
      <arglist>(const Matrix3 &amp;covMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGyroBiasProcessCovariance</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2a804750de44046461a36ca0945b6b03</anchor>
      <arglist>(const Matrix3 &amp;covMat, unsigned imuNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnmodeledWrenchStateCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa1d061385fe31a16d8431cccf4dcb862</anchor>
      <arglist>(const Matrix6 &amp;newCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnmodeledWrenchInitCovMatDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0fb6210efd7795b903b1239bc025bcf9</anchor>
      <arglist>(const Matrix6 &amp;initCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnmodeledWrenchProcessCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad57d742346c8cf18f06da7ad7f94215f</anchor>
      <arglist>(const Matrix6 &amp;processCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactStateCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>afae452ae5dfbcbaf7065c5dac5da39a9</anchor>
      <arglist>(int contactNbr, const Matrix12 &amp;contactCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactInitCovMatDefault</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad04cec958c6cd4902d19dcc4e165277b</anchor>
      <arglist>(const Matrix12 &amp;contactCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactProcessCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7b084250f7227a3e8165f8aaeee5d6a7</anchor>
      <arglist>(int contactNbr, const Matrix12 &amp;contactCovMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStateCovarianceMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a80e62fdf1546cd38f8b9565df4b23dbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStateKinematicsCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ac2b34c985202e867e4c095a77df9bda1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStateGyroBiasCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae6e4d0ff3128aabbf2ac9bf5c58d4c4e</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStateUnmodeledWrenchCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a61195b56dc60742a859b085aa602ad02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStateContactsCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aee9418c311833165a0a403024f24f235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStateContactCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1ee12fad0d735ea05e786a6c4529ec85</anchor>
      <arglist>(unsigned contactNbr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessCovarianceMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a44d8206140b21d6f90d730cecc15d746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessKinematicsCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1591b9c049655186d505f23e5916597f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessGyroBiasCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a132fc40a2b324c7a89d6a36d61d399ee</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessUnmodeledWrenchCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a45047c8c1338a3a4a5210511ab0337aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessContactsCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aebb78302078e9b6c5407b38ecdb6a3b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessContactCovMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1dabb6588ebc226b67d9e3fbf85ec1d3</anchor>
      <arglist>(unsigned contactNbr)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a750c98e03356378703614a1ff3ee7a01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a91fcb39776180723b39584558fbed523</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>getStateCovarianceMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa9cdf0d5d21b9c188462b3527ca08d0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateCovarianceMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a11453bc8202e3ae279de472db6d8f968</anchor>
      <arglist>(const Matrix &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcessNoiseCovarianceMat</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8cc674176cad5ff755fbcf2aa14b26eb</anchor>
      <arglist>(const Matrix &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getCurrentStateVector</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a45559a8dd5560c1a6ea7020d5b29686a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TimeIndex</type>
      <name>getStateVectorTimeIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a79c80955bc7df3f874c210077489f194</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateVector</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0d06e4e8dc9276cb20737b06de36b589</anchor>
      <arglist>(const Vector &amp;newvalue, bool resetCovariance=true)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getMeasurementVector</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0d07b7028dd67f71a91e1d7c83462c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>kineIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a68016b6606d7d6bccc66eec08a82071d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>posIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a97f5f53c7857d40773c67f40cd23a9ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>oriIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a1ba031e18492077f99ea3bb2112093ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>linVelIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a86d633eda94e8cdde450a0ccaf62c565</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>angVelIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae3da8fc87ba3fdb4c9c6337b4027b7be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>gyroBiasIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a823ba5d8e23260e812f3aee65b6b0ff7</anchor>
      <arglist>(unsigned IMUNumber) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>unmodeledWrenchIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aa4034a1771e3944e3162061dfde7fac3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>unmodeledForceIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a44d0824abe09397ab308d803bc6f7923</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>unmodeledTorqueIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aebd963bc6f93f10139b1c889de9bedff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactsIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a44bdb256259ca9b9a76f7e54f62d8961</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a5d0699e6048a1d769c2b4d5fa5da0477</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactKineIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2e19e26e8198c2b299d175514217e5fc</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactPosIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a828939b202bec19028ce517d88a45324</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactOriIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2232d6a2a68e38cdf600edc89fae2208</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactForceIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a65551d416c6a28a9abc8401d71930b65</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactTorqueIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae79e757a6485c6eb0df762c07f99debf</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactWrenchIndex</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad1cbdddb5bd32373df99e9016b991acc</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>kineIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad55aeb5c48e73ce5a3a4041fb6f5407a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>posIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8169e8a4d14890cb2c2cc206d717db03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>oriIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a34ffda7bca35000011c121aa7c7ca278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>linVelIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a77ea1d843e7e1662ab57cb0fb13ee932</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>angVelIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ab0e4adf1a51b82cacbbba6b0ac9c2e0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>gyroBiasIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>aab25bb3fb7e13789bbd10175c857aac1</anchor>
      <arglist>(unsigned IMUNumber) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>unmodeledWrenchIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a2c67162f444fe582562c608a3850a9db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>unmodeledForceIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a91659cb31b5b189fa5b528e1dc7c49bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>unmodeledTorqueIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ac22c76c121dae50370ab6b7660c20119</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactsIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae53ef37dcaf7bf71a6a4e7c8e54f1500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a37af9fb41c2fee9a8e2da71b946b416c</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactKineIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a4bd53a90c271869377dc8c75541fc9c0</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactPosIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7993deef757cc35e46d4c8c5b15f55c6</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactOriIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a12aa585f377632fb5d6d7cd7db5f8516</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactForceIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ae13367671655f3545c21c77aa7cf4c37</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactTorqueIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ad4ba6766155aaf367d047212abfda7f9</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>contactWrenchIndexTangent</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0759fa0b9f877ee44272857328ee03a6</anchor>
      <arglist>(unsigned contactNbr) const</arglist>
    </member>
    <member kind="function">
      <type>const ExtendedKalmanFilter &amp;</type>
      <name>getEKF</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a8f214b73b90c5f81cbf5b667d0d21f42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ExtendedKalmanFilter &amp;</type>
      <name>getEKF</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ab10fc6ffe045b8bdc95b77a59c0d1fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>stateSum</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a4e22520151df3a19b668d5a9df674ec3</anchor>
      <arglist>(const Vector &amp;stateVector, const Vector &amp;tangentVector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stateSum</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>ac177256e61a9926c1c68d168d0f0479f</anchor>
      <arglist>(const Vector &amp;stateVector, const Vector &amp;tangentVector, Vector &amp;sum)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>stateDifference</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a39caef1d9086022659b1419ff4f5e624</anchor>
      <arglist>(const Vector &amp;stateVector1, const Vector &amp;stateVector2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stateDifference</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a7d4b85c98cabbd6b950d0b669e554044</anchor>
      <arglist>(const Vector &amp;stateVector1, const Vector &amp;stateVector2, Vector &amp;difference)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>measurementDifference</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a0149a8911125a13bb659dc9aad4593ee</anchor>
      <arglist>(const Vector &amp;measureVector1, const Vector &amp;measureVector2, Vector &amp;difference)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>useFiniteDifferencesJacobians</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a369298bc2d344452308e0e03803037ee</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFiniteDifferenceStep</name>
      <anchorfile>classstateObservation_1_1KineticsObserver.html</anchorfile>
      <anchor>a33d750b5859142bb84a0d31366a90230</anchor>
      <arglist>(const Vector &amp;dx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::algorithm::LinearAcceleration</name>
    <filename>classstateObservation_1_1algorithm_1_1LinearAcceleration.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearAcceleration</name>
      <anchorfile>classstateObservation_1_1algorithm_1_1LinearAcceleration.html</anchorfile>
      <anchor>afeac98b86e1fab664297717e08ac0019</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>accelerationMeasure</name>
      <anchorfile>classstateObservation_1_1algorithm_1_1LinearAcceleration.html</anchorfile>
      <anchor>ad913b81fe3401bf8c9cec718d49b5d5e</anchor>
      <arglist>(const Vector3 &amp;acceleration, const Matrix3 &amp;orientation) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::LinearKalmanFilter</name>
    <filename>classstateObservation_1_1LinearKalmanFilter.html</filename>
    <base>stateObservation::KalmanFilterBase</base>
    <member kind="typedef">
      <type>Matrix</type>
      <name>Bmatrix</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>aa0941cd45b2840cf53ebeac7fc97da7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix</type>
      <name>Dmatrix</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>ad661cfa34bd5af85ec70f0b20547acb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearKalmanFilter</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a3e4b176b7fde8d67ff566b29c0a90b2b</anchor>
      <arglist>(Index n, Index m, Index p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearKalmanFilter</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>aa494bf9f92610de27cff5da4640cc8d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setB</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a1743750c081a1814ab0f618e2294be9d</anchor>
      <arglist>(const Bmatrix &amp;B)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearB</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a3b37193ee06c7652e79a114d08e3cacd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setD</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a0c8dbbb69e25ee8855b700abaadbd514</anchor>
      <arglist>(const Dmatrix &amp;D)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearD</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a60d41b56c1580e39fcf29e06cdf9d2e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Bmatrix</type>
      <name>getBmatrixConstant</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>ac52184f4919101a0ca85442eead5ef7d</anchor>
      <arglist>(double c) const</arglist>
    </member>
    <member kind="function">
      <type>Bmatrix</type>
      <name>getBmatrixRandom</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a60889d14b0158a119571493c59c2098c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Bmatrix</type>
      <name>getBmatrixZero</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a4adf10723e0de9533a9135ee6c74b887</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBmatrix</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>ac09ed27251e64a04e7ded1cabda84101</anchor>
      <arglist>(const Bmatrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Dmatrix</type>
      <name>getDmatrixConstant</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a325b1c033bda33b4e6a3f5bce15e6d5b</anchor>
      <arglist>(double c) const</arglist>
    </member>
    <member kind="function">
      <type>Dmatrix</type>
      <name>getDmatrixRandom</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a4545e426d51e26efcee517c38df5c947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Dmatrix</type>
      <name>getDmatrixZero</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a7a78bad3994b74e207f23632b3418502</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkDmatrix</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a3b6c6da2e3c9af6ee7a14883010a9e16</anchor>
      <arglist>(const Dmatrix &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateSize</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a8dee6b40f29ebf73d002634808401618</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasureSize</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a65e1124224f753231201e938b520620a</anchor>
      <arglist>(Index m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInputSize</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>aa729d19bdf6ff34ba2e74b0fc8f5f354</anchor>
      <arglist>(Index p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual StateVector</type>
      <name>prediction_</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a737f9da00dab905575abf1256489d0fc</anchor>
      <arglist>(TimeIndex k)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MeasureVector</type>
      <name>simulateSensor_</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>ab101e1e2bd0f93072b99290f23a81c3f</anchor>
      <arglist>(const StateVector &amp;x, TimeIndex k)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>d_</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>a1a0446468e7972218e14427d9cb45972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>b_</name>
      <anchorfile>classstateObservation_1_1LinearKalmanFilter.html</anchorfile>
      <anchor>af81ee626839283e30e3c3ad676dc2fb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::LipmDcmEstimator</name>
    <filename>classstateObservation_1_1LipmDcmEstimator.html</filename>
    <member kind="function">
      <type></type>
      <name>LipmDcmEstimator</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a49fafb3c0024689d8e2b1601594bab1b</anchor>
      <arglist>(double dt=defaultDt_, double omega_0=defaultOmega_, double biasDriftPerSecondStd=defaultBiasDriftSecond, double dcmMeasureErrorStd=defaultDcmErrorStd, double zmpMeasureErrorStd=defaultZmpErrorStd, const Vector2 &amp;biasLimit=Vector2::Constant(defaultBiasLimit), const Vector2 &amp;initZMP=Vector2::Zero(), const Vector2 &amp;initDcm=Vector2::Zero(), const Vector2 &amp;initBias=Vector2::Zero(), const Vector2 &amp;initDcmUncertainty=Vector2::Constant(defaultDCMUncertainty), const Vector2 &amp;initBiasUncertainty=Vector2::Constant(defaultBiasUncertainty))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWithMeasurements</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>aad7d1818135ddc01c0916f6a1492df9e</anchor>
      <arglist>(const Vector2 &amp;measuredDcm, const Vector2 &amp;measuredZMP, const Matrix2 &amp;yaw=Matrix2::Identity(), bool measurementIsWithBias=true, const Vector2 &amp;initBias=Vector2::Constant(0), const Vector2 &amp;initBiasuncertainty=Vector2::Constant(defaultBiasUncertainty))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWithMeasurements</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a19a7ef4788b0053ef3c0109da2146bd6</anchor>
      <arglist>(const Vector2 &amp;measuredDcm, const Vector2 &amp;measuredZMP, double yaw=0, bool measurementIsWithBias=true, const Vector2 &amp;initBias=Vector2::Constant(0), const Vector2 &amp;initBiasuncertainty=Vector2::Constant(defaultBiasUncertainty))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWithMeasurements</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a549d1051089ae5c4a7cea60dd792c6ee</anchor>
      <arglist>(const Vector2 &amp;measuredDcm, const Vector2 &amp;measuredZMP, const Matrix3 &amp;rotation=Matrix3::Identity(), bool measurementIsWithBias=true, const Vector2 &amp;initBias=Vector2::Constant(0), const Vector2 &amp;initBiasuncertainty=Vector2::Constant(defaultBiasUncertainty))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LipmDcmEstimator</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a0aab05e32946eca2e9d1835ed52ad843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLipmNaturalFrequency</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a04f7c7370e6a59a92523d4702fafc085</anchor>
      <arglist>(double omega_0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLipmNaturalFrequency</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a30095e8f4ae2c5b3f17efd9ea1356518</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSamplingTime</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>ad9a6f4ad1b0a200a6d15c90a1571c34c</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBias</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a04b7daae60c99cce87a710f1f709af36</anchor>
      <arglist>(const Vector2 &amp;bias)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBias</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a8e966c0123c5b43f4cfdde9b2fb54ada</anchor>
      <arglist>(const Vector2 &amp;bias, const Vector2 &amp;uncertainty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBiasDriftPerSecond</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>aec28cf795e263efa979abcc8a83ffef2</anchor>
      <arglist>(double driftPerSecond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBiasLimit</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a2bf92e58acf90a4a42586948b38c51ff</anchor>
      <arglist>(const Vector2 &amp;biasLimit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnbiasedDCM</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a640427fcc761bd0a10589fcfe189f625</anchor>
      <arglist>(const Vector2 &amp;dcm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnbiasedDCM</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>aac7867055759498ed18b0f027d28657c</anchor>
      <arglist>(const Vector2 &amp;dcm, const Vector2 &amp;uncertainty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZmpMeasureErrorStd</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a04c5b303c5642400fc6e755528b76ff1</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDcmMeasureErrorStd</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>ac210d2da44f32fff79a168bdd16f46f1</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputs</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a6a39f5798c227a32d1d3e8b9ee6542f1</anchor>
      <arglist>(const Vector2 &amp;dcm, const Vector2 &amp;zmp, const Matrix3 &amp;orientation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputs</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>aee01649b9effc170a634567e24f2378c</anchor>
      <arglist>(const Vector2 &amp;dcm, const Vector2 &amp;zmp, double yaw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputs</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>af9f77ca3d4a24f66ada4d2fce47fc2ff</anchor>
      <arglist>(const Vector2 &amp;dcm, const Vector2 &amp;zmp, const Matrix2 &amp;R=Matrix2::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a7d3fcd850381898ba967c6648c92e331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>getUnbiasedDCM</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a611dcf321d538eaff1549ac30d3bfe0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>getBias</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a94137e160e2982ab585014b72e16dd77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>getLocalBias</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a4848ed30da6861fce5177cee5cf33fad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinearKalmanFilter &amp;</type>
      <name>getFilter</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a8510d03d76364ef94cf8cebe1675760f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinearKalmanFilter &amp;</type>
      <name>getFilter</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>ac9502abad4ac3c39c801f73e04bf2bd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultBiasDriftSecond</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>aca4b8a063ed910dfdd130a8096e6ac48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultZmpErrorStd</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a04ff1ef91c85e8e6a19be5a5ccb4efb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultDcmErrorStd</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>acc385cf319b05c342efaecb3a50797ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultDCMUncertainty</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a8ad8886adb2b05e432594cc3b575e9c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultBiasUncertainty</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a20a867177a0c39d57c05e1a4d44ee8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultBiasLimit</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a0936bb9cda37ce3ab22d8ac242cfd181</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, 4, 2 &gt;</type>
      <name>Matrix42</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a82e718a2bc5fa4a5f6ba12d53511588d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, 2, 4 &gt;</type>
      <name>Matrix24</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a0cefb5056fbc51b5c41bcf8d0c4d0343</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateMatricesABQ_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a919fae24c0b9d43469933ea38bfb99ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix2</type>
      <name>Vec2ToSqDiag_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a8535bd156c5c32fde6b275b418d793e4</anchor>
      <arglist>(const Vector2 &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix2</type>
      <name>dblToDiag_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a4b8961666c025882c63aa22e355230b1</anchor>
      <arglist>(const double &amp;d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix2</type>
      <name>dblToSqDiag_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a1a7758e6421ecec4814d0440c9117f77</anchor>
      <arglist>(const double &amp;d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>omega0_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a8fb32043a1c422f7924e41b7d2355092</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a51bf691d586aeb46afe1b31504f2419e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>biasDriftStd_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>ad241df8fa0470fc39d845980a5554359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>zmpErrorStd_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a26ea6c69c201a61985f5c1c987943ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2</type>
      <name>previousZmp_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a96c3fbd123699e12345f4c99fcb8a29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2</type>
      <name>biasLimit_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a44fe9b76cf5f2f3f0f7eaf16f769c908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearKalmanFilter</type>
      <name>filter_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a69a34435a159522642f022270139c476</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix4</type>
      <name>A_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a2f8478729bec86f11978148b5c0581b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix42</type>
      <name>B_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a4adb287bfc48e622cebc5eca217833f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix24</type>
      <name>C_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a29461894cbc14d7a12fc5a3fb9f6c62f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix2</type>
      <name>R_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a96c4e61184031014b48213abde9f9816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix4</type>
      <name>Q_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a3d37c23836d259b96c1b3a10d313cbcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix2</type>
      <name>previousOrientation_</name>
      <anchorfile>classstateObservation_1_1LipmDcmEstimator.html</anchorfile>
      <anchor>a13a73d472c1e2a8c9d018fceaf7a5a98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::tools::Logger::log_s</name>
    <filename>structstateObservation_1_1tools_1_1Logger_1_1log__s.html</filename>
    <member kind="function">
      <type></type>
      <name>log_s</name>
      <anchorfile>structstateObservation_1_1tools_1_1Logger_1_1log__s.html</anchorfile>
      <anchor>a66db745b1ec90c8f1f928fb9f29194e0</anchor>
      <arglist>(const std::string &amp;newfilename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>structstateObservation_1_1tools_1_1Logger_1_1log__s.html</anchorfile>
      <anchor>a2b02286a9d73564916b0f0443d268bfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>IndexedMatrixArray</type>
      <name>array</name>
      <anchorfile>structstateObservation_1_1tools_1_1Logger_1_1log__s.html</anchorfile>
      <anchor>ac4bfefe0cd1a6f5798b98ecc61d7333d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>filename</name>
      <anchorfile>structstateObservation_1_1tools_1_1Logger_1_1log__s.html</anchorfile>
      <anchor>a767d2d5b8c2c670591481de8f2b247b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::type_info *</type>
      <name>type</name>
      <anchorfile>structstateObservation_1_1tools_1_1Logger_1_1log__s.html</anchorfile>
      <anchor>a049c5a17a77156cf53bbc8a6e4e97be8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::tools::Logger</name>
    <filename>classstateObservation_1_1tools_1_1Logger.html</filename>
    <class kind="struct">stateObservation::tools::Logger::log_s</class>
    <member kind="function">
      <type></type>
      <name>Logger</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>afaa7de5eaa626e4d705a6f131a834a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Logger</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a63181ca20f72d4b93d00cda4e2ff7e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a15e9e595b93a30a14058e12129f1bca7</anchor>
      <arglist>(const T *address, const std::string &amp;filename=std::string(&quot;&quot;))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a891e4131e02b976511b4a91c6f8d5a1a</anchor>
      <arglist>(const T &amp;reference, const std::string &amp;filename=std::string(&quot;&quot;))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAddress</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>af930457b6e7ab52e2438c583739f54bc</anchor>
      <arglist>(const void *oldAddress, const T *newAddress)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a584ccf59d89bc3e5d225662582dae6a1</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a50f1c56f0f5a07709eafe3da1e4ab263</anchor>
      <arglist>(const T &amp;reference)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>ab1d8704a0442054817aec3e2504fa046</anchor>
      <arglist>(const T *address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a1c8fa27196dbdec3802d580f9da549ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndexedMatrixArray &amp;</type>
      <name>getRecord</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a67a2cda5fac1b061850b03aa62e035a4</anchor>
      <arglist>(const void *address) const</arglist>
    </member>
    <member kind="function">
      <type>IndexedMatrixArray &amp;</type>
      <name>getRecord</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a8c6c9b78406d4466fe63a9f8b18be9c7</anchor>
      <arglist>(const void *address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a8a59bb43264c1e309ba4728e14cc2a08</anchor>
      <arglist>(bool clear=false, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearTracking</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a7a78b92553616f03b2bdb48733a6cf5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearLogs</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a93a32172cd58183e7adfebb1b2427488</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; const void *, log_s &gt;</type>
      <name>Tmap</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a7fa4b3b3d81f26f9c0f4d129ded08577</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; const void *, log_s &gt;</type>
      <name>Tpair</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a67be233c0640d7fe5403643863390d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update_</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a72189cf042e081bc3149e9ebe34bdb12</anchor>
      <arglist>(const Tmap::iterator &amp;i)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>path_</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>abc5ec0ac8de26cef206af6c37666d6fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; const void *, log_s &gt;</type>
      <name>logs_</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>a0b90acefd3179df6e6e7d3c26350e1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>scalar_</name>
      <anchorfile>classstateObservation_1_1tools_1_1Logger.html</anchorfile>
      <anchor>ab87de2d1ab57bc927f626381bc07ec49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::algorithm::MagneticField</name>
    <filename>classstateObservation_1_1algorithm_1_1MagneticField.html</filename>
    <member kind="function">
      <type></type>
      <name>MagneticField</name>
      <anchorfile>classstateObservation_1_1algorithm_1_1MagneticField.html</anchorfile>
      <anchor>a47c35698ff5d6f45835e97fb12060b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MagneticField</name>
      <anchorfile>classstateObservation_1_1algorithm_1_1MagneticField.html</anchorfile>
      <anchor>a378b9f529095319af8d55aadc7cdf319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>magneticFieldMeasure</name>
      <anchorfile>classstateObservation_1_1algorithm_1_1MagneticField.html</anchorfile>
      <anchor>a9fd2cdc1e302cb99e6ca077699d76dbd</anchor>
      <arglist>(const Matrix3 &amp;orientation) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::MatrixType</name>
    <filename>structstateObservation_1_1MatrixType.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>stateObservation::flexibilityEstimation::ModelBaseEKFFlexEstimatorIMU</name>
    <filename>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</filename>
    <base>stateObservation::flexibilityEstimation::EKFFlexibilityEstimatorBase</base>
    <class kind="struct">stateObservation::flexibilityEstimation::ModelBaseEKFFlexEstimatorIMU::contactModel</class>
    <class kind="struct">stateObservation::flexibilityEstimation::ModelBaseEKFFlexEstimatorIMU::optimization</class>
    <member kind="function">
      <type></type>
      <name>ModelBaseEKFFlexEstimatorIMU</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>af57cdd245937f3dd1b6e32f7f08a6118</anchor>
      <arglist>(double dt=0.005)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ModelBaseEKFFlexEstimatorIMU</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a032e32fd69244f76d4caa5f355d90cfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactsNumber</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a82d4a645512e7c1283c0ff728984d507</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getContactsNumber</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a936a387038204bd874fb6110500e6ac8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IMUElasticLocalFrameDynamicalSystem</type>
      <name>getFunctor</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a30fc730f69328e281bcf51d5135723b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::Vector</type>
      <name>computeAccelerations</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a0022d1b7965d947a2e035364d4f25b6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactModel</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a941bf11a14b5fc623d5a67b91352ac33</anchor>
      <arglist>(unsigned nb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurement</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ab8d60113a7e1f97431f67e10529f9f1c</anchor>
      <arglist>(const Vector &amp;y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProcessNoiseCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a71e7c12582edcca20853d16c0ca0bcc0</anchor>
      <arglist>(const Matrix &amp;Q)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementNoiseCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a6109ee054135ae7bce11f256e5147c3e</anchor>
      <arglist>(const Matrix &amp;R)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getProcessNoiseCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a62eeac903e5942adeaaf5372df042097</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getMeasurementNoiseCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a769e674b693558aebc32d4337023b5c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getMomentaDotFromForces</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>abb8eaba73a832c2004d17d7deb8fdff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getMomentaDotFromKinematics</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a6c4be115293baae5360e1aa3b675a7e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>getForcesAndMoments</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>acfe6c27a575e9fc0a5fcd15080dc8e77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::Vector</type>
      <name>getStateCovariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a83c0bbd8db946416368e1f93f2f79f74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setComBiasGuess</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a80e6ba95f8bd3ff3a8f5191bfb42e8b8</anchor>
      <arglist>(const stateObservation::Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFlexibilityGuess</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a4893e989477eccddb10bc0d1760802a7</anchor>
      <arglist>(const Matrix &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix4</type>
      <name>getFlexibility</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a2826b03775226cfe28d9f9ca63ca2f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector &amp;</type>
      <name>getFlexibilityVector</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a07700504fe6f191a68170d2f2ad57dd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::Matrix &amp;</type>
      <name>computeLocalObservationMatrix</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a8367d9e739faef8d9e3ac5ebee68a3f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::Matrix</type>
      <name>getAMatrix</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a1726dc60398247a199148f866b6d5206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::Matrix</type>
      <name>getCMatrix</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ae44c10195ac71bfa96ff0eec7ebe33de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a863cc57db62f3a912241d2bd0e750217</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a175fff2fe9c8d5103f7e0442e8fc3f3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a532deed3f091df3c7a7f31e2d069bfb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWithForcesMeasurements</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a9f1a09aa13a83bce77a21bebc26b4ae8</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWithForcesMeasurements</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>aa33d896f12092fc5552f722b6a82e8d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWithAbsolutePos</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a345c75e752a369e072dca71317d5bff4</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWithUnmodeledForces</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ac7f2eb1645ba8d423c6c477a151cbe66</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWithUnmodeledForces</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a52d15dbd194dbd6f5318aee5ffe1af4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWithAbsolutePos</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ac3563410196e75c35853f95721e83f7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWithComBias</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a4540302ec4af496197da81949814e48f</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getWithComBias</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a7e7e2af902db86899c17e227784e0a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnmodeledForceVariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>af7d31f0466c02f05591771a7a1e96024</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnmodeledForceProcessVariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ae7aba74c1bfde4d00bfb1b2c569e7e98</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setForceVariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>afe7146070686955ded4a2bcd8267e12b</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setForceVariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a654fc5bd176f485c4afe37dd62414a49</anchor>
      <arglist>(const Matrix3 &amp;C)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAbsolutePosVariance</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a4dd628f919d2b7f4c58ced33a857ac98</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSamplingPeriod</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ae177a61ee996554c684037c8e94416bc</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOn</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a3bbb34903c37c85bddacd7b02735e757</anchor>
      <arglist>(bool &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKfe</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>af7b924e3b57f1c682e6a13dbcda87056</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKfv</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a46e2d872d3619c8f9afc7b4175d36ae5</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKte</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ad95286b7dd67ce7ea2ab576cbd43fde0</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKtv</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a0ee703ae9154ada337db0b92af493aba</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKfeRopes</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a4d578c57ebeb379f941eac3f467ad933</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKfvRopes</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>aaa6cad9d186f6da23b87ed28b8b0809f</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKteRopes</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a4996d00280f81d772ea7c24908f409fe</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKtvRopes</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a415ad7e6176a7f9621c6a61a0750723d</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPe</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a22ffa7f87bf7f4bb97cc17bb2e6f0600</anchor>
      <arglist>(const stateObservation::Vector3 &amp;Pe)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getKfe</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a3d7145c8729c18b5d56b2ef2540d8f45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getKfv</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a73fe7d31fe7d0cde29fb32b3b04fc8e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getKte</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a3c2e52f7ae55cb5c932aeaa3b67f4a06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>getKtv</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a14839ea3bd950721a01a8f0456f02625</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetCovarianceMatrices</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a09a3471e029dbea0b4213db398b3e4f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetStateCovarianceMatrix</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>aa5f77c7e70ce4b6d978f0d58d363fac8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRobotMass</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>af1833019549f49b1341b15327109aed4</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRobotMass</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ac47c6feae13be3c65d1fe5bb0c114be8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorquesLimit</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a8554491a91b8a8b0c90264ff989960f8</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForcesLimit</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a276d9c6a2388f103799af2503ce703f2</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::Vector3</type>
      <name>getForcesLimit</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a6fd58b6297cc15065e0706308c0299f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::Vector3</type>
      <name>getTorquesLimit</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a445d5093216b7c74b7cd5af0633943c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimitOn</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a757d2824a6a2004f28f87b0eff9f4876</anchor>
      <arglist>(const bool &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getLimitOn</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a770821a45f6c42435856f91b6cb1c45c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>getDefaultQ</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a1f7b298fef515b330b9247aa70e075e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix6</type>
      <name>getDefaultRIMU</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ac51765b366dd44380d962efed7a22a1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMeasurementCovarianceMatrix_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a22321b7e3de0f58791bc37a805a3f1e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IMUElasticLocalFrameDynamicalSystem</type>
      <name>functor_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ac2169e3269a625904648dcd386c4319d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>x_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ac2824012beb3d34b303457f33e38018a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>R_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ae60c7dce31462625d1b8cce88b415ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>Q_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a2a0a3fa4a44a6d15080bd85c30bd0552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>P_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>aa9e0eb3440ffcb0edd00ad5e504197d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Index</type>
      <name>stateSize_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a303bb4aaf30a0a12e75fcf8892c64588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>inputSize_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>aab80823540b6ec43f8a9b34ed4808fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a4eae1a1b99382185231c98d422d3994d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>on_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a4446992867d74277199a93b3ea6b6dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>unmodeledForceVariance_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>aac01ac16ae1770597efbad9f6ff694c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>forceVariance_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>aca27381bb5572aa75cdb967eb4fef788</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>absPosVariance_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a24043504059505f6fcf92cfe6ffdd931</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useFTSensors_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>af2bb2665c4614944770d288c4174f3c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withAbsolutePos_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a4ce0c14eeb057fe09e72cdfb76554eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withComBias_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>aca440b563410476e1612c65bee361847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>withUnmodeledForces_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a773246b94bf7b85c0d6504cdc4d3fd82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>limitTorques_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a1086226dd0981fade41eef2cdcb1eb92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>limitForces_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>aa2f4cd43e0059e1ca054c5bae9886fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>limitOn_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>ab3f2e54f6832e9263ef61c0f9643193b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct stateObservation::flexibilityEstimation::ModelBaseEKFFlexEstimatorIMU::optimization</type>
      <name>op_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a5cb585d474f5bf176e8500cfb6a31d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>measurementSizeBase_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a2f9d226f475ff99e3f42905334c9f10b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>inputSizeBase_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU.html</anchorfile>
      <anchor>a442f857ca7033d7e3dff17d994fdabb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::NoiseBase</name>
    <filename>classstateObservation_1_1NoiseBase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NoiseBase</name>
      <anchorfile>classstateObservation_1_1NoiseBase.html</anchorfile>
      <anchor>afd47658282dae6265a1ddd41b262b06e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>getNoisy</name>
      <anchorfile>classstateObservation_1_1NoiseBase.html</anchorfile>
      <anchor>a4be13a755c2147e7619e51ee93e6f7d8</anchor>
      <arglist>(const Vector &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::ObserverBase</name>
    <filename>classstateObservation_1_1ObserverBase.html</filename>
    <member kind="typedef">
      <type>Vector</type>
      <name>StateVector</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a1f4384e4ec12cd4da2dc984688e345c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector</type>
      <name>MeasureVector</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>abf28d39d18e070f71bac67695f39e867</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector</type>
      <name>InputVector</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a5149fd55bc16be4b9b8727854940db74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObserverBase</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>aa937a38361b807f4d1fca6d79d9cc73f</anchor>
      <arglist>(Index n, Index m, Index p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObserverBase</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a63edca8f6eb7df4af113e0ee534cde94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObserverBase</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a4e6e83453223086b348fde29cca652ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateSize</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>ad83492986c66c60bb742161d049bc559</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>af4615bbfca2ea0291f89581463022777</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasureSize</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>aeb0b07ddd9b801f7586d2b42adab593b</anchor>
      <arglist>(Index m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasureSize</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a33a84875bcb68696e54130f3a21ccbc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInputSize</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a7d28f6d0f3fb3d377db32a20b0a2682f</anchor>
      <arglist>(Index p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a97bf85204bfd97ffcfd0cac730ca284c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a24848c36ce5ef81cfc41bb73dfc333ed</anchor>
      <arglist>(const StateVector &amp;x_k, TimeIndex k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clearStates</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>af3bf1ad7553fa8eb65eebdb44094be6a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMeasurement</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>aa393736477ffce4ef0a9346e9e13f716</anchor>
      <arglist>(const MeasureVector &amp;y_k, TimeIndex k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clearMeasurements</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a6e6e9eafdab389ce38df62a2117d5971</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setInput</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a68bc8743b35449b8622491ee9cca26a0</anchor>
      <arglist>(const InputVector &amp;x_k, TimeIndex k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clearInputs</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a19e967116e8f1cd9ecb7fba0b1fe3df8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearInputsAndMeasurements</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>adb8cd5d6ccae65ae5ff001666ad1349c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StateVector</type>
      <name>getEstimatedState</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>ac7225dcb514c42ca51e1af4b71c1cbea</anchor>
      <arglist>(TimeIndex k)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a61f765c9e126e21f14f70f05ab56e02b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateVector</type>
      <name>stateVectorConstant</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a6dc5c870bbd655ade60fdd5843e983f7</anchor>
      <arglist>(double c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateVector</type>
      <name>stateVectorRandom</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a57784dd6e8312fb2cb32f75eb6139900</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateVector</type>
      <name>stateVectorZero</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a037fa3c55b2976a30a21ceb2327d5e29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkStateVector</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>ab2085a4e7015ae141c82dc17f2dedaf6</anchor>
      <arglist>(const StateVector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MeasureVector</type>
      <name>measureVectorConstant</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>acb7f162d19c25deb2c408906f476eadd</anchor>
      <arglist>(double c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MeasureVector</type>
      <name>measureVectorRandom</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>adde4d6536411455c7d157fa4af79e888</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MeasureVector</type>
      <name>measureVectorZero</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a2ab81f29d82227e9ab412af9073998e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMeasureVector</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a93a5ce8acdf83772080fd7929ff53af4</anchor>
      <arglist>(const MeasureVector &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InputVector</type>
      <name>inputVectorConstant</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>aa3ddeb50150d36eb99822fcf146d3711</anchor>
      <arglist>(double c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InputVector</type>
      <name>inputVectorRandom</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a497ad2bde0d0cf65762603ee73195f04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InputVector</type>
      <name>inputVectorZero</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a8e1c76e1a7bd7a8296e78a6668eb6860</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkInputVector</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a9ca0d6719a6a4056a71c0b73e3c8a383</anchor>
      <arglist>(const InputVector &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>n_</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>aaca1412cabd5d5ba82af27a6c11dd785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>m_</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>ad44535d044d6bf6e9637b86c52ab8720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>p_</name>
      <anchorfile>classstateObservation_1_1ObserverBase.html</anchorfile>
      <anchor>a0ab2de4a694d2ef3e28b687c1a65579b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::KineticsObserver::Opt</name>
    <filename>structstateObservation_1_1KineticsObserver_1_1Opt.html</filename>
    <member kind="function">
      <type></type>
      <name>Opt</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Opt.html</anchorfile>
      <anchor>a4cefc680edfa1f020a4bf8b00b440be7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Kinematics</type>
      <name>kine1</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Opt.html</anchorfile>
      <anchor>a4da82a2a0bed16e1270569eab0ed81ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Kinematics</type>
      <name>kine2</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Opt.html</anchorfile>
      <anchor>ab7b24f1c27dd240e8274c79edf7f7ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Kinematics &amp;</type>
      <name>kine</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Opt.html</anchorfile>
      <anchor>a1bfc601632bb123de5c5d15303818faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Orientation &amp;</type>
      <name>ori</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Opt.html</anchorfile>
      <anchor>a4986f18fcdeaa27c3088a06b6633ee6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Orientation &amp;</type>
      <name>ori1</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Opt.html</anchorfile>
      <anchor>afa4466c5cf3d192fdee7ff9f035f5142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Orientation &amp;</type>
      <name>ori2</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Opt.html</anchorfile>
      <anchor>a21dd3adb2c7f9c7b95f955d55a79598f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::IMUMltpctiveDynamicalSystem::opt</name>
    <filename>structstateObservation_1_1IMUMltpctiveDynamicalSystem_1_1opt.html</filename>
    <member kind="function">
      <type></type>
      <name>opt</name>
      <anchorfile>structstateObservation_1_1IMUMltpctiveDynamicalSystem_1_1opt.html</anchorfile>
      <anchor>afd576eb878cff6e2be56dba84226d34a</anchor>
      <arglist>(int stateSize, int measurementSize)</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>jRR</name>
      <anchorfile>structstateObservation_1_1IMUMltpctiveDynamicalSystem_1_1opt.html</anchorfile>
      <anchor>a29681ae5720fc184b7bad7b79a50bed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>jRv</name>
      <anchorfile>structstateObservation_1_1IMUMltpctiveDynamicalSystem_1_1opt.html</anchorfile>
      <anchor>a7969dcc078bd88efc93ea7a08cf23133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>deltaR</name>
      <anchorfile>structstateObservation_1_1IMUMltpctiveDynamicalSystem_1_1opt.html</anchorfile>
      <anchor>ae9d481f1ac2ebc1437c27c023c7b3bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>AJacobian</name>
      <anchorfile>structstateObservation_1_1IMUMltpctiveDynamicalSystem_1_1opt.html</anchorfile>
      <anchor>a783ce8d67779ae781e1ec84c19cee37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>CJacobian</name>
      <anchorfile>structstateObservation_1_1IMUMltpctiveDynamicalSystem_1_1opt.html</anchorfile>
      <anchor>ac82a47e51b3bc593c56bb8655af12cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>Rt</name>
      <anchorfile>structstateObservation_1_1IMUMltpctiveDynamicalSystem_1_1opt.html</anchorfile>
      <anchor>ad03997b757f7397eaebcf04dc0f93a62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::flexibilityEstimation::ModelBaseEKFFlexEstimatorIMU::optimization</name>
    <filename>structstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU_1_1optimization.html</filename>
    <member kind="variable">
      <type>stateObservation::Matrix</type>
      <name>O</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU_1_1optimization.html</anchorfile>
      <anchor>ac0d648586befc0c83d72dd8a161d5d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>stateObservation::Matrix</type>
      <name>CA</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1ModelBaseEKFFlexEstimatorIMU_1_1optimization.html</anchorfile>
      <anchor>a31c259f13d67cbd6a513ef09e19d8257</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::Optimization</name>
    <filename>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</filename>
    <member kind="function">
      <type></type>
      <name>Optimization</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a21f490cbfcf822a114aaa2c4efd2699d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector3 &amp;</type>
      <name>orientationVector</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>aac93624a17aadddbc49f10b5ba9544f0</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3 &amp;</type>
      <name>curRotation</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>abfc998e975cd002fce0e59b4ec287068</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="variable">
      <type>Vector6</type>
      <name>momentaDot</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>abffbcd7f4786bc6be8f6f6efa7fa2c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW Vector3</type>
      <name>positionFlex</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a964d79b431a1a8418a91c77dcf4391d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>velocityFlex</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ad25152b930be694d57fd95074ad4c6e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>accelerationFlex</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ab0321b9d76ddc749fcc5c2be27362f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>orientationFlexV</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a0d6b5632acbaab78b5ac51ebbf55c797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>angularVelocityFlex</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a8cea687962621759707b6b37febabb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>angularAccelerationFlex</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>aa724bc51f3004cc6ad5ffced6dd8f879</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>positionComBias</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a2675119a052921bf071a878540c8686d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>rFlex</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a567181e1af262de76d9542ff76f8809f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>rFlexT</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>af7e0eeca1a9350fa7eef2d6839edaa06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>drift</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ab1585db4c7d4456dc36e8ac71f635b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>pdrift</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>aa2a1fffba9ebd71cff5eb7b64715ac6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>rdrift</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a863d45b6f04f215171e408d94f935fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cy</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ace51c2e9bdebabcb226723f282f98228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sy</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ab231bb2fefb9fe21f4b762826378f327</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngleAxis</type>
      <name>orientationAA</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a549580231e1f6b6221e8b623d0672573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>xk1</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a7258994e7a2b615a01e6a99e0d8d5651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>xk</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a1440cb34603c985cf28da1fd54ca9169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>xk1dx</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a0ecedd491e5d3c7477b3eb879df3e805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>xdx</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>aaf9442a05947bcde4c3431634e55a10f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>xk_fory</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a1d05f25bb1f1f042d38598af37b6da1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>yk</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a761e7051c39e6033429f1dd954aa1a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>ykdy</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a2df63f5393dd31b439af4331183ed8cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeIndex</type>
      <name>k_fory</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a8513e8b79d349b1d69a4a9196618e111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>orinertia</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a3d5dff09dde957d0a23dfa93ae9662f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LLTMatrix3</type>
      <name>invinertia</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>aa0c74b466067fbba763df7986fa72d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>rtotal</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a3053ca280aa5c716e30c99dc6761263e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>ptotal</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a6acafe03ad920091b01a2ea4fb201adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngleAxis</type>
      <name>aatotal</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ad1253cc682c9ecda38211d9c73860328</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>oritotal</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a6c909ed04a57a33e11b75c3369ad5320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>Jx</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a0caa4c69279e420c30042eba1c830a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>Jy</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a3a79c3212d214295890d6977f7308630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>rimu</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>acbbb4c41903c915cdb1a9546eaecfed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>imuAcc</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a9478f1588c8eb8820529b11228ffabca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>imuOmega</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a684e0ee10fcc1be53e35e710e0e372b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>sensorState</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ad41d5933abb60477a62221ccc4b25041</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>positionCom</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a8e8029cc823f553319bcbdc937652263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>velocityCom</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a6e80f7e3d114f8b30929d630ec306734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>accelerationCom</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>add9ae34f53c38188cf4e52aa8174293f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>AngMomentum</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>aa5398d89cd3f846ce7b61e400b59055b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>dotAngMomentum</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a3284f832edb1db7899717a6cb9b3f352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>positionControl</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a9a390bfcad9317156a1bbdc1c72bb2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>velocityControl</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ac2ff4608181b4c5d13447d4154384b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>accelerationControl</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ab0bea6645f22ffdb7201fb55ac5a3d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>orientationControlV</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a31f50b7fb2b6ca979350e46d7c567292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>angularVelocityControl</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a4d05dd6f4c9a776f21dfa83475fb8082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>rControl</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a59091a02f099a088229ef7b80be4e3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexedVectorArray</type>
      <name>contactPosV</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a82ada7750740b12e3696b01aba6694e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexedVectorArray</type>
      <name>contactOriV</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a74ba0a3aec1ea4a5eaaf5a5e7ac6ae34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexedVectorArray</type>
      <name>contactVelArray</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a700c42f70640a35031346dc527aedf2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexedVectorArray</type>
      <name>contactAngVelArray</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a46ba4e9a8401577d9dfee0b2619b341a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>inertia</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a27a1e4c410c3c7892a6a0c56cfa6e180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>dotInertia</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a77420f08e696fddc6e7c1a1ffb96945f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexedVectorArray</type>
      <name>efforts</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ab0fa3984f35bd77d93564543e83b24ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>f</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ae62029f85bfb90f05ea9c78f6cbe681a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>fi</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a099563add91f969fc85ad67d55260f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>t</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ae0aefcccb0a9b646b5c6f0f43a19811e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>fm</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a57133065c2f46ac34235caf30b4bc4ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>tm</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a1323c741a350b4637f3f8636e854fb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>linearAcceleration</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a4f62ee5d59438553fa3cb29d84c12bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>angularAcceleration</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a3522c0a7afdc4f6727da13d218cf3f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>vf</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>af5514bff38f02d446feda57834be52f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>vt</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>aeb12275d44a0b24bd01623e2dd11cfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>crosstempV</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a990d893e4ecf2923cabf57d09179ecaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>crosstempM</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ab895c592dadc1ce9dadf13a8bdba43b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>Rci</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a2d898fc67edc6a6afe54b409345f1670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>Rcit</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a036790316dc722292876238eca1451f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>contactPos</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a818fdcc1031139af9de6da233fa8eeca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>contactVel</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a31f38d9623ae2a0dbd430f4ede616ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>RciContactPos</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a17d3dff152c6a67ccb70367eb79c276b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>globalContactPos</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ae0d23d733c2aa5aa4994fecd909c5a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>Rt</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a385e0791680aaecd447cc5e71a079b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>forcei</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>aa77d56c0d6bf04be8c3d01b08d2fda2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>momenti</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a18b0406aefc0c30c1e665e757ddef2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>addForce</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a339dae2b92e7ebf3d63aa689acf95fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>addMoment</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a6b3fd3fb4fa29305a1e1660c86ff44ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>skewV</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a4c50a80a4ab5eb63ed27c41981262b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>skewV2</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a49bc8aea418acf15b483a90708d17480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>skewVR</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a4933cb49df65a2d7881c4e70953b8748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>skewV2R</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a206189d2e8e532bf29024b2f471ca32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>RIRT</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a35b84f846bfa4ad2525b58353b93df8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>wx2Rc</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a82921298fc23726e968950749256b470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>_2wxRv</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a6ea779470be45b804c2b23d1973920a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>Ra</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a8889dba94dd0e13f9b8f8760db2c8528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>Rc</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>ab3f18d24bda179843ed96c2989e817ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>Rcp</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a7153af8021815ce74edb992982216b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>curRotation0</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>abf7b981accd6ae8ee9b1ccee595982c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>orientationVector0</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a5a0c583e3aec45c160a3a5d5755c4cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>curRotation1</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a3315dc4a3b2d5ca9321230798975292d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>orientationVector1</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a0b5e3fe208b1406b20c78670731bc1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>curRotation2</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a03520380f5fb3888bc421ec1019dbdaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>orientationVector2</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a226693930986bb6c6f5d593989eee2d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>curRotation3</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a079bd0ce6beb9f6e5c731cb24b3c7e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>orientationVector3</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1Optimization.html</anchorfile>
      <anchor>a071e6280f4de9eccc8c2293449c891cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::ExtendedKalmanFilter::Optimization</name>
    <filename>structstateObservation_1_1ExtendedKalmanFilter_1_1Optimization.html</filename>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW ObserverBase::InputVector</type>
      <name>u_</name>
      <anchorfile>structstateObservation_1_1ExtendedKalmanFilter_1_1Optimization.html</anchorfile>
      <anchor>ae01890ceb77c27585e957944dd847b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KalmanFilterBase::Amatrix</type>
      <name>a_</name>
      <anchorfile>structstateObservation_1_1ExtendedKalmanFilter_1_1Optimization.html</anchorfile>
      <anchor>aae39b1d3c3893c96cfcd0286b6540db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KalmanFilterBase::Cmatrix</type>
      <name>c_</name>
      <anchorfile>structstateObservation_1_1ExtendedKalmanFilter_1_1Optimization.html</anchorfile>
      <anchor>ad43bf99b233b0ad553dd2874912e968a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ObserverBase::StateVector</type>
      <name>x_</name>
      <anchorfile>structstateObservation_1_1ExtendedKalmanFilter_1_1Optimization.html</anchorfile>
      <anchor>a739344546fb08659f35abec2f8b1fca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ObserverBase::StateVector</type>
      <name>dx_</name>
      <anchorfile>structstateObservation_1_1ExtendedKalmanFilter_1_1Optimization.html</anchorfile>
      <anchor>a5530e8a1d3337b00b84552438682572d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ObserverBase::StateVector</type>
      <name>xp_</name>
      <anchorfile>structstateObservation_1_1ExtendedKalmanFilter_1_1Optimization.html</anchorfile>
      <anchor>a8b342751706039d369f8536f7b653cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ObserverBase::MeasureVector</type>
      <name>yp_</name>
      <anchorfile>structstateObservation_1_1ExtendedKalmanFilter_1_1Optimization.html</anchorfile>
      <anchor>ae100734f224c2b34840e33938749affa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::KalmanFilterBase::optimizationContainer</name>
    <filename>structstateObservation_1_1KalmanFilterBase_1_1optimizationContainer.html</filename>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW Matrix</type>
      <name>pbar</name>
      <anchorfile>structstateObservation_1_1KalmanFilterBase_1_1optimizationContainer.html</anchorfile>
      <anchor>a95c27464217d6cf927363615209c6a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>xhat</name>
      <anchorfile>structstateObservation_1_1KalmanFilterBase_1_1optimizationContainer.html</anchorfile>
      <anchor>a6b1a903b5421be744ec4ad005522a547</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>inoMeas</name>
      <anchorfile>structstateObservation_1_1KalmanFilterBase_1_1optimizationContainer.html</anchorfile>
      <anchor>afe91a2cb99eb8e6257375b2983d78ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>inoMeasCov</name>
      <anchorfile>structstateObservation_1_1KalmanFilterBase_1_1optimizationContainer.html</anchorfile>
      <anchor>a94ebb13f67c2adcbeed6c9a61c10d396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>inoMeasCovInverse</name>
      <anchorfile>structstateObservation_1_1KalmanFilterBase_1_1optimizationContainer.html</anchorfile>
      <anchor>a4d995b460e6078eb732130ba0f28270f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LLTPMatrix</type>
      <name>inoMeasCovLLT</name>
      <anchorfile>structstateObservation_1_1KalmanFilterBase_1_1optimizationContainer.html</anchorfile>
      <anchor>a13c0b9c004e5d360c4e61fad5accf4de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>kGain</name>
      <anchorfile>structstateObservation_1_1KalmanFilterBase_1_1optimizationContainer.html</anchorfile>
      <anchor>a7b5ef00b5c828e4795715c3e26c82829</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>t</name>
      <anchorfile>structstateObservation_1_1KalmanFilterBase_1_1optimizationContainer.html</anchorfile>
      <anchor>a7e862893478a316d37d32c786f88ce53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>order1</name>
    <filename>classorder1.html</filename>
  </compound>
  <compound kind="class">
    <name>stateObservation::kine::Orientation</name>
    <filename>classstateObservation_1_1kine_1_1Orientation.html</filename>
    <member kind="function">
      <type></type>
      <name>Orientation</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a0b47730588e42010059ddc6c04e8f522</anchor>
      <arglist>(bool initialize=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Orientation</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a6dd8a977a014d6931480672c67bd4a0a</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Orientation</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>ae83ec8073f726efc852399ac4d690d4b</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Orientation</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a47efb107b73d2a842c11a2f0a0d9ce5f</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Orientation</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a542e5c23cb070dfc1a43f099ab2a0c0f</anchor>
      <arglist>(const AngleAxis &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Orientation</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a161df6c11cbff56c2442e2860f59fc65</anchor>
      <arglist>(const Quaternion &amp;q, const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Orientation</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>ac41023e87d944e552b86e9b5c2dc79bb</anchor>
      <arglist>(const double &amp;roll, const double &amp;pitch, const double &amp;yaw)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Orientation</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>adc0c2d72ab3f47ab16c1ad3287b8b344</anchor>
      <arglist>(const Orientation &amp;multiplier1, const Orientation &amp;multiplier2)</arglist>
    </member>
    <member kind="function">
      <type>Orientation &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>aede202e167569ac3b5fc98a3528e8cc2</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Orientation &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a6145c3e71ce330b105725b0357cb2ef0</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Orientation &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a4d9aa40ff415c789c71258abcfe2f794</anchor>
      <arglist>(const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Orientation &amp;</type>
      <name>operator=</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a974108303911db42ce72d772d4c1bc30</anchor>
      <arglist>(const AngleAxis &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>Orientation &amp;</type>
      <name>setValue</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>af3756b20577c7de7ea175fafbb916026</anchor>
      <arglist>(const Quaternion &amp;q, const Matrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Orientation &amp;</type>
      <name>fromVector4</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a2b7268a380f3abcbae274b4d7e89ded2</anchor>
      <arglist>(const Vector4 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Orientation &amp;</type>
      <name>setRandom</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>ae53d6484d365b6379c831b53b88bc59e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Orientation &amp;</type>
      <name>setZeroRotation</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>ada01e21079c6c974cb66c1a93975a2fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Orientation &amp;</type>
      <name>setZeroRotation</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>ab2ddd1129cd514fff97b8afa60db7e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3 &amp;</type>
      <name>toMatrix3</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a379f6965e80ce38659897d674ba873a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Quaternion &amp;</type>
      <name>toQuaternion</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a7d4f47d78aaf897d81a6ec8380100f27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Matrix3 &amp;</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a48d0c7653345dd36f21c7735b7d27b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Quaternion &amp;</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>ae527db219a38e8e8d169836d4a0c3d6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>toVector4</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a2feb49c5467ddf8f5a3cc97a8592e088</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>toRotationVector</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a8c23c0bc1862eabea982e2d84080ee99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>toRollPitchYaw</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>ac7f113b9390689ae3d7675ceb534e57d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis</type>
      <name>toAngleAxis</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a0805b24afe9a0dbc05858b1e64afaf9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>operator*</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>abb271698d392e67c83213925d49f9d7e</anchor>
      <arglist>(const Orientation &amp;R2) const</arglist>
    </member>
    <member kind="function">
      <type>const Orientation &amp;</type>
      <name>setToProductNoAlias</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a3964043fd4bc3a68b285d4ee1b8467eb</anchor>
      <arglist>(const Orientation &amp;R1, const Orientation &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>inverse</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a646ff5149dde1439e24df0679627eda2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Orientation &amp;</type>
      <name>integrate</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>ae82f88440eb0c6b8d1a2ce26b1e03002</anchor>
      <arglist>(Vector3 dt_x_omega)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>differentiate</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>ab13ad728aa393e8b0e9169e716a7cd7b</anchor>
      <arglist>(Orientation R_k1) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>operator*</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a71c7081947248dcebcd8c4fb47a45269</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a35d453bd78ff88e3fbb99007da56bdd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a28915092485c252bacf8859646d26ea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMatrixSet</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a7a32585a464a53febabebdfad3f636a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isQuaternionSet</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>ae77c280eb8b7766267f21b7ebb638245</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a271765bcecc81357dbaa358faf5bd824</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuaternion</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a3e3e79e808dba3844bf7d0740114dfd2</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>CheckedMatrix3 &amp;</type>
      <name>getMatrixRefUnsafe</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a1b4e887b17e8ad5f2bfdcd2c80f4c045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CheckedQuaternion &amp;</type>
      <name>getQuaternionRefUnsafe</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>aa6086d1c76532450603e70d0ebe6e1f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>synchronize</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a7264fb8bc4eb37a6284c2a5b78b991f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Orientation</type>
      <name>zeroRotation</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>aba2e5f6f33996c68299aca1028b29792</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Orientation</type>
      <name>randomRotation</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>ae52f09b017a281a126720abfce1f186d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a2e105d1e4de06465bfdf8345b3155bcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Matrix3 &amp;</type>
      <name>quaternionToMatrix_</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>aea621d175055a5d3b05ca7af9446d6c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Quaternion &amp;</type>
      <name>matrixToQuaternion_</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>ac08b4961fa135489dac9d5871fd26ace</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CheckedQuaternion</type>
      <name>q_</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>a496f9b46c94c0da2d948f06887a16f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CheckedMatrix3</type>
      <name>m_</name>
      <anchorfile>classstateObservation_1_1kine_1_1Orientation.html</anchorfile>
      <anchor>afc5d2e99b7aa0f80112664b8565abc8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::tools::ProbabilityLawSimulation</name>
    <filename>classstateObservation_1_1tools_1_1ProbabilityLawSimulation.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getGaussianScalar</name>
      <anchorfile>classstateObservation_1_1tools_1_1ProbabilityLawSimulation.html</anchorfile>
      <anchor>a17f714cb58c4db16af1b7658d8ad7908</anchor>
      <arglist>(double std=1, double bias=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Matrix&lt; double, BiasType::RowsAtCompileTime, BiasType::ColsAtCompileTime &gt;</type>
      <name>getGaussianMatrix</name>
      <anchorfile>classstateObservation_1_1tools_1_1ProbabilityLawSimulation.html</anchorfile>
      <anchor>ae497c622b7d4b3ca3f0351ad3f7a6c65</anchor>
      <arglist>(BiasType bias=Eigen::Matrix&lt; double, BiasType::RowsAtCompileTime, BiasType::ColsAtCompileTime &gt;::Zero(), StdType std=Eigen::Matrix&lt; double, BiasType::RowsAtCompileTime, BiasType::RowsAtCompileTime &gt;::Identity(), Index rows=Index(EigenType&lt; BiasType &gt;::type::RowsAtCompileTime), Index cols=Index(EigenType&lt; BiasType &gt;::type::ColsAtCompileTime))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getUniformScalar</name>
      <anchorfile>classstateObservation_1_1tools_1_1ProbabilityLawSimulation.html</anchorfile>
      <anchor>a12c10b1c2cc7d9c5d54ca557f6b02203</anchor>
      <arglist>(double min=-1., double max=1.)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixType&lt; ReturnType &gt;::type</type>
      <name>getUniformMatrix</name>
      <anchorfile>classstateObservation_1_1tools_1_1ProbabilityLawSimulation.html</anchorfile>
      <anchor>aa9ac5e9ca6d8a957eb119a7c6fd66e0b</anchor>
      <arglist>(Index rows=ReturnType::RowsAtCompileTime, Index cols=ReturnType::ColsAtCompileTime, double min=-1., double max=1.)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setSeed</name>
      <anchorfile>classstateObservation_1_1tools_1_1ProbabilityLawSimulation.html</anchorfile>
      <anchor>ab5f568d5391769914d6efd4ed81d0547</anchor>
      <arglist>(unsigned int seed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setRandomSeed</name>
      <anchorfile>classstateObservation_1_1tools_1_1ProbabilityLawSimulation.html</anchorfile>
      <anchor>a1695817aff578f7e57bfd4da8dfe6e5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProbabilityLawSimulation</name>
      <anchorfile>classstateObservation_1_1tools_1_1ProbabilityLawSimulation.html</anchorfile>
      <anchor>a1628f0868401ecdb5e3b34b71fa4234b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>defaultSeed_</name>
      <anchorfile>classstateObservation_1_1tools_1_1ProbabilityLawSimulation.html</anchorfile>
      <anchor>adfb2dd2d7dd40ad5f768150b57ba85f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::random_device</type>
      <name>rd_</name>
      <anchorfile>classstateObservation_1_1tools_1_1ProbabilityLawSimulation.html</anchorfile>
      <anchor>a32b5da03e32a303c4cd5676f94298e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::mt19937</type>
      <name>gen_</name>
      <anchorfile>classstateObservation_1_1tools_1_1ProbabilityLawSimulation.html</anchorfile>
      <anchor>a60b17e747f569fe28380fb2f0f627b6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::algorithm::RotationVelocity</name>
    <filename>classstateObservation_1_1algorithm_1_1RotationVelocity.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RotationVelocity</name>
      <anchorfile>classstateObservation_1_1algorithm_1_1RotationVelocity.html</anchorfile>
      <anchor>ac808c996a1f4cd4d6750b026589febc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>rotationVelocityMeasure</name>
      <anchorfile>classstateObservation_1_1algorithm_1_1RotationVelocity.html</anchorfile>
      <anchor>a0b2bf5391d5e967ad6901c72a33c7da4</anchor>
      <arglist>(const Vector3 &amp;angVelocityVector, const Matrix3 &amp;orientation) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::KineticsObserver::Sensor</name>
    <filename>structstateObservation_1_1KineticsObserver_1_1Sensor.html</filename>
    <member kind="function">
      <type></type>
      <name>Sensor</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Sensor.html</anchorfile>
      <anchor>adede7d1df13ad736ecfc1e80dc0b54e9</anchor>
      <arglist>(int signalSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Sensor</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Sensor.html</anchorfile>
      <anchor>a525fae46e949c03d4f4be161df62ea56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>extractFromVector</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Sensor.html</anchorfile>
      <anchor>a49621086d8496125b0fc0c58091cb0b7</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>measIndex</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Sensor.html</anchorfile>
      <anchor>a73e44654b04fdb0718dda24fea6f1c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>measIndexTangent</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Sensor.html</anchorfile>
      <anchor>a8c2c4effc58877d38a55e9f0a961f86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>size</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Sensor.html</anchorfile>
      <anchor>a8f84dad122058f453d46405d7d678148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeIndex</type>
      <name>time</name>
      <anchorfile>structstateObservation_1_1KineticsObserver_1_1Sensor.html</anchorfile>
      <anchor>ae6af19429799ebc547cd4a8bec5e9615</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::SensorBase</name>
    <filename>classstateObservation_1_1SensorBase.html</filename>
    <member kind="function">
      <type></type>
      <name>SensorBase</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>ab55880f1e88daaa2c29d3f24001bf4d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SensorBase</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>a96989c38d20f6c62c28a8fb50b373f70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>getMeasurements</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>a7c4c2ee7b7dd9f1fe0de705e8b9fe7e3</anchor>
      <arglist>(bool noisy=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>a4fb9f104d97839f31a2f1d116affc9a6</anchor>
      <arglist>(const Vector &amp;state, TimeIndex k)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNoise</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>a757c0ad88de20b53a8541a159f176ca9</anchor>
      <arglist>(NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoiseBase *</type>
      <name>getNoise</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>aee999cbc583f4d8d0d4dffca1f32ac01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetNoise</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>af148ffe92047891e1871efa7cc6225cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TimeIndex</type>
      <name>getTime</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>ad58dcd2f5f50a5629a40af3bcab262d1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>a78a1a76497eed4c226026a4a6412ddc9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>a725d7f1317d86e578babddf0a0c11f29</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>stateVectorZero</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>a9f641c5d0932f7af8c86d52ed9bac0ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkStateVector</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>a156904f2a867a1ed0212a5b2f8e2b01a</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NoiseBase *</type>
      <name>noise_</name>
      <anchorfile>classstateObservation_1_1SensorBase.html</anchorfile>
      <anchor>a2485deaf19c72e5d4b61ec69ad470630</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::tools::SimplestStopwatch</name>
    <filename>structstateObservation_1_1tools_1_1SimplestStopwatch.html</filename>
    <member kind="typedef">
      <type>typename std::conditional&lt; std::chrono::high_resolution_clock::is_steady, std::chrono::high_resolution_clock, std::chrono::steady_clock &gt;::type</type>
      <name>clock</name>
      <anchorfile>structstateObservation_1_1tools_1_1SimplestStopwatch.html</anchorfile>
      <anchor>a9e23ff34fdb1a75d7fe4638654618b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>clock::time_point</type>
      <name>time_ns</name>
      <anchorfile>structstateObservation_1_1tools_1_1SimplestStopwatch.html</anchorfile>
      <anchor>a39ae46de3a1e332a7e9b8006823debff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structstateObservation_1_1tools_1_1SimplestStopwatch.html</anchorfile>
      <anchor>a9fbd5916dc809b185dc66706a79fe149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stop</name>
      <anchorfile>structstateObservation_1_1tools_1_1SimplestStopwatch.html</anchorfile>
      <anchor>a949fe6043c2770ce4902d3e36ebbb7fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>time_ns</type>
      <name>startTime</name>
      <anchorfile>structstateObservation_1_1tools_1_1SimplestStopwatch.html</anchorfile>
      <anchor>a4ccf15c119e72f487fbe72fa4f5c6d17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::flexibilityEstimation::StableIMUFixedContactDynamicalSystem</name>
    <filename>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</filename>
    <base>stateObservation::DynamicalSystemFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>StableIMUFixedContactDynamicalSystem</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>ae3e256d3d0f615decd5455e4b89fc9d6</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StableIMUFixedContactDynamicalSystem</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a98fa23a9e58eefd21648f60b992ea8bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector3</type>
      <name>stabilizeAccelerationLinear</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a1891a7ae564b1f171dcc9c838a6f7201</anchor>
      <arglist>(Vector3, Vector3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector3</type>
      <name>stabilizeAccelerationAngular</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a47f32e4a0f01c288fe6aabfb15c4012a</anchor>
      <arglist>(Vector3, Vector3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::Vector</type>
      <name>stateDynamics</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a926492e90e726e6282fc85338339a01e</anchor>
      <arglist>(const stateObservation::Vector &amp;x, const stateObservation::Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::Vector</type>
      <name>measureDynamics</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a87378a5bb027a8c2decc09f0d076ea1f</anchor>
      <arglist>(const stateObservation::Vector &amp;x, const stateObservation::Vector &amp;u, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProcessNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>ac4b2bef48e7c8ad58ca3e3929ce19e2a</anchor>
      <arglist>(stateObservation::NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetProcessNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a53d63665d25ca6500ce5f2a104951444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::NoiseBase *</type>
      <name>getProcessNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>ab5df1d47643783bcb92b6d954c20ad5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a92bedb0747711f53585621bc2d25b2c1</anchor>
      <arglist>(stateObservation::NoiseBase *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a120ff4d95e5037fc882c8e10f025a924</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual stateObservation::NoiseBase *</type>
      <name>getMeasurementNoise</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>aa0c18c30ab492decd20fefea33d04258</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSamplingPeriod</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a7507f83eb7bb8e02cbc5b83650674661</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getStateSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a52d2e5878e87fc8eabc7bb5caa30da40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getInputSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a8a05a3234d1cb30b7cc51c1171e9c63d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Index</type>
      <name>getMeasurementSize</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>acea3a5b433371b94c275adc6ee9c0d17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContactsNumber</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>abdbbb5ec44d048f439fd6c3c45877c4c</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContactPosition</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>ae456a6bf41c8c179aa3b2059543ef2a0</anchor>
      <arglist>(unsigned i, const Vector3 &amp;position)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>kine::indexes&lt; kine::rotationVector &gt;</type>
      <name>indexes</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a09dcad6bff0dd72486e045594d8d4910</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Quaternion</type>
      <name>computeQuaternion_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>ac727b73f368df13e12c0ea3f7b618a99</anchor>
      <arglist>(const Vector3 &amp;x)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stateObservation::AccelerometerGyrometer</type>
      <name>sensor_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a4ebb87e62f697e94c9557241b74fb5b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stateObservation::NoiseBase *</type>
      <name>processNoise_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>af26f22bcf76777f5060fb4c0847531af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a49a5fbac553846488258ce52a91dc372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3Unaligned</type>
      <name>orientationVector_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>aa1519ed64239396c48b6d823dabd8262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QuaternionUnaligned</type>
      <name>quaternion_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a8c6efed4e9dfae63bee94b5cdb7b3dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>measurementSize_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a56cd6f9cc873e788951c2c067eca8f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vector3, Eigen::aligned_allocator&lt; Vector3 &gt; &gt;</type>
      <name>contactPositions_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>ae1372d560c7a1853f73983bcdfe4f62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>stateSize_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a55b2352f95f71d4628e88f03e942b304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>inputSize_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a864d77404b11c29d55bd406d201a2fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Index</type>
      <name>measurementSizeBase_</name>
      <anchorfile>classstateObservation_1_1flexibilityEstimation_1_1StableIMUFixedContactDynamicalSystem.html</anchorfile>
      <anchor>a9d3f66ceb35fa78c7494eb3fa18706ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::state</name>
    <filename>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1state.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>pos</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1state.html</anchorfile>
      <anchor>aee342b65b47c4f6fa84accfba6886e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>ori</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1state.html</anchorfile>
      <anchor>afcab504b8b99326ce3a52fead973809d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>linVel</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1state.html</anchorfile>
      <anchor>ad0a114ef08b3514db91b56dbcc37f861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>angVel</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1state.html</anchorfile>
      <anchor>a75f91d21c0848d74fa700e57571b6762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>fc</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1state.html</anchorfile>
      <anchor>ab669576d7b6644696e7b0856bafab5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>unmodeledForces</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1state.html</anchorfile>
      <anchor>af88d3be9b9b72c1cd4bdddd0a6c971ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>comBias</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1state.html</anchorfile>
      <anchor>ac7e7c9571873feed6777f9ae58aa3ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>drift</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1state.html</anchorfile>
      <anchor>a5b52e4d06f58c08ce0ad7641901b64a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned</type>
      <name>size</name>
      <anchorfile>structstateObservation_1_1flexibilityEstimation_1_1IMUElasticLocalFrameDynamicalSystem_1_1state.html</anchorfile>
      <anchor>af39c8de6974ffab4e8cdf9c9737fa3e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::StateVectorArithmetics</name>
    <filename>classstateObservation_1_1StateVectorArithmetics.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stateSum</name>
      <anchorfile>classstateObservation_1_1StateVectorArithmetics.html</anchorfile>
      <anchor>af75017eba3b3c71590ed5d112cc483a7</anchor>
      <arglist>(const Vector &amp;stateVector, const Vector &amp;tangentVector, Vector &amp;sum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stateDifference</name>
      <anchorfile>classstateObservation_1_1StateVectorArithmetics.html</anchorfile>
      <anchor>ae600a69bfd438dbae7184a0da574cfa5</anchor>
      <arglist>(const Vector &amp;stateVector1, const Vector &amp;stateVector2, Vector &amp;difference)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>measurementDifference</name>
      <anchorfile>classstateObservation_1_1StateVectorArithmetics.html</anchorfile>
      <anchor>a35504d7ac7e16d893ac51ccfd4cf4d51</anchor>
      <arglist>(const Vector &amp;measureVector1, const Vector &amp;measureVector2, Vector &amp;difference)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::TiltEstimator</name>
    <filename>classstateObservation_1_1TiltEstimator.html</filename>
    <base>stateObservation::ZeroDelayObserver</base>
    <member kind="function">
      <type></type>
      <name>TiltEstimator</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a764e43d16527304859315209dd86412a</anchor>
      <arglist>(double alpha, double beta, double gamma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a53e8f509cd310de1f32c7f9e92736a39</anchor>
      <arglist>(const double alpha)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAlpha</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a90d91dc9449b2e7ccd3f33233bf40921</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>aa81f4b84217c16f98b33aa5b2d2c9bc8</anchor>
      <arglist>(const double beta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBeta</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>af38645fdf2e465535bd27b51715238a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGamma</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a49fd789d325d86bb3e8b6e9beb9a42f7</anchor>
      <arglist>(const double gamma)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGamma</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>aaae527a5739d14b2e15662720e332d34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSamplingTime</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a139a168126159cbc438e0375eb8e0d5b</anchor>
      <arglist>(const double dt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSamplingTime</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a5d45ae78b012d5fc3ca2f4415400043a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPositionInC</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>adb9c7019680779e4e7128f03d0345994</anchor>
      <arglist>(const Vector3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>getSensorPositionInC</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a1d267e327d1df6ce2b99770f3f0faadd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientationInC</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>ac9468eaf7356ec11b8b14c75b171d040</anchor>
      <arglist>(const Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>getSensorOrientationInC</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>afd3bf5f421bbfa8271006dc9e664ab47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocityInC</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a0c60a8ec6a26270cf30ec9e67230252a</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>getSensorLinearVelocityInC</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>aff47a71ac9a49686467ea0cec2346f06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocityInC</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a4c57504b020b04e6b52a263257a14575</anchor>
      <arglist>(const Vector3 &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>getSensorAngularVelocityInC</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a93558849d52bc5c1b9d00d3cd402eb0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlOriginVelocityInW</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a6d88bf0706c234d38c9f2c2722d9df0b</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>getControlOriginVelocityInW</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a6a5738f5b94731e221983b8107b41d2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMeasurement</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a716725e5dff4ccd3ccc80d49443834cd</anchor>
      <arglist>(const Vector3 ya_k, const Vector3 yg_k, TimeIndex k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StateVector</type>
      <name>oneStepEstimation_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>abfad4ab2ca35f09cab1f16a5b31da482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a31062b541f436cf9e344ef8c3b614254</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>beta_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a8a7e5599f72e8c07caaa801bb81a32f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>gamma_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a4de43a4980422b8d75b3d22f807c3186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a29bc3b097bc33b2d50cdfe1cf7b5387d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>p_S_C_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a40adcc23afb847859b991a66cd4a50db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>R_S_C_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>ac2a8ac78a12d91a8511692b137e22571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>v_S_C_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a0ff17b875ce4fb3fd8ea4a6518e34371</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>w_S_C_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>aa22f35c192e703b74c24535c2114ca02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>v_C_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>ac2c606f0b0a1bf0d1d2c2c1f9ba9fc98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>x1_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a836d3a713d3bafc8f30385095f9eda16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>x1_hat_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>ae9c43c99c6b225ea1fa875165f0de89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>x2_hat_prime_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a43cc4c2d1fffb3875e9a852e0c2612be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>x2_hat_</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>ad88a11aa007d591744c8dcaa44c7f972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>dx1_hat</name>
      <anchorfile>classstateObservation_1_1TiltEstimator.html</anchorfile>
      <anchor>a0b1b6d603d30cdd03b87d2a9c41753dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::UnidimLipmDcmEstimator</name>
    <filename>classstateObservation_1_1UnidimLipmDcmEstimator.html</filename>
    <member kind="function">
      <type></type>
      <name>UnidimLipmDcmEstimator</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a461cca66639f42d6c048797a7e33fe4a</anchor>
      <arglist>(double dt=defaultDt_, double omega_0=defaultOmega_, double biasDriftPerSecondStd=defaultBiasDriftSecond, double initDcm=0, double initZMP=0, double initBias=0, double dcmMeasureErrorStd=defaultDcmErrorStd, double zmpMeasureErrorStd=defaultZmpErrorStd, double initDcmUncertainty=defaultDCMUncertainty, double initBiasUncertainty=defaultBiasUncertainty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWithInputs</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a74cb9071f4752cdb848d72bd7edc9929</anchor>
      <arglist>(double measuredDcm, double measuredZMP, bool measurementIsWithBias=true, double biasDriftPerSecondStd=defaultBiasDriftSecond, double dcmMeasureErrorStd=defaultDcmErrorStd, double zmpMeasureErrorStd=defaultZmpErrorStd, double initBias=0, double initBiasuncertainty=defaultBiasUncertainty)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnidimLipmDcmEstimator</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a08dfe5cffbdb5d3c834aa0811ca79ce9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLipmNaturalFrequency</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>af705a0ef4d6c55c25eaae91ee6a1d4bd</anchor>
      <arglist>(double omega_0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSamplingTime</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a4b4eb906eb7216219618daaaba5b5e40</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBias</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a0993875ff4a5fc399adf3e9799ea0c9d</anchor>
      <arglist>(double bias)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBias</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a84c1db948fa751f1a3f890815734528c</anchor>
      <arglist>(double bias, double uncertainty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBiasDriftPerSecond</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>ae57372bd1d4bbb4be33f02b7ea7ef1d6</anchor>
      <arglist>(double driftPerSecond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnbiasedDCM</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a438b8d030f142a1849f15ad480466a33</anchor>
      <arglist>(double dcm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnbiasedDCM</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a59e64a0349e4e47a7e04f917f86dfde4</anchor>
      <arglist>(double dcm, double uncertainty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZmpMeasureErrorStd</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>afcf0db1c6a0a0ec97255bc68a304c860</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDcmMeasureErrorStd</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a52f18ac6cdfc04f8882a5eb6f9b3370d</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputs</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a6be48c077a4526a6305250f47e080dfc</anchor>
      <arglist>(double dcm, double zmp)</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>update</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a857806ae805e75c802eec025044e795e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getUnbiasedDCM</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a1e7dd1c1fb7bf658c3410dee60cbf1e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBias</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a3bea1f6d4624977b15b20afdbbd7188f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinearKalmanFilter &amp;</type>
      <name>getFilter</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a5b2cf722f6fd53ef5b76ed84cbe39c6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinearKalmanFilter &amp;</type>
      <name>getFilter</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a2bba1831159e8a8f0984fadaccf0de1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultBiasDriftSecond</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a020374a457ea44a05e96650db1303b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultZmpErrorStd</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a676f0f92bdc63f9c2d47db22d4479f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultDcmErrorStd</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a20728a0bab9eea5897b55f7077ebd7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultDCMUncertainty</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a20c374e0313f043529d678c5b3cb1900</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultBiasUncertainty</name>
      <anchorfile>classstateObservation_1_1UnidimLipmDcmEstimator.html</anchorfile>
      <anchor>a0b83b18cd6481ccff7674a64d5038c75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::ZeroDelayObserver</name>
    <filename>classstateObservation_1_1ZeroDelayObserver.html</filename>
    <base>stateObservation::ObserverBase</base>
    <member kind="function">
      <type></type>
      <name>ZeroDelayObserver</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a67290753c4b0c38046c82ee05f25ea4c</anchor>
      <arglist>(Index n, Index m, Index p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZeroDelayObserver</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>ae113ca300d3c114ff862b801bc797397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZeroDelayObserver</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>acd7af6689312c7a0696c4ca39c4aed78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a8247a916d22411cadd69cf6b0c60c87d</anchor>
      <arglist>(const ObserverBase::StateVector &amp;x_k, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentState</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a6b84739bae21890eab25714837b3fd03</anchor>
      <arglist>(const ObserverBase::StateVector &amp;x_k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearStates</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a664dfe33b9771e1245929c0a9e1ba4ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stateIsSet</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a5b01334cf05b2845b46ee758b7a03609</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurement</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a812f3b37b333be2bc9e3dac78e80b241</anchor>
      <arglist>(const ObserverBase::MeasureVector &amp;y_k, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushMeasurement</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>ab6bbef08453356a144306e2af73efafd</anchor>
      <arglist>(const ObserverBase::MeasureVector &amp;y_k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearMeasurements</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>ae35c495bc1995b239cde4fb20d0b3181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInput</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>ab8d5d039dfa067c1be6d1594f0a4d84e</anchor>
      <arglist>(const ObserverBase::InputVector &amp;u_k, TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushInput</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a3ccba5bc930793b852967f47978fb540</anchor>
      <arglist>(const ObserverBase::InputVector &amp;u_k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearInputs</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>acaf69cf480e5392ca50cc030666d3fc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearInputsAndMeasurements</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a6132bc68820990e18610bd6dfcf24d37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeIndex</type>
      <name>estimateState</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a2f8fda2f8c75fbca3985d7872a2d93a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObserverBase::StateVector</type>
      <name>getEstimatedState</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a9a9476e99bc788955a66ecb87eca56c2</anchor>
      <arglist>(TimeIndex k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ObserverBase::StateVector</type>
      <name>getCurrentEstimatedState</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>ad3a61b221fd4eda7a30019205f138e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeIndex</type>
      <name>getCurrentTime</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>abe08f4022ab1584da59d0acb4abadc3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getInput</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>af141608c2857819761637dd236857e30</anchor>
      <arglist>(TimeIndex k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeSize</type>
      <name>getInputsNumber</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a0e2cb6c901cff55a196b187da8bff0ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeIndex</type>
      <name>getInputTime</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a55f70e3ee35420852efef749630dfaa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getMeasurement</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a4816b197ccfccf2186810321d1ccb845</anchor>
      <arglist>(TimeIndex k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeIndex</type>
      <name>getMeasurementTime</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>aa48669294dadf74a5aa6a6644ff44bd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeSize</type>
      <name>getMeasurementsNumber</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a0ae3ebd03bd517d3abca7926beecf65b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateSize</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a864b38d88067e8a654e2972d1b8eed02</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasureSize</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a46f6c0b0d107a5eaca46d16db27d6e26</anchor>
      <arglist>(Index m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInputSize</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a0f96c9bc6577b51e35c520719c5c965b</anchor>
      <arglist>(Index p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual StateVector</type>
      <name>oneStepEstimation_</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a119876dcaefcb6061cef80f2353b8ebd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedVector</type>
      <name>x_</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a8117ab4e9354603b9233fe5c316639b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedVectorArray</type>
      <name>y_</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a6c19c097d2780bb922eee1da1cd15b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedVectorArray</type>
      <name>u_</name>
      <anchorfile>classstateObservation_1_1ZeroDelayObserver.html</anchorfile>
      <anchor>a586b3f05416f37af3d8604b0e444cded</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stateObservation::ZmpTrackingGainEstimator</name>
    <filename>classstateObservation_1_1ZmpTrackingGainEstimator.html</filename>
    <member kind="function">
      <type></type>
      <name>ZmpTrackingGainEstimator</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>aab29586b2a6ff07dee183913c209901b</anchor>
      <arglist>(double dt=defaultDt_, const Vector2 &amp;zmpMeasureErrorStd=Vector2::Constant(defaultZmpMeasurementErrorStd), const Vector3 &amp;gainDriftPerSecond=Vector3::Constant(defaultGainDriftSecond), const Vector2 &amp;zmpProcessErrorStd=Vector2::Constant(defaultZmpProcessErrorStd), double minimumGain=defaultGainMinimum, const Vector2 &amp;initZMP=Vector2::Zero(), const Vector3 &amp;initGain=Vector3::Zero(), const Vector2 &amp;initZMPUncertainty=Vector2::Constant(defaultZmpUncertainty), const Vector3 &amp;initGainUncertainty=Vector3::Constant(defaultGainUncertainty))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWithMeasurements</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a6ec2231df94b2ed62dccee5275ae6896</anchor>
      <arglist>(const Vector2 &amp;initZMP=Vector2::Zero(), const Vector3 &amp;initGain=Vector3::Zero(), const Matrix2 &amp;yaw=Matrix2::Identity(), const Vector2 &amp;initZMPUncertainty=Vector2::Constant(defaultZmpUncertainty), const Vector3 &amp;initGainUncertainty=Vector3::Constant(defaultGainUncertainty))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWithMeasurements</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a9d686dc731a46ec2f1579266248e3453</anchor>
      <arglist>(const Vector2 &amp;initZMP, const Vector3 &amp;initGain, double yaw, const Vector2 &amp;initZMPUncertainty=Vector2::Constant(defaultZmpUncertainty), const Vector3 &amp;initGainUncertainty=Vector3::Constant(defaultGainUncertainty))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWithMeasurements</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>adcc91ef0da3797381fcc28bf806a0c4f</anchor>
      <arglist>(const Vector2 &amp;initZMP, const Vector3 &amp;initGain, const Matrix3 &amp;rotation, const Vector2 &amp;initZMPUncertainty=Vector2::Constant(defaultZmpUncertainty), const Vector3 &amp;initGainUncertainty=Vector3::Constant(defaultGainUncertainty))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ZmpTrackingGainEstimator</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a0cc6e48ee3344d17e54fbf543bb91c13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSamplingTime</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a9f4f8441b8aa5a79db44acb8804840a4</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGain</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a7d288653ffc6a5254ea3cab2d435fb36</anchor>
      <arglist>(const Vector3 &amp;gain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGain</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a15c08242d6538d828ee8263b5f346486</anchor>
      <arglist>(const Vector3 &amp;gain, const Vector3 &amp;uncertainty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGainDriftPerSecond</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a44ff94618833d595fb70d085debbd886</anchor>
      <arglist>(const Vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumGain</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a931c7cfdf41d36441ad299064bd40302</anchor>
      <arglist>(const double &amp;minGain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZMPProcesError</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a880e7873258266a62b389014c0393e4f</anchor>
      <arglist>(const Vector2 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZmpMeasureErrorStd</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>addab97b19ca8cdd1677bed502dc24e2c</anchor>
      <arglist>(const Vector2 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputs</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>ab30bd4a3920684aeedf5d7a96e3f0238</anchor>
      <arglist>(const Vector2 &amp;zmpErr, const Vector2 &amp;zmp, const Matrix3 &amp;orientation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputs</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>ae190385fa3be27e75499c45924e03f74</anchor>
      <arglist>(const Vector2 &amp;zmpErr, const Vector2 &amp;zmp, double yaw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputs</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a28cf067cba8ec170d8a8557605058471</anchor>
      <arglist>(const Vector2 &amp;zmpErr, const Vector2 &amp;zmp, const Matrix2 &amp;R=Matrix2::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a576a6ce1bcedfa73adfd3800cd8f0ffc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>getEstimatedGain</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a80029598cfd600cf2aeb21247ae85a1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>getEstimatedLocalGain</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>aa928c21f91ba7591bed690fcfdf00fea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinearKalmanFilter &amp;</type>
      <name>getFilter</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a4b1061ea8f2f5bb2a9a7db1da3e745b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinearKalmanFilter &amp;</type>
      <name>getFilter</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>aa3f96812ab391a894d257d79f6435552</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultGainDriftSecond</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a93caa8e41ae31832d4248bcba21bba9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultZmpProcessErrorStd</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>ac57344012006c3b3d505f8618e726714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultZmpMeasurementErrorStd</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a501e5b3aa97e918d151770bd0003b7f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultGainMinimum</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a4de4dcda15caa67eed1d992c89c8991f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultZmpUncertainty</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a8cdd339bed9adef9a8d45f1e467cb93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultGainUncertainty</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a5a779e911022e818a4040aa3f9eac9b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, 2, 5 &gt;</type>
      <name>Matrix25</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a131fd4c2534cfda870ba3b4eb43414f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, 2, 3 &gt;</type>
      <name>Matrix23</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>ac597d2e0f9e3e35639fd33a3fea688d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateR_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a0d8fff407d28a6ea64885ecdd1c5ad45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateQ_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>ae3aa200614d1d1df6ec728c8012dbe9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix2</type>
      <name>Vec2ToSqDiag_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>ae851c9d2040da6241fd938dd7cd83e43</anchor>
      <arglist>(const Vector2 &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix3</type>
      <name>Vec3ToSqDiag_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>ad27e3170d2318c805f0374da714e5e17</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>abb85124623ccebf84e2c6bcba173ce94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minimumGain_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a11ac171a8a71f77b7c8f6ec2e3ce16d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2</type>
      <name>zmpMeasureErrorstd_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a133d7d15420eb379ab52e0e6e15644d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>gainDriftPerSecondStd_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a675e0e313b1213f2b76e4514b7eb6a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2</type>
      <name>zmpProcessErrorStd_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a7675a091454228b33f4528ea3a4310c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix2</type>
      <name>yaw_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a5c531edcf132b9efc6c0b3020f4c5957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearKalmanFilter</type>
      <name>filter_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a25b34969ef53efadad03e448f89cf152</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix4</type>
      <name>A_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a28054bb0136c6f35333bcdd03c8593ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix25</type>
      <name>C_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a9618dbda385cec4555e33366594cca29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix2</type>
      <name>R_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a6cf4a7e67521480963b4e9db9ca9124a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix5</type>
      <name>Q_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a99d7b88c046a2e1aa2297e27161033f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix2</type>
      <name>previousOrientation_</name>
      <anchorfile>classstateObservation_1_1ZmpTrackingGainEstimator.html</anchorfile>
      <anchor>a4f4cd53ba93bfd458199c9d474e6cab5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>stateObservation</name>
    <filename>namespacestateObservation.html</filename>
    <namespace>stateObservation::algorithm</namespace>
    <namespace>stateObservation::cst</namespace>
    <namespace>stateObservation::detail</namespace>
    <namespace>stateObservation::examples</namespace>
    <namespace>stateObservation::flexibilityEstimation</namespace>
    <namespace>stateObservation::hrp2</namespace>
    <namespace>stateObservation::kine</namespace>
    <namespace>stateObservation::tools</namespace>
    <class kind="class">stateObservation::AccelerometerGyrometer</class>
    <class kind="class">stateObservation::AccelerometerGyrometerMagnetometer</class>
    <class kind="class">stateObservation::AlgebraicSensor</class>
    <class kind="class">stateObservation::BidimElasticInvPendulum</class>
    <class kind="class">stateObservation::CheckedItem</class>
    <class kind="class">stateObservation::DebugItem</class>
    <class kind="class">stateObservation::DebugItem&lt; T, defaultValue, false &gt;</class>
    <class kind="class">stateObservation::DebugItemDefaultValue</class>
    <class kind="class">stateObservation::DynamicalSystemFunctorBase</class>
    <class kind="class">stateObservation::DynamicalSystemSimulator</class>
    <class kind="struct">stateObservation::EigenType</class>
    <class kind="class">stateObservation::ExtendedKalmanFilter</class>
    <class kind="class">stateObservation::FixOrDynMatrixTools</class>
    <class kind="class">stateObservation::FixOrDynMatrixToolsBySize</class>
    <class kind="class">stateObservation::FixOrDynMatrixToolsBySize&lt; compileTimeRows, -1 &gt;</class>
    <class kind="class">stateObservation::FixOrDynMatrixToolsBySize&lt;-1, -1 &gt;</class>
    <class kind="class">stateObservation::FixOrDynMatrixToolsBySize&lt;-1, compileTimeCols &gt;</class>
    <class kind="class">stateObservation::GaussianWhiteNoise</class>
    <class kind="class">stateObservation::IMUDynamicalSystem</class>
    <class kind="class">stateObservation::IMUMagnetometerDynamicalSystem</class>
    <class kind="class">stateObservation::IMUMltpctiveDynamicalSystem</class>
    <class kind="class">stateObservation::IndexedMatrixArrayT</class>
    <class kind="class">stateObservation::IndexedMatrixT</class>
    <class kind="struct">stateObservation::isEigen</class>
    <class kind="struct">stateObservation::isMatrix</class>
    <class kind="struct">stateObservation::isMatrix&lt; Eigen::Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</class>
    <class kind="class">stateObservation::KalmanFilterBase</class>
    <class kind="class">stateObservation::KineticsObserver</class>
    <class kind="class">stateObservation::LinearKalmanFilter</class>
    <class kind="class">stateObservation::LipmDcmEstimator</class>
    <class kind="struct">stateObservation::MatrixType</class>
    <class kind="class">stateObservation::NoiseBase</class>
    <class kind="class">stateObservation::ObserverBase</class>
    <class kind="class">stateObservation::SensorBase</class>
    <class kind="class">stateObservation::StateVectorArithmetics</class>
    <class kind="class">stateObservation::TiltEstimator</class>
    <class kind="class">stateObservation::UnidimLipmDcmEstimator</class>
    <class kind="class">stateObservation::ZeroDelayObserver</class>
    <class kind="class">stateObservation::ZmpTrackingGainEstimator</class>
    <member kind="typedef">
      <type>Eigen::VectorXd</type>
      <name>Vector</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>af12c1d00c2ef533fe40f8ceb1b45ef0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 1, 1 &gt;</type>
      <name>Vector1</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a6f53d614300b75f8957d902d03a7abab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 2, 1 &gt;</type>
      <name>Vector2</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ae93adff34402470724f4f09bfed6b13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Vector3d</type>
      <name>Vector3</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a48b631a657b372795575083586eed2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 1, Eigen::DontAlign &gt;</type>
      <name>Vector3Unaligned</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>aa11e0dcac5d3c2d176a52d62123e7a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Vector4d</type>
      <name>Vector4</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a509dae854b3dd8ef8319b659ad6e8a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 5, 1 &gt;</type>
      <name>Vector5</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a84272627c22ea78705ea6db0461fe215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>Vector6</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a9d339a150bf05286eca83bc588349afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixXd</type>
      <name>Matrix</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a8075b3a5e1c85f87c8e5c05b60100f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 1, 1 &gt;</type>
      <name>Matrix1</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>afcf925e9d95458823cbfd15f8462e9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix2d</type>
      <name>Matrix2</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a3d219ee3106305c450f0f33695d030dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix3d</type>
      <name>Matrix3</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a76df2159abbf28e45b50358d0edab068</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3, Eigen::DontAlign &gt;</type>
      <name>Matrix3Unaligned</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a2dce08f7e0a9b0dbb41faa88e7394c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix4d</type>
      <name>Matrix4</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a009f7f7e8b38b3cecc561738ad60eb52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 5, 5 &gt;</type>
      <name>Matrix5</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ac93c756df12b231075cc01963aeed10a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 6, 6 &gt;</type>
      <name>Matrix6</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>aa4856a065f88d780a5c575335fbf81ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 12, 12 &gt;</type>
      <name>Matrix12</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ace58e23991b2cf49ccb62997ec08aeb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Quaterniond</type>
      <name>Quaternion</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a1d5e7448fab378f14e92403b1c2ef5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; double, Eigen::DontAlign &gt;</type>
      <name>QuaternionUnaligned</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>af5aa1ced266d05a07805dfa9176dd6b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::AngleAxis&lt; double &gt;</type>
      <name>AngleAxis</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a149c9410becb3e78d7b2fa341d04ca4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Rotation2D&lt; double &gt;</type>
      <name>Rotation2D</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a3b15447c5aad5f26db72b3dc4a030247</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ac015d2857a6b9b16a16f1376d0df622c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long int</type>
      <name>TimeIndex</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a2d28b2a56e2f031d42c908ac185542c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Index</type>
      <name>TimeSize</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a5199554e1288134514be0c55502cb72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedItem&lt; Matrix3, false, false, true, true &gt;</type>
      <name>CheckedMatrix3</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a63a017136b64195f9dc51a0fc3afbc00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedItem&lt; Matrix6, false, false, true, true &gt;</type>
      <name>CheckedMatrix6</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ae1a04a4da1d52eecc1941ade109be16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedItem&lt; Matrix12, false, false, true, true &gt;</type>
      <name>CheckedMatrix12</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a2d975775077bb6d31aa43a555636b172</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedItem&lt; Vector3, false, false, true, true &gt;</type>
      <name>CheckedVector3</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>af10af27eb55087df9786c0f0c4688fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedItem&lt; Vector6, false, false, true, true &gt;</type>
      <name>CheckedVector6</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a087bf1641ad9fb513ae1b60eb38b69c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedItem&lt; Quaternion, false, false, true, true &gt;</type>
      <name>CheckedQuaternion</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>aa3771fcbd17321c96ddc17e2b1f1a7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedMatrixT&lt; Matrix &gt;</type>
      <name>IndexedMatrix</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a26c2c64efe6f012a7b85a9f6892686b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedMatrixT&lt; Vector &gt;</type>
      <name>IndexedVector</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>aecc3c0d59b6a43528535cda30241c60b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedMatrixT&lt; Vector3 &gt;</type>
      <name>IndexedVector3</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>af39a8e5d3c97c8eb21a0c0b7927cd3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedMatrixT&lt; Matrix3 &gt;</type>
      <name>IndexedMatrix3</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ae78b1feb9855ad5095cc7022d16e113e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedMatrixArrayT&lt; Matrix &gt;</type>
      <name>IndexedMatrixArray</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>ac4b880b33f3bc814528573f04fee8ac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedMatrixArrayT&lt; Vector &gt;</type>
      <name>IndexedVectorArray</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a733f901496c8fff9609bec77ff52449e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::timer::auto_cpu_timer</type>
      <name>auto_cpu_timer</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a46bb38981df914761d0d3dbab83a0f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::timer::cpu_timer</type>
      <name>cpu_timer</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>adc99a724cfd639f6b63279dc58253946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::timer::cpu_timer</type>
      <name>cpu_times</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a954c89e76c57fd8b6737e98b5a1751b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a1ed26cd92da35780dbd4271037b59702</anchor>
      <arglist>(double a, double b, double relativePrecision=cst::epsilon1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApproxAbs</name>
      <anchorfile>namespacestateObservation.html</anchorfile>
      <anchor>a3129c02470e794b1c530f618768cfcfd</anchor>
      <arglist>(double a, double b, double absolutePrecision=cst::epsilon1)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>stateObservation::algorithm</name>
    <filename>namespacestateObservation_1_1algorithm.html</filename>
    <class kind="class">stateObservation::algorithm::LinearAcceleration</class>
    <class kind="class">stateObservation::algorithm::MagneticField</class>
    <class kind="class">stateObservation::algorithm::RotationVelocity</class>
  </compound>
  <compound kind="namespace">
    <name>stateObservation::cst</name>
    <filename>namespacestateObservation_1_1cst.html</filename>
    <member kind="variable">
      <type>constexpr double</type>
      <name>gravityConstant</name>
      <anchorfile>namespacestateObservation_1_1cst.html</anchorfile>
      <anchor>a177e9790b91fd4af339c9c3c6d076cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vector</type>
      <name>gravity</name>
      <anchorfile>namespacestateObservation_1_1cst.html</anchorfile>
      <anchor>a73b34c228641cabcb79894e285fd751a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>epsilonAngle</name>
      <anchorfile>namespacestateObservation_1_1cst.html</anchorfile>
      <anchor>a2c627130ec0be695da77a37638d286d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>epsilon1</name>
      <anchorfile>namespacestateObservation_1_1cst.html</anchorfile>
      <anchor>abfc17bdd160f33df2c6825afc60e4d1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>stateObservation::detail</name>
    <filename>namespacestateObservation_1_1detail.html</filename>
    <class kind="class">stateObservation::detail::DebugItemDefaultError</class>
    <class kind="class">stateObservation::detail::DebugItemDefaultError&lt; exception, dummy &gt;</class>
    <class kind="class">stateObservation::detail::DebugItemDefaultError&lt; exceptionAddr, dummy &gt;</class>
    <class kind="class">stateObservation::detail::DebugItemDefaultError&lt; message, dummy &gt;</class>
    <member kind="typedef">
      <type>DebugItemDefaultValue&lt; bool, true &gt;</type>
      <name>defaultTrue</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>a2eb6dfdac5cd9b966267523389964f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugItemDefaultError&lt; message &gt;</type>
      <name>defaultErrorMSG</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>ac2df386962ec3fd0001208c9eb801c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugItemDefaultError&lt; exception &gt;</type>
      <name>defaultException</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>af67b3e88cf3250ba2420f4bfc017b236</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugItemDefaultError&lt; exceptionAddr &gt;</type>
      <name>defaultExceptionAddr</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>a900210535ad9242cb78f3f14e6cb537f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>errorType</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>ad190d4c7c4232683d9647ac44eb195d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>message</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>ad190d4c7c4232683d9647ac44eb195d2a8a333557001121ababbf49a4748a21c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exception</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>ad190d4c7c4232683d9647ac44eb195d2a1d1b1e55680385c752295299c6393833</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exceptionAddr</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>ad190d4c7c4232683d9647ac44eb195d2a85de210f7611d3a8de56d02fb83a03db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void STATE_OBSERVATION_DLLAPI</type>
      <name>defaultSum</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>a03b2909c21d843ca6363914f8989d52a</anchor>
      <arglist>(const Vector &amp;stateVector, const Vector &amp;tangentVector, Vector &amp;sum)</arglist>
    </member>
    <member kind="function">
      <type>void STATE_OBSERVATION_DLLAPI</type>
      <name>defaultDifference</name>
      <anchorfile>namespacestateObservation_1_1detail.html</anchorfile>
      <anchor>a0bc44c69f09db5aefccaf6ae66e603d2</anchor>
      <arglist>(const Vector &amp;stateVector1, const Vector &amp;stateVector2, Vector &amp;difference)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>stateObservation::examples</name>
    <filename>namespacestateObservation_1_1examples.html</filename>
    <member kind="typedef">
      <type>flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem::state</type>
      <name>state</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>a32510182b45fc220f4ce11484e878cd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexedVectorArray</type>
      <name>imuAttitudeTrajectoryReconstruction</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>a4eed802cc3be2d6b7632aae7655a1663</anchor>
      <arglist>(const IndexedVectorArray &amp;y, const IndexedVectorArray &amp;u, const Vector &amp;xh0, const Matrix &amp;p, const Matrix &amp;q, const Matrix &amp;r, double dt, bool withGyroBias)</arglist>
    </member>
    <member kind="function">
      <type>IndexedVectorArray</type>
      <name>imuAttitudeTrajectoryReconstruction</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>ae097f2efc30e8ba3b2d2aa2fa6bfccb7</anchor>
      <arglist>(const IndexedVectorArray &amp;y, const Vector &amp;xh0, const Matrix &amp;p, const Matrix &amp;q, const Matrix &amp;r, double dt, bool withGyroBias)</arglist>
    </member>
    <member kind="function">
      <type>IndexedVectorArray</type>
      <name>imuMultiplicativeAttitudeReconstruction</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>a1c59a4bf9cc0402e665e5eb35811642f</anchor>
      <arglist>(const IndexedVectorArray &amp;y, const IndexedVectorArray &amp;u, const Vector &amp;xh0, const Matrix &amp;p, const Matrix &amp;q, const Matrix &amp;r, double dt)</arglist>
    </member>
    <member kind="function">
      <type>IndexedVectorArray</type>
      <name>imuMultiplicativeAttitudeReconstruction</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>adee3a0854187297b681736dfae4f81de</anchor>
      <arglist>(const IndexedVectorArray &amp;y, const Vector &amp;xh0, const Matrix &amp;p, const Matrix &amp;q, const Matrix &amp;r, double dt)</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::IndexedVectorArray</type>
      <name>offlineEKFFlexibilityEstimation</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>a2030947ebe32a6e1c1a5bce717ff2c21</anchor>
      <arglist>(const stateObservation::IndexedVectorArray &amp;y, const stateObservation::IndexedVectorArray &amp;u, const Vector &amp;xh0, unsigned numberOfContacts, const std::vector&lt; Vector3, Eigen::aligned_allocator&lt; Vector3 &gt;&gt; &amp;contactsPositions, double dt, IndexedVectorArray *ino=0x0, IndexedVectorArray *premea=0x0)</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::IndexedVectorArray</type>
      <name>offlineEKFFlexibilityEstimation</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>a7f384716061baddce38a912c28a6493e</anchor>
      <arglist>(const stateObservation::IndexedVectorArray &amp;y, const Vector &amp;xh0, unsigned numberOfContacts, const std::vector&lt; Vector3, Eigen::aligned_allocator&lt; Vector3 &gt;&gt; &amp;contactsPositions, double dt)</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::IndexedVectorArray</type>
      <name>offlineEKFFlexibilityEstimation</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>a32d6f79c887ecae1b6642083a4ce3dec</anchor>
      <arglist>(const stateObservation::IndexedVectorArray &amp;y, const stateObservation::IndexedVectorArray &amp;u, const Vector &amp;xh0, unsigned numberOfContacts, const std::vector&lt; Vector3, Eigen::aligned_allocator&lt; Vector3 &gt; &gt; &amp;contactsPositions, double dt, IndexedVectorArray *ino, IndexedVectorArray *premea)</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::IndexedVectorArray</type>
      <name>offlineEKFFlexibilityEstimation</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>aee0c888ffe25334ae7a0ac2aaace171e</anchor>
      <arglist>(const stateObservation::IndexedVectorArray &amp;y, const Vector &amp;xh0, unsigned numberOfContacts, const std::vector&lt; Vector3, Eigen::aligned_allocator&lt; Vector3 &gt; &gt; &amp;contactsPositions, double dt)</arglist>
    </member>
    <member kind="function">
      <type>stateObservation::IndexedVectorArray</type>
      <name>offlineModelBaseFlexEstimation</name>
      <anchorfile>namespacestateObservation_1_1examples.html</anchorfile>
      <anchor>ac99fccf128adf104d136b9c98e4fe306</anchor>
      <arglist>(const stateObservation::IndexedVectorArray &amp;y, const stateObservation::IndexedVectorArray &amp;u, const Matrix &amp;xh0, const stateObservation::IndexedVectorArray numberOfContacts, double dt, double mass, bool withForce, const stateObservation::IndexedMatrixArray &amp;Q=stateObservation::IndexedMatrixArray(), const stateObservation::IndexedMatrixArray &amp;R=stateObservation::IndexedMatrixArray(), const Matrix3 &amp;kfe=Matrix3::Zero(), const Matrix3 &amp;kfv=Matrix3::Zero(), const Matrix3 &amp;kte=Matrix3::Zero(), const Matrix3 &amp;ktv=Matrix3::Zero(), IndexedVectorArray *prediction=0x0, IndexedVectorArray *inovation=0x0, IndexedVectorArray *predictedMeasurements=0x0, IndexedVectorArray *simulatedMeasurements=0x0, int verbose=0x0)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>stateObservation::flexibilityEstimation</name>
    <filename>namespacestateObservation_1_1flexibilityEstimation.html</filename>
    <class kind="class">stateObservation::flexibilityEstimation::EKFFlexibilityEstimatorBase</class>
    <class kind="class">stateObservation::flexibilityEstimation::FixedContactEKFFlexEstimatorIMU</class>
    <class kind="class">stateObservation::flexibilityEstimation::FlexibilityEstimatorBase</class>
    <class kind="class">stateObservation::flexibilityEstimation::IMUElasticLocalFrameDynamicalSystem</class>
    <class kind="class">stateObservation::flexibilityEstimation::IMUFixedContactDynamicalSystem</class>
    <class kind="class">stateObservation::flexibilityEstimation::ModelBaseEKFFlexEstimatorIMU</class>
    <class kind="class">stateObservation::flexibilityEstimation::StableIMUFixedContactDynamicalSystem</class>
  </compound>
  <compound kind="namespace">
    <name>stateObservation::hrp2</name>
    <filename>namespacestateObservation_1_1hrp2.html</filename>
    <class kind="struct">stateObservation::hrp2::contact</class>
    <member kind="variable">
      <type>constexpr double</type>
      <name>m</name>
      <anchorfile>namespacestateObservation_1_1hrp2.html</anchorfile>
      <anchor>afdc5caf5cf6fdd7882939586591f8ce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>linKe</name>
      <anchorfile>namespacestateObservation_1_1hrp2.html</anchorfile>
      <anchor>ad2f2bc2cc2c6e1d8eb8bf90bb766b243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>angKe</name>
      <anchorfile>namespacestateObservation_1_1hrp2.html</anchorfile>
      <anchor>a91cb315eda3bfe61d01387eb385f1572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>linKv</name>
      <anchorfile>namespacestateObservation_1_1hrp2.html</anchorfile>
      <anchor>a7f9bda994349431964f21bf015a2814d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>angKv</name>
      <anchorfile>namespacestateObservation_1_1hrp2.html</anchorfile>
      <anchor>ad889b64064e98d1f14762382846f32f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>stateObservation::kine</name>
    <filename>namespacestateObservation_1_1kine.html</filename>
    <class kind="struct">stateObservation::kine::indexes</class>
    <class kind="struct">stateObservation::kine::indexes&lt; quaternion &gt;</class>
    <class kind="struct">stateObservation::kine::indexes&lt; rotationVector &gt;</class>
    <class kind="struct">stateObservation::kine::Kinematics</class>
    <class kind="class">stateObservation::kine::Orientation</class>
    <member kind="enumeration">
      <type></type>
      <name>rotationType</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8688916c76bf0a024afc44b41439dbbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>matrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8688916c76bf0a024afc44b41439dbbfa07fd8d8f98df2e184dd481d467df9006</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rotationVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8688916c76bf0a024afc44b41439dbbfa9bf6c60e237b32fbc72ea7b4a4980aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>quaternion</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8688916c76bf0a024afc44b41439dbbfab63f03079ec398f762632495a8544d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>angleaxis</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8688916c76bf0a024afc44b41439dbbfac8d71bb617c21306a2dac1f69f35630d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a748446ce3994ea84c76c7ad506e59313</anchor>
      <arglist>(Vector3 &amp;position, const Vector3 &amp;velocity, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a32eea9cb05c07f738050771f0393b369</anchor>
      <arglist>(Vector3 &amp;position, Vector3 &amp;velocity, const Vector3 &amp;acceleration, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ad61717ca29b713c5b728b20d80471001</anchor>
      <arglist>(Matrix3 &amp;orientation, const Vector3 &amp;rotationVelocity, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8e0464c93771693abaa5dfe91ed467ab</anchor>
      <arglist>(Matrix3 &amp;orientation, Vector3 &amp;rotationVelocity, const Vector3 &amp;rotationAcceleration, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a0005b957a28c13b564da78f2608afe6a</anchor>
      <arglist>(Quaternion &amp;orientation, const Vector3 &amp;rotationVelocity, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a21b20d237788a4cd10f216cb1c38aa41</anchor>
      <arglist>(Quaternion &amp;orientation, Vector3 &amp;rotationVelocity, const Vector3 &amp;rotationAcceleration, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a7900c774f9febbdd8257ac66b4429c63</anchor>
      <arglist>(Vector3 &amp;position, Vector3 &amp;velocity, const Vector3 &amp;acceleration, Matrix3 &amp;orientation, Vector3 &amp;rotationVelocity, const Vector3 &amp;rotationAcceleration, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>abdbf1354c436808251497fd4e119f0c7</anchor>
      <arglist>(Vector3 &amp;position, Vector3 &amp;velocity, const Vector3 &amp;acceleration, Quaternion &amp;orientation, Vector3 &amp;rotationVelocity, const Vector3 &amp;rotationAcceleration, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a41358ba4d9e47e1d9cb1144dbca65cd7</anchor>
      <arglist>(Vector3 &amp;position, const Vector3 &amp;velocity, Matrix3 &amp;orientation, const Vector3 &amp;rotationVelocity, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateKinematics</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a5903ef92774ae389e6a99971d5478047</anchor>
      <arglist>(Vector3 &amp;position, const Vector3 &amp;velocity, Quaternion &amp;orientation, const Vector3 &amp;rotationVelocity, double dt)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>regulateRotationVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a0287a3944705f372e2ac2ac31bac4bb8</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis</type>
      <name>rotationVectorToAngleAxis</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a6df5915c78e5e7d5cf388ca1a299a0e1</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>rotationVectorToRotationMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a863a3b576b3e9f738e4363df6a626417</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>rotationVectorToQuaternion</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a1f5d46cdaa166617af8af94aa26961ea</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>rotationMatrixToRotationVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a85b273f5ee7241b3632c70f1fc3d76ed</anchor>
      <arglist>(const Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>quaternionToRotationVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ac19d92086c08887462ed02c7fc6807b9</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>quaternionToRotationVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>acfd9b69aa25ea3efaf35c7dc20a900b7</anchor>
      <arglist>(const Vector4 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scalarComponent</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a9e5c5e4498da6d68a70a9fb8dfdc8ada</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>vectorComponent</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a842730b6ae85566d0c018c106be4cd68</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>rotationMatrixToRollPitchYaw</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a302c69d1c0b16d4560d26753266af72a</anchor>
      <arglist>(const Matrix3 &amp;R, Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>rotationMatrixToRollPitchYaw</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ad59c94c9cdc83265dad5bdc1aff8b0a8</anchor>
      <arglist>(const Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>rollPitchYawToRotationMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a983d44701296f0f0832a0398da5beeb8</anchor>
      <arglist>(double roll, double pitch, double yaw)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>rollPitchYawToRotationMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ab0f3927fd65a811d3e41b015b69ba5b9</anchor>
      <arglist>(const Vector3 &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>rollPitchYawToQuaternion</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a7261575e9d2d887c3843bc952c76f18e</anchor>
      <arglist>(double roll, double pitch, double yaw)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>rollPitchYawToQuaternion</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a22c75d74e4e5027d41c960888772555d</anchor>
      <arglist>(const Vector3 &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>orthogonalizeRotationMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a611022db556471cbed21a4eed37355ca</anchor>
      <arglist>(const Matrix3 &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>aead9f08042fb65071a46407b6dae1357</anchor>
      <arglist>(const Vector3 &amp;v, Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ab75794873a63e94993198e80b809d133</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric2</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ac34bc4054d2b23ba0e2a5b94bd317563</anchor>
      <arglist>(const Vector3 &amp;v, Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric2</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ab1fa595baef1bf6f4663e205b401b8cc</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>homogeneousMatrixToVector6</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a6c27cf34048bb34167cbcc6853f73750</anchor>
      <arglist>(const Matrix4 &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>Matrix4</type>
      <name>vector6ToHomogeneousMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a379f16ace3335a1054eb1d8301cd29bb</anchor>
      <arglist>(const Vector6 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>twoVectorsToRotationMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>abe6f88b1583d50a5294862b4c7d981e6</anchor>
      <arglist>(const Vector3 &amp;v1, const Vector3 Rv1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPureYaw</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a8150acf2b58d56d429037b228e4f2e93</anchor>
      <arglist>(const Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>getInvariantHorizontalVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a72ae305ec685249359a0937bc6bd3d6d</anchor>
      <arglist>(const Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>getInvariantOrthogonalVector</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>acdef8357e78272632e36f5c641f9b495</anchor>
      <arglist>(const Matrix3 &amp;Rhat, const Vector3 &amp;Rtez)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>mergeTiltWithYaw</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a216d5faad57b48d05b29e2fe3d8a8108</anchor>
      <arglist>(const Vector3 &amp;Rtez, const Matrix3 &amp;R2, const Vector3 &amp;v=Vector3::UnitX()) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>mergeRoll1Pitch1WithYaw2</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a1df2e7ca40aa60783d30ec3f5569ceee</anchor>
      <arglist>(const Matrix3 &amp;R1, const Matrix3 &amp;R2, const Vector3 &amp;v=Vector3::UnitX())</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>mergeTiltWithYawAxisAgnostic</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ab39e1195d04b231e2fada2df6d1873cf</anchor>
      <arglist>(const Vector3 &amp;Rtez, const Matrix3 &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>mergeRoll1Pitch1WithYaw2AxisAgnostic</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a88e72a084165e71d16496b49956adc2f</anchor>
      <arglist>(const Matrix3 &amp;R1, const Matrix3 &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rotationMatrixToAngle</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a55b892c94f306f86b09e67e48586d9b4</anchor>
      <arglist>(const Matrix3 &amp;rotation, const Vector3 &amp;axis, const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rotationMatrixToYaw</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>aefe9fdadb3e16a4ccd280247a8c427da</anchor>
      <arglist>(const Matrix3 &amp;rotation, const Vector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rotationMatrixToYaw</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a4b938e84bfd08dbe9f3df6a41a636e82</anchor>
      <arglist>(const Matrix3 &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rotationMatrixToYawAxisAgnostic</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ae154db62e29c0bf232fb2496f91a68b6</anchor>
      <arglist>(const Matrix3 &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>zeroRotationQuaternion</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a4db2235240ade5be2a639ab6abc3ba64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>randomRotationQuaternion</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ac0486776b1a708566a2032afab559974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomAngle</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a85f2faa4d2d3e4192a6da1f804b186f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRotationMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a079083d3e47c99522590740017a1bf22</anchor>
      <arglist>(const Matrix3 &amp;, double precision=2 *cst::epsilon1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixedPointRotationToTranslation</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ac2e18d1e45e78b3e2debf1bb616f5f8a</anchor>
      <arglist>(const Matrix3 &amp;R, const Vector3 &amp;rotationVelocity, const Vector3 &amp;rotationAcceleration, const Vector3 &amp;fixedPoint, Vector3 &amp;outputTranslation, Vector3 &amp;outputLinearVelocity, Vector3 &amp;outputLinearAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>derivateRotationFD</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a381fc6dd3cfe7595e310a32772c5fb00</anchor>
      <arglist>(const Quaternion &amp;q1, const Quaternion &amp;q2, double dt)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>derivateRotationFD</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a222b976ebbcc0a22d187e4edeadbdc0b</anchor>
      <arglist>(const Vector3 &amp;o1, const Vector3 &amp;o2, double dt)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>derivateHomogeneousMatrixFD</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a80f4e548724c26787a2d310a3ea5fe16</anchor>
      <arglist>(const Matrix4 &amp;m1, const Matrix4 &amp;m2, double dt)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>derivatePoseThetaUFD</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a59cb89f5c2773fa5bdcf340be74aa33a</anchor>
      <arglist>(const Vector6 &amp;v1, const Vector6 &amp;v2, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>derivateRotationMultiplicative</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a42bc88c0abeba550aff6c190ccd5445e</anchor>
      <arglist>(const Vector3 &amp;deltaR, Matrix3 &amp;dRdR, Matrix3 &amp;dRddeltaR)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>derivateRtvMultiplicative</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a3ee76173adad5840dadfb8183242e866</anchor>
      <arglist>(const Matrix3 &amp;R, const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>IndexedVectorArray</type>
      <name>reconstructStateTrajectory</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>ac78a3aef4a01fb9a9201ff4f0be10beb</anchor>
      <arglist>(const IndexedVectorArray &amp;positionOrientation, double dt)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>invertState</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a9ad7704e68b1852f1b2962e0487d53a9</anchor>
      <arglist>(const Vector &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>Matrix4</type>
      <name>invertHomoMatrix</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>a11103e044b5db4b8ba4857f88ee82504</anchor>
      <arglist>(const Matrix4 &amp;m)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>quatNormTol</name>
      <anchorfile>namespacestateObservation_1_1kine.html</anchorfile>
      <anchor>aa01dc4db866cf56126eec454dba6702f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>stateObservation::tools</name>
    <filename>namespacestateObservation_1_1tools.html</filename>
    <namespace>stateObservation::tools::Detail</namespace>
    <class kind="class">stateObservation::tools::Logger</class>
    <class kind="class">stateObservation::tools::ProbabilityLawSimulation</class>
    <class kind="struct">stateObservation::tools::SimplestStopwatch</class>
    <member kind="function">
      <type>std::string STATE_OBSERVATION_DLLAPI</type>
      <name>matrixToString</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>ae8ac2aae6e2bc337b16dd55671c74a2c</anchor>
      <arglist>(const Matrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>std::string STATE_OBSERVATION_DLLAPI</type>
      <name>vectorToString</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>adfcd48d12d9f497d58b073e3391a5269</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix STATE_OBSERVATION_DLLAPI</type>
      <name>stringToMatrix</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a8c69211ffb30e8000ef2ae0924400c8c</anchor>
      <arglist>(const std::string &amp;str, Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Vector STATE_OBSERVATION_DLLAPI</type>
      <name>stringToVector</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a74f8a7bd89ff524ef6bb2b2d1e43a3e3</anchor>
      <arglist>(const std::string &amp;str, Index length)</arglist>
    </member>
    <member kind="function">
      <type>Vector STATE_OBSERVATION_DLLAPI</type>
      <name>stringToVector</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a468d4476f60840aa7c642c2564f51020</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>square</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>afb78ab184cc498aa2d5c6058daced3ac</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>derivate</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a1705e5c31fc5add912c2736ac35a8899</anchor>
      <arglist>(const T &amp;o1, const T &amp;o2, double dt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signum</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a5ca4451c967158d629bfef5cc715431d</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>ac3ea701cb1ea4ed3b1ce1fb439addbbe</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIfNormalized</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>af4a0136c41ba33f3e25ae5aaa0e40072</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIfNormalized</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>acbc6716620307adfafa8a79b7fc39a10</anchor>
      <arglist>(const Vector3 &amp;v, double &amp;outputSquaredNorm)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clampScalar</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a02f269bf8b3b8348a809e3fce6bab81a</anchor>
      <arglist>(const T &amp;x, const T &amp;max, const T &amp;min)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clampScalar</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>af9e261cbaa63ece0d040c191ffbac1b8</anchor>
      <arglist>(const T &amp;x, const T &amp;limit)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>normalizedLazy</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a20db4201d4820f97f29dd40047790cce</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double STATE_OBSERVATION_DLLAPI</type>
      <name>finiteTimeAccControl</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a775c0537bef8c115ee3b650a55f45f74</anchor>
      <arglist>(double x, double xd, double kp=-1, double kv=-1)</arglist>
    </member>
    <member kind="function">
      <type>Vector STATE_OBSERVATION_DLLAPI</type>
      <name>finiteTimeAccControl</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a593050a1314f244a4e7bc765dbab398a</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;xd, double kp=-1, double kv=-1)</arglist>
    </member>
    <member kind="function">
      <type>double constexpr</type>
      <name>sqrt</name>
      <anchorfile>namespacestateObservation_1_1tools.html</anchorfile>
      <anchor>a00e4ac40ec193298c29e83b9473f1511</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>stateObservation::tools::Detail</name>
    <filename>namespacestateObservation_1_1tools_1_1Detail.html</filename>
    <member kind="function">
      <type>double constexpr</type>
      <name>sqrtNewtonRaphson</name>
      <anchorfile>namespacestateObservation_1_1tools_1_1Detail.html</anchorfile>
      <anchor>a991167aefd5a767c8946f84a8158b699</anchor>
      <arglist>(double x, double curr, double prev)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>toc</name>
    <title>Table of contents</title>
    <filename>toc</filename>
  </compound>
  <compound kind="page">
    <name>theory</name>
    <title>Theoretical details</title>
    <filename>theory</filename>
  </compound>
  <compound kind="page">
    <name>lipm_dcm_details</name>
    <title>LIPM estimator</title>
    <filename>lipm_dcm_details</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>State-Observation</title>
    <filename>index</filename>
  </compound>
</tagfile>
